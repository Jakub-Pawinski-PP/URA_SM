
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c824  0800c824  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c82c  0800c82c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c82c  0800c82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c830  0800c830  0001c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001ec  0800ca20  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800ca20  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3ab  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394b  00000000  00000000  0003c5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  000412f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029729  00000000  00000000  00042538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a92f  00000000  00000000  0006bc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d9e  00000000  00000000  00086590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0018032e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006720  00000000  00000000  001803f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2e8 	.word	0x0800c2e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800c2e8 	.word	0x0800c2e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <lcd_init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD handler
 * @return None
 */
void lcd_init (LCD_HandleTypeDef* hLCD)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

		// 4 bit initialisation

	lcd_send_cmd (hLCD,0x33);  // 0011 0011
 8001034:	2133      	movs	r1, #51	; 0x33
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f827 	bl	800108a <lcd_send_cmd>
	lcd_send_cmd (hLCD, 0x32); // 0011 0010
 800103c:	2132      	movs	r1, #50	; 0x32
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f823 	bl	800108a <lcd_send_cmd>
	lcd_send_cmd (hLCD, LCD_FUNCTION_SET | LCD_OPT_N); // 4-bit mode
 8001044:	2128      	movs	r1, #40	; 0x28
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f81f 	bl	800108a <lcd_send_cmd>


  // dislay initialisation

	 lcd_send_cmd(hLCD, LCD_CLEAR_DISPLAY);                    // Clear screen
 800104c:	2101      	movs	r1, #1
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f81b 	bl	800108a <lcd_send_cmd>
	  lcd_send_cmd(hLCD, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001054:	210c      	movs	r1, #12
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f817 	bl	800108a <lcd_send_cmd>
	  lcd_send_cmd(hLCD, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800105c:	2106      	movs	r1, #6
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f813 	bl	800108a <lcd_send_cmd>

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <lcd_clear>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD handler
 * @return None
 */
void lcd_clear (LCD_HandleTypeDef* hLCD)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(hLCD,LCD_CLEAR_DISPLAY);
 8001074:	2101      	movs	r1, #1
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f807 	bl	800108a <lcd_send_cmd>
	HAL_Delay(2);
 800107c:	2002      	movs	r0, #2
 800107e:	f001 faa3 	bl	80025c8 <HAL_Delay>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_send_cmd>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD  handler, cmd commend in hex
 * @return None
 */
void lcd_send_cmd (LCD_HandleTypeDef* hLCD, char cmd)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af02      	add	r7, sp, #8
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	70fb      	strb	r3, [r7, #3]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	f023 030f 	bic.w	r3, r3, #15
 800109c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f043 030c 	orr.w	r3, r3, #12
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	f043 030c 	orr.w	r3, r3, #12
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hLCD->I2C, LCD_ADDRESS,(uint8_t *) data_t, 4, 10);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	230a      	movs	r3, #10
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2304      	movs	r3, #4
 80010da:	214e      	movs	r1, #78	; 0x4e
 80010dc:	f002 fbde 	bl	800389c <HAL_I2C_Master_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcd_send_data>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD  handler, data one character to send
 * @return None
 */
void lcd_send_data (LCD_HandleTypeDef* hLCD, char data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f043 030d 	orr.w	r3, r3, #13
 8001108:	b2db      	uxtb	r3, r3
 800110a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	f043 0309 	orr.w	r3, r3, #9
 8001112:	b2db      	uxtb	r3, r3
 8001114:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	f043 030d 	orr.w	r3, r3, #13
 800111c:	b2db      	uxtb	r3, r3
 800111e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	f043 0309 	orr.w	r3, r3, #9
 8001126:	b2db      	uxtb	r3, r3
 8001128:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hLCD->I2C, LCD_ADDRESS,(uint8_t *) data_t, 4, 10);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f107 0208 	add.w	r2, r7, #8
 8001132:	230a      	movs	r3, #10
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2304      	movs	r3, #4
 8001138:	214e      	movs	r1, #78	; 0x4e
 800113a:	f002 fbaf 	bl	800389c <HAL_I2C_Master_Transmit>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <lcd_SetCursor>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD  handler, row target cursor line, col target cursor column
 * @return None
 */
void lcd_SetCursor(LCD_HandleTypeDef* hLCD, uint8_t row, uint8_t col)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(hLCD, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <lcd_SetCursor+0x38>)
 800115c:	5cd2      	ldrb	r2, [r2, r3]
 800115e:	78bb      	ldrb	r3, [r7, #2]
 8001160:	4413      	add	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3b80      	subs	r3, #128	; 0x80
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff8d 	bl	800108a <lcd_send_cmd>
	HAL_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f001 fa29 	bl	80025c8 <HAL_Delay>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800c354 	.word	0x0800c354

08001184 <lcd_send_string>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hLCD LCD  handler, *str pointer to data text, row target cursor line, col target cursor column
 * @return None
 */
void lcd_send_string (LCD_HandleTypeDef* hLCD, char *str, uint8_t row, uint8_t col)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	460b      	mov	r3, r1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4613      	mov	r3, r2
 8001198:	71bb      	strb	r3, [r7, #6]
	lcd_SetCursor(hLCD,row,col);
 800119a:	79ba      	ldrb	r2, [r7, #6]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4619      	mov	r1, r3
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7ff ffd1 	bl	8001148 <lcd_SetCursor>
	while (*str) lcd_send_data (hLCD,*str++);
 80011a6:	e007      	b.n	80011b8 <lcd_send_string+0x34>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff98 	bl	80010e8 <lcd_send_data>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f3      	bne.n	80011a8 <lcd_send_string+0x24>
	//for(uint8_t i = 0; i < strlen(str); i++)
	  //  lcd_send_data(hLCD, str[i]);
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC1_Init+0x98>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_ADC1_Init+0x9c>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_ADC1_Init+0x98>)
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_ADC1_Init+0xa0>)
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_ADC1_Init+0x98>)
 8001218:	2201      	movs	r2, #1
 800121a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_ADC1_Init+0x98>)
 8001226:	2201      	movs	r2, #1
 8001228:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_ADC1_Init+0x98>)
 800122c:	f001 f9f0 	bl	8002610 <HAL_ADC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 fd1b 	bl	8001c70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800123a:	230c      	movs	r3, #12
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2301      	movs	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_ADC1_Init+0x98>)
 800124c:	f001 fcb8 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001256:	f000 fd0b 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000022c 	.word	0x2000022c
 8001268:	40012000 	.word	0x40012000
 800126c:	0f000001 	.word	0x0f000001

08001270 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_ADC_MspInit+0x84>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12b      	bne.n	80012ea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_ADC_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c2:	2304      	movs	r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <HAL_ADC_MspInit+0x8c>)
 80012d6:	f002 f871 	bl	80033bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2012      	movs	r0, #18
 80012e0:	f001 ffa3 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012e4:	2012      	movs	r0, #18
 80012e6:	f001 ffbc 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40012000 	.word	0x40012000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020800 	.word	0x40020800

08001300 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a76      	ldr	r2, [pc, #472]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a70      	ldr	r2, [pc, #448]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b6e      	ldr	r3, [pc, #440]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a6a      	ldr	r2, [pc, #424]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a64      	ldr	r2, [pc, #400]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a5e      	ldr	r2, [pc, #376]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 8001394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <MX_GPIO_Init+0x1f4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80013ac:	4852      	ldr	r0, [pc, #328]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 80013ae:	f002 f9b1 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4851      	ldr	r0, [pc, #324]	; (80014fc <MX_GPIO_Init+0x1fc>)
 80013b8:	f002 f9ac 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	484b      	ldr	r0, [pc, #300]	; (8001500 <MX_GPIO_Init+0x200>)
 80013d4:	f001 fff2 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013d8:	2332      	movs	r3, #50	; 0x32
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e8:	230b      	movs	r3, #11
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4843      	ldr	r0, [pc, #268]	; (8001500 <MX_GPIO_Init+0x200>)
 80013f4:	f001 ffe2 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013f8:	2386      	movs	r3, #134	; 0x86
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001408:	230b      	movs	r3, #11
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	483c      	ldr	r0, [pc, #240]	; (8001504 <MX_GPIO_Init+0x204>)
 8001414:	f001 ffd2 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001418:	f244 0381 	movw	r3, #16513	; 0x4081
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4831      	ldr	r0, [pc, #196]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001432:	f001 ffc3 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4829      	ldr	r0, [pc, #164]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001454:	f001 ffb2 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_GPIO_Init+0x1fc>)
 8001470:	f001 ffa4 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	481d      	ldr	r0, [pc, #116]	; (80014fc <MX_GPIO_Init+0x1fc>)
 8001488:	f001 ff98 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800148c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800149e:	230a      	movs	r3, #10
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4816      	ldr	r0, [pc, #88]	; (8001504 <MX_GPIO_Init+0x204>)
 80014aa:	f001 ff87 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_GPIO_Init+0x204>)
 80014c4:	f001 ff7a 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014da:	230b      	movs	r3, #11
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_GPIO_Init+0x1fc>)
 80014e6:	f001 ff69 	bl	80033bc <HAL_GPIO_Init>

}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	; 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40020800 	.word	0x40020800
 8001504:	40020000 	.word	0x40020000

08001508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_I2C1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <MX_I2C1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_I2C1_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MX_I2C1_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_I2C1_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_I2C1_Init+0x74>)
 8001544:	f002 f91a 	bl	800377c <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154e:	f000 fb8f 	bl	8001c70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_I2C1_Init+0x74>)
 8001556:	f002 fc93 	bl	8003e80 <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 fb86 	bl	8001c70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_I2C1_Init+0x74>)
 8001568:	f002 fcd5 	bl	8003f16 <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 fb7d 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000274 	.word	0x20000274
 8001580:	40005400 	.word	0x40005400
 8001584:	00808cd2 	.word	0x00808cd2

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0aa      	sub	sp, #168	; 0xa8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2284      	movs	r2, #132	; 0x84
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fa71 	bl	8007a90 <memset>
  if(i2cHandle->Instance==I2C1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <HAL_I2C_MspInit+0xb4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d13c      	bne.n	8001632 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f9a8 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f000 fb4d 	bl	8001c70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80015ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f6:	2312      	movs	r3, #18
 80015f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001608:	2304      	movs	r3, #4
 800160a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_I2C_MspInit+0xbc>)
 8001616:	f001 fed1 	bl	80033bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_I2C_MspInit+0xb8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	37a8      	adds	r7, #168	; 0xa8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <TIM_ResetCounter>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//reset countera od enkodera
void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a76      	ldr	r2, [pc, #472]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	f040 80d9 	bne.w	800182a <HAL_TIM_PeriodElapsedCallback+0x1c6>
	{
		if(!LCD_update)
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d038      	beq.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			//pomiar napiecia na dzielniku
			HAL_ADC_Start(&hadc1);
 8001686:	4873      	ldr	r0, [pc, #460]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001688:	f001 f806 	bl	8002698 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	4619      	mov	r1, r3
 8001690:	4870      	ldr	r0, [pc, #448]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001692:	f001 f8cf 	bl	8002834 <HAL_ADC_PollForConversion>
			ADC_measure = HAL_ADC_GetValue(&hadc1);
 8001696:	486f      	ldr	r0, [pc, #444]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001698:	f001 fa67 	bl	8002b6a <HAL_ADC_GetValue>
 800169c:	4603      	mov	r3, r0
 800169e:	4a6e      	ldr	r2, [pc, #440]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80016a0:	6013      	str	r3, [r2, #0]
			ADC_measure_V = ((float)ADC_measure/(float)ADC_REG_MAX) * ADC_VOLTAGE_MAX;
 80016a2:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016ae:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80016b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001860 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c2:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
			ADC_measure_mV = (uint32_t)(1000.0 * ADC_measure_V);
 80016c8:	4b66      	ldr	r3, [pc, #408]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff5b 	bl	8000588 <__aeabi_f2d>
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b64      	ldr	r3, [pc, #400]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa80 	bl	8000be8 <__aeabi_d2uiz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a60      	ldr	r2, [pc, #384]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80016ec:	6013      	str	r3, [r2, #0]
			sygnal_pomiarowy = (uint16_t)ADC_measure_mV;
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x208>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80016f6:	801a      	strh	r2, [r3, #0]
		}

		//uchyb i moc PWM
		uchyb = (int16_t)(sygnal_sterujacy - sygnal_pomiarowy);
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800170c:	801a      	strh	r2, [r3, #0]

		PWM_float = arm_pid_f32(&PID_regulator, uchyb);
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	edd7 7a04 	vldr	s15, [r7, #16]
 800172e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	edd3 6a01 	vldr	s13, [r3, #4]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	edd3 7a03 	vldr	s15, [r3, #12]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001742:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	edd3 6a02 	vldr	s13, [r3, #8]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001780:	6013      	str	r3, [r2, #0]
		PWM = (uint16_t)(PWM_float);
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178c:	ee17 3a90 	vmov	r3, s15
 8001790:	b29b      	uxth	r3, r3
 8001792:	b21a      	sxth	r2, r3
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001796:	801a      	strh	r2, [r3, #0]

		//anti-windup
		if(PWM_float > 2000)
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x224>
 80017a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	dd11      	ble.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
			PWM = 2000;
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017b2:	801a      	strh	r2, [r3, #0]
			if(PID_regulator.state[2] > 2000)
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x224>
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	dd12      	ble.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x18a>
					{
						PID_regulator.state[2] = 2000;
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	e00e      	b.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x18a>
					}
		}
		else if (PWM_float < 0)
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	d506      	bpl.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x18a>
		{
			PWM = 0;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	801a      	strh	r2, [r3, #0]
			PID_regulator.state[2] = 0;
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
		}

		//przypisanie % PWM do odpowiednich kanalow
		if(PWM <= 1000)
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f8:	dc0a      	bgt.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
 800180e:	e00c      	b.n	800182a <HAL_TIM_PeriodElapsedCallback+0x1c6>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (PWM - 1000));
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}



	if (htim->Instance == TIM7)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d106      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x1de>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	4818      	ldr	r0, [pc, #96]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001838:	f001 ff85 	bl	8003746 <HAL_GPIO_TogglePin>
		LCD_update = 1;
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
	}
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40001000 	.word	0x40001000
 8001850:	20000218 	.word	0x20000218
 8001854:	2000022c 	.word	0x2000022c
 8001858:	20000210 	.word	0x20000210
 800185c:	00000fff 	.word	0x00000fff
 8001860:	40533333 	.word	0x40533333
 8001864:	20000348 	.word	0x20000348
 8001868:	408f4000 	.word	0x408f4000
 800186c:	20000214 	.word	0x20000214
 8001870:	2000034c 	.word	0x2000034c
 8001874:	2000034e 	.word	0x2000034e
 8001878:	2000020a 	.word	0x2000020a
 800187c:	200002c0 	.word	0x200002c0
 8001880:	2000020c 	.word	0x2000020c
 8001884:	20000208 	.word	0x20000208
 8001888:	44fa0000 	.word	0x44fa0000
 800188c:	44fa0000 	.word	0x44fa0000
 8001890:	200003bc 	.word	0x200003bc
 8001894:	40001400 	.word	0x40001400
 8001898:	40020400 	.word	0x40020400

0800189c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	//potwierdzenie wyslania danych
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80018a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a8:	482d      	ldr	r0, [pc, #180]	; (8001960 <HAL_UART_RxCpltCallback+0xc4>)
 80018aa:	f001 ff4c 	bl	8003746 <HAL_GPIO_TogglePin>

	if(huart->Instance == USART3)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <HAL_UART_RxCpltCallback+0xc8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d14e      	bne.n	8001956 <HAL_UART_RxCpltCallback+0xba>
	{
		sygnal_sterujacy = 1000*((int8_t)sygnal_sterujacy_send[0]-'0')+100*((int8_t)sygnal_sterujacy_send[1]-'0')+10*((int8_t)sygnal_sterujacy_send[2]-'0')+1*((int8_t)sygnal_sterujacy_send[3]-'0');
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_UART_RxCpltCallback+0xcc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	3b30      	subs	r3, #48	; 0x30
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	0152      	lsls	r2, r2, #5
 80018c6:	1ad2      	subs	r2, r2, r3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_UART_RxCpltCallback+0xcc>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	3b30      	subs	r3, #48	; 0x30
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	0089      	lsls	r1, r1, #2
 80018de:	440b      	add	r3, r1
 80018e0:	4619      	mov	r1, r3
 80018e2:	0088      	lsls	r0, r1, #2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	440b      	add	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_UART_RxCpltCallback+0xcc>)
 80018f4:	789b      	ldrb	r3, [r3, #2]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	3b30      	subs	r3, #48	; 0x30
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	0089      	lsls	r1, r1, #2
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_UART_RxCpltCallback+0xcc>)
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	b25b      	sxtb	r3, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b30      	subs	r3, #48	; 0x30
 8001918:	b29b      	uxth	r3, r3
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_UART_RxCpltCallback+0xd0>)
 800191e:	801a      	strh	r2, [r3, #0]

		//ograniczenie sygnalu sterujacego w bezpiecznym zakresie
			if(sygnal_sterujacy > 2700)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_UART_RxCpltCallback+0xd0>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	f640 228c 	movw	r2, #2700	; 0xa8c
 800192a:	4293      	cmp	r3, r2
 800192c:	dd04      	ble.n	8001938 <HAL_UART_RxCpltCallback+0x9c>
			{
				sygnal_sterujacy = 2700;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_UART_RxCpltCallback+0xd0>)
 8001930:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	e009      	b.n	800194c <HAL_UART_RxCpltCallback+0xb0>
			}
			else if(sygnal_sterujacy < 1600)
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_UART_RxCpltCallback+0xd0>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001942:	da03      	bge.n	800194c <HAL_UART_RxCpltCallback+0xb0>
			{
				sygnal_sterujacy = 1600;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_UART_RxCpltCallback+0xd0>)
 8001946:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800194a:	801a      	strh	r2, [r3, #0]
			}

		//ustawienie wartosci sygnalu sterujacego w porcie szeregowym
		HAL_UART_Receive_IT(&huart3, (uint8_t*)sygnal_sterujacy_send, 4);
 800194c:	2204      	movs	r2, #4
 800194e:	4906      	ldr	r1, [pc, #24]	; (8001968 <HAL_UART_RxCpltCallback+0xcc>)
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <HAL_UART_RxCpltCallback+0xd4>)
 8001952:	f004 fe56 	bl	8006602 <HAL_UART_Receive_IT>

	}

}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40020400 	.word	0x40020400
 8001964:	40004800 	.word	0x40004800
 8001968:	20000350 	.word	0x20000350
 800196c:	2000034e 	.word	0x2000034e
 8001970:	200004a0 	.word	0x200004a0

08001974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197a:	f000 fdc8 	bl	800250e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197e:	f000 f90f 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001982:	f7ff fcbd 	bl	8001300 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001986:	f000 fd01 	bl	800238c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800198a:	f000 facf 	bl	8001f2c <MX_TIM3_Init>
  MX_ADC1_Init();
 800198e:	f7ff fc1d 	bl	80011cc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001992:	f000 fb31 	bl	8001ff8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001996:	f000 fb85 	bl	80020a4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800199a:	f000 fbbb 	bl	8002114 <MX_TIM7_Init>
  MX_I2C1_Init();
 800199e:	f7ff fdb3 	bl	8001508 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //inicjalizacje kanalow PWM, enkodera i USART
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019a2:	2100      	movs	r1, #0
 80019a4:	4868      	ldr	r0, [pc, #416]	; (8001b48 <main+0x1d4>)
 80019a6:	f003 fcd1 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019aa:	2104      	movs	r1, #4
 80019ac:	4866      	ldr	r0, [pc, #408]	; (8001b48 <main+0x1d4>)
 80019ae:	f003 fccd 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80019b2:	213c      	movs	r1, #60	; 0x3c
 80019b4:	4865      	ldr	r0, [pc, #404]	; (8001b4c <main+0x1d8>)
 80019b6:	f003 fe69 	bl	800568c <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)sygnal_sterujacy_send, 4);
 80019ba:	2204      	movs	r2, #4
 80019bc:	4964      	ldr	r1, [pc, #400]	; (8001b50 <main+0x1dc>)
 80019be:	4865      	ldr	r0, [pc, #404]	; (8001b54 <main+0x1e0>)
 80019c0:	f004 fe1f 	bl	8006602 <HAL_UART_Receive_IT>

  lcd_init(&hLCD_1);
 80019c4:	4864      	ldr	r0, [pc, #400]	; (8001b58 <main+0x1e4>)
 80019c6:	f7ff fb31 	bl	800102c <lcd_init>
  HAL_Delay(10);
 80019ca:	200a      	movs	r0, #10
 80019cc:	f000 fdfc 	bl	80025c8 <HAL_Delay>
  lcd_send_cmd(&hLCD_1, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);
 80019d0:	210c      	movs	r1, #12
 80019d2:	4861      	ldr	r0, [pc, #388]	; (8001b58 <main+0x1e4>)
 80019d4:	f7ff fb59 	bl	800108a <lcd_send_cmd>

  //parametry regulatora oraz inicjalizacja
  PID_regulator.Kp = PID_KP1;
 80019d8:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <main+0x1e8>)
 80019da:	4a61      	ldr	r2, [pc, #388]	; (8001b60 <main+0x1ec>)
 80019dc:	619a      	str	r2, [r3, #24]
  PID_regulator.Ki = PID_KI1 * PID_TS;
 80019de:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <main+0x1e8>)
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <main+0x1f0>)
 80019e2:	61da      	str	r2, [r3, #28]
  PID_regulator.Kd = PID_KD1 / PID_TS;
 80019e4:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <main+0x1e8>)
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID_regulator, 1);
 80019ec:	2101      	movs	r1, #1
 80019ee:	485b      	ldr	r0, [pc, #364]	; (8001b5c <main+0x1e8>)
 80019f0:	f006 f806 	bl	8007a00 <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim6);
 80019f4:	485c      	ldr	r0, [pc, #368]	; (8001b68 <main+0x1f4>)
 80019f6:	f003 fbd9 	bl	80051ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80019fa:	485c      	ldr	r0, [pc, #368]	; (8001b6c <main+0x1f8>)
 80019fc:	f003 fbd6 	bl	80051ac <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  	  //odczyt stanu enkodera
	  	  	  enco_abs = __HAL_TIM_GET_COUNTER(&htim4) / 4;
 8001a00:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <main+0x1d8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <main+0x1fc>)
 8001a0c:	801a      	strh	r2, [r3, #0]

	  	  	  //ustawienie zakresu pracy enkodera
	  	  	  if(enco_abs > 0 && enco_abs < 1000)
 8001a0e:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <main+0x1fc>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <main+0xb8>
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <main+0x1fc>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a1e:	d205      	bcs.n	8001a2c <main+0xb8>
	  	  	  {
	  	  		  enco = enco_abs;
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <main+0x1fc>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <main+0x200>)
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	e012      	b.n	8001a52 <main+0xde>
	  	  	  }
	  	  	  else if(enco_abs <= 16384 && enco_abs > 15000)
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <main+0x1fc>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a34:	d80d      	bhi.n	8001a52 <main+0xde>
 8001a36:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <main+0x1fc>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d907      	bls.n	8001a52 <main+0xde>
	  	  	  {
	  	  		  enco = -(16384 - enco_abs);
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <main+0x1fc>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <main+0x200>)
 8001a50:	801a      	strh	r2, [r3, #0]
	  	  	  }

	  	  	  //zmiana wartosci sygnalu sterujacego za pomoca enkodera
	  	  	  sygnal_sterujacy = sygnal_sterujacy + enco;
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <main+0x204>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <main+0x200>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <main+0x204>)
 8001a6a:	801a      	strh	r2, [r3, #0]

	  	  	  //ograniczenie sygnalu sterujacego, gdy jest zmieniany z uzyciem enkodera
	  	  	  if(sygnal_sterujacy > 2700)
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <main+0x204>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dd04      	ble.n	8001a84 <main+0x110>
	  	  				{
	  	  					sygnal_sterujacy = 2700;
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <main+0x204>)
 8001a7c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e009      	b.n	8001a98 <main+0x124>
	  	  				}
	  	  				else if(sygnal_sterujacy < 1600)
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <main+0x204>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001a8e:	da03      	bge.n	8001a98 <main+0x124>
	  	  				{
	  	  					sygnal_sterujacy = 1600;
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <main+0x204>)
 8001a92:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001a96:	801a      	strh	r2, [r3, #0]
	  	  				}

	  	  	  //reset stanu enkodera
	  	  	  TIM_ResetCounter(TIM4);
 8001a98:	4838      	ldr	r0, [pc, #224]	; (8001b7c <main+0x208>)
 8001a9a:	f7ff fdd5 	bl	8001648 <TIM_ResetCounter>
	  	  	  enco_abs = 0;
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <main+0x1fc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
	  	  	  enco = 0;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <main+0x200>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]

	  		if(LCD_update)
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <main+0x20c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d045      	beq.n	8001b3e <main+0x1ca>
	  			  {
	  				  //odczyt wartosci sygnalow na ekranie LCD
	  				  sprintf(send_line, "Set: mV:  PWM:");
 8001ab2:	4934      	ldr	r1, [pc, #208]	; (8001b84 <main+0x210>)
 8001ab4:	4834      	ldr	r0, [pc, #208]	; (8001b88 <main+0x214>)
 8001ab6:	f006 fe73 	bl	80087a0 <siprintf>
	  				  lcd_clear(&hLCD_1);
 8001aba:	4827      	ldr	r0, [pc, #156]	; (8001b58 <main+0x1e4>)
 8001abc:	f7ff fad6 	bl	800106c <lcd_clear>
	  				  lcd_send_string (&hLCD_1, send_line, 0, 0);
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4930      	ldr	r1, [pc, #192]	; (8001b88 <main+0x214>)
 8001ac6:	4824      	ldr	r0, [pc, #144]	; (8001b58 <main+0x1e4>)
 8001ac8:	f7ff fb5c 	bl	8001184 <lcd_send_string>
	  				  HAL_Delay(2);
 8001acc:	2002      	movs	r0, #2
 8001ace:	f000 fd7b 	bl	80025c8 <HAL_Delay>
	  				  sprintf(send_line, "%d %d %d", (uint16_t)sygnal_sterujacy, (uint16_t)sygnal_pomiarowy, (uint16_t)PWM);
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <main+0x204>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <main+0x218>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <main+0x21c>)
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	460b      	mov	r3, r1
 8001aee:	4929      	ldr	r1, [pc, #164]	; (8001b94 <main+0x220>)
 8001af0:	4825      	ldr	r0, [pc, #148]	; (8001b88 <main+0x214>)
 8001af2:	f006 fe55 	bl	80087a0 <siprintf>
	  				  lcd_send_string (&hLCD_1, send_line, 1, 0);
 8001af6:	2300      	movs	r3, #0
 8001af8:	2201      	movs	r2, #1
 8001afa:	4923      	ldr	r1, [pc, #140]	; (8001b88 <main+0x214>)
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <main+0x1e4>)
 8001afe:	f7ff fb41 	bl	8001184 <lcd_send_string>

	  				  //odczyt wartosci sygnalow w porcie szeregowym
	  		  		  uint8_t n = sprintf(send_line_usart, "Sygnal_sterujacy: %d; Sygnal_pomiarowy: %d; PWM: %d; \n\r", (uint16_t)sygnal_sterujacy, (uint16_t)sygnal_pomiarowy, (uint16_t)PWM);
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <main+0x204>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <main+0x218>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <main+0x21c>)
 8001b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	491e      	ldr	r1, [pc, #120]	; (8001b98 <main+0x224>)
 8001b20:	481e      	ldr	r0, [pc, #120]	; (8001b9c <main+0x228>)
 8001b22:	f006 fe3d 	bl	80087a0 <siprintf>
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	  		  		  HAL_UART_Transmit(&huart3, (uint8_t*)send_line_usart, n, 100);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	2364      	movs	r3, #100	; 0x64
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <main+0x228>)
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <main+0x1e0>)
 8001b34:	f004 fcd2 	bl	80064dc <HAL_UART_Transmit>
	  				  LCD_update = 0;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <main+0x20c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
	  			  }

	  	  //opoznienie odczytu danych
	 	  HAL_Delay(1000);
 8001b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b42:	f000 fd41 	bl	80025c8 <HAL_Delay>
	  	  	  enco_abs = __HAL_TIM_GET_COUNTER(&htim4) / 4;
 8001b46:	e75b      	b.n	8001a00 <main+0x8c>
 8001b48:	200003bc 	.word	0x200003bc
 8001b4c:	20000370 	.word	0x20000370
 8001b50:	20000350 	.word	0x20000350
 8001b54:	200004a0 	.word	0x200004a0
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	200002c0 	.word	0x200002c0
 8001b60:	3e19999a 	.word	0x3e19999a
 8001b64:	3d0f5c29 	.word	0x3d0f5c29
 8001b68:	20000408 	.word	0x20000408
 8001b6c:	20000454 	.word	0x20000454
 8001b70:	2000021a 	.word	0x2000021a
 8001b74:	2000021c 	.word	0x2000021c
 8001b78:	2000034e 	.word	0x2000034e
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	20000218 	.word	0x20000218
 8001b84:	0800c300 	.word	0x0800c300
 8001b88:	20000354 	.word	0x20000354
 8001b8c:	2000034c 	.word	0x2000034c
 8001b90:	20000208 	.word	0x20000208
 8001b94:	0800c310 	.word	0x0800c310
 8001b98:	0800c31c 	.word	0x0800c31c
 8001b9c:	200002e4 	.word	0x200002e4

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	; 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 ff6e 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bc4:	f002 f9f4 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <SystemClock_Config+0xc8>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <SystemClock_Config+0xc8>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <SystemClock_Config+0xc8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <SystemClock_Config+0xcc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c06:	2302      	movs	r3, #2
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c14:	2348      	movs	r3, #72	; 0x48
 8001c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 f9d3 	bl	8003fd0 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c30:	f000 f81e 	bl	8001c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	230f      	movs	r3, #15
 8001c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fc61 	bl	8004518 <HAL_RCC_ClockConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c5c:	f000 f808 	bl	8001c70 <Error_Handler>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3750      	adds	r7, #80	; 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <Error_Handler+0x8>
	...

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <NMI_Handler+0x4>

08001cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f000 fc3a 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <ADC_IRQHandler+0x10>)
 8001d1e:	f000 fe14 	bl	800294a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000022c 	.word	0x2000022c

08001d2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM4_IRQHandler+0x10>)
 8001d32:	f003 fd59 	bl	80057e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000370 	.word	0x20000370

08001d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART3_IRQHandler+0x10>)
 8001d46:	f004 fcab 	bl	80066a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200004a0 	.word	0x200004a0

08001d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <TIM6_DAC_IRQHandler+0x10>)
 8001d5a:	f003 fd45 	bl	80057e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000408 	.word	0x20000408

08001d68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <TIM7_IRQHandler+0x10>)
 8001d6e:	f003 fd3b 	bl	80057e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000454 	.word	0x20000454

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
	return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d96:	f005 fe51 	bl	8007a3c <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2216      	movs	r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_exit>:

void _exit (int status)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe7 	bl	8001d8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dbe:	e7fe      	b.n	8001dbe <_exit+0x12>

08001dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd2:	f3af 8000 	nop.w
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf0      	blt.n	8001dd2 <_read+0x12>
	}

return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e009      	b.n	8001e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf1      	blt.n	8001e0c <_write+0x12>
	}
	return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_close>:

int _close(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_isatty>:

int _isatty(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	return 1;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f005 fdb6 	bl	8007a3c <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20050000 	.word	0x20050000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	20000220 	.word	0x20000220
 8001f04:	20000538 	.word	0x20000538

08001f08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <MX_TIM3_Init+0xc8>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f58:	2247      	movs	r2, #71	; 0x47
 8001f5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f76:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f78:	f003 f990 	bl	800529c <HAL_TIM_PWM_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f82:	f7ff fe75 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001f96:	f004 f9a7 	bl	80062e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001fa0:	f7ff fe66 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa4:	2360      	movs	r3, #96	; 0x60
 8001fa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001fbc:	f003 fd34 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001fc6:	f7ff fe53 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001fd2:	f003 fd29 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001fdc:	f7ff fe48 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM3_Init+0xc4>)
 8001fe2:	f000 f97d 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200003bc 	.word	0x200003bc
 8001ff4:	40000400 	.word	0x40000400

08001ff8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f005 fd42 	bl	8007a90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	463b      	mov	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_TIM4_Init+0xa4>)
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <MX_TIM4_Init+0xa8>)
 800201a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_TIM4_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_TIM4_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_TIM4_Init+0xa4>)
 800202a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_TIM4_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <MX_TIM4_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800203c:	2303      	movs	r3, #3
 800203e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002040:	2302      	movs	r3, #2
 8002042:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002054:	2301      	movs	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_TIM4_Init+0xa4>)
 8002068:	f003 fa6a 	bl	8005540 <HAL_TIM_Encoder_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002072:	f7ff fdfd 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <MX_TIM4_Init+0xa4>)
 8002084:	f004 f930 	bl	80062e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800208e:	f7ff fdef 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000370 	.word	0x20000370
 80020a0:	40000800 	.word	0x40000800

080020a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM6_Init+0x68>)
 80020b6:	4a16      	ldr	r2, [pc, #88]	; (8002110 <MX_TIM6_Init+0x6c>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_TIM6_Init+0x68>)
 80020bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80020c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_TIM6_Init+0x68>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_TIM6_Init+0x68>)
 80020ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_TIM6_Init+0x68>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM6_Init+0x68>)
 80020d8:	f003 f810 	bl	80050fc <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80020e2:	f7ff fdc5 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM6_Init+0x68>)
 80020f4:	f004 f8f8 	bl	80062e8 <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80020fe:	f7ff fdb7 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000408 	.word	0x20000408
 8002110:	40001000 	.word	0x40001000

08002114 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM7_Init+0x68>)
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <MX_TIM7_Init+0x6c>)
 8002128:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_TIM7_Init+0x68>)
 800212c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002130:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_TIM7_Init+0x68>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <MX_TIM7_Init+0x68>)
 800213a:	f242 720f 	movw	r2, #9999	; 0x270f
 800213e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_TIM7_Init+0x68>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_TIM7_Init+0x68>)
 8002148:	f002 ffd8 	bl	80050fc <HAL_TIM_Base_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002152:	f7ff fd8d 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002156:	2320      	movs	r3, #32
 8002158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_TIM7_Init+0x68>)
 8002164:	f004 f8c0 	bl	80062e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800216e:	f7ff fd7f 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000454 	.word	0x20000454
 8002180:	40001400 	.word	0x40001400

08002184 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_TIM_PWM_MspInit+0x38>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d130      	bne.n	8002248 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_TIM_Encoder_MspInit+0x90>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002216:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002228:	2302      	movs	r3, #2
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <HAL_TIM_Encoder_MspInit+0x94>)
 8002234:	f001 f8c2 	bl	80033bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	201e      	movs	r0, #30
 800223e:	f000 fff4 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002242:	201e      	movs	r0, #30
 8002244:	f001 f80d 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40000800 	.word	0x40000800
 8002254:	40023800 	.word	0x40023800
 8002258:	40020c00 	.word	0x40020c00

0800225c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d114      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2036      	movs	r0, #54	; 0x36
 800228c:	f000 ffcd 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002290:	2036      	movs	r0, #54	; 0x36
 8002292:	f000 ffe6 	bl	8003262 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002296:	e018      	b.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_TIM_Base_MspInit+0x80>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2037      	movs	r0, #55	; 0x37
 80022c0:	f000 ffb3 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c4:	2037      	movs	r0, #55	; 0x37
 80022c6:	f000 ffcc 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40001000 	.word	0x40001000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40001400 	.word	0x40001400

080022e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_TIM_MspPostInit+0x9c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d137      	bne.n	8002372 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_TIM_MspPostInit+0xa0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002342:	2302      	movs	r3, #2
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <HAL_TIM_MspPostInit+0xa4>)
 800234e:	f001 f835 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002362:	2302      	movs	r3, #2
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_TIM_MspPostInit+0xa8>)
 800236e:	f001 f825 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40000400 	.word	0x40000400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020800 	.word	0x40020800

0800238c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <MX_USART3_UART_Init+0x5c>)
 8002394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_USART3_UART_Init+0x58>)
 80023d0:	f004 f836 	bl	8006440 <HAL_UART_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023da:	f7ff fc49 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200004a0 	.word	0x200004a0
 80023e8:	40004800 	.word	0x40004800

080023ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0aa      	sub	sp, #168	; 0xa8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	2284      	movs	r2, #132	; 0x84
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f005 fb3f 	bl	8007a90 <memset>
  if(uartHandle->Instance==USART3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d144      	bne.n	80024a6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002420:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002422:	2300      	movs	r3, #0
 8002424:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fa76 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff fc1b 	bl	8001c70 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800246a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002484:	2307      	movs	r3, #7
 8002486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800248e:	4619      	mov	r1, r3
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_UART_MspInit+0xcc>)
 8002492:	f000 ff93 	bl	80033bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2027      	movs	r0, #39	; 0x27
 800249c:	f000 fec5 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024a0:	2027      	movs	r0, #39	; 0x27
 80024a2:	f000 fede 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024a6:	bf00      	nop
 80024a8:	37a8      	adds	r7, #168	; 0xa8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40004800 	.word	0x40004800
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020c00 	.word	0x40020c00

080024bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c2:	490e      	ldr	r1, [pc, #56]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d8:	4c0b      	ldr	r4, [pc, #44]	; (8002508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e6:	f7ff fd0f 	bl	8001f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f005 faad 	bl	8007a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ee:	f7ff fa41 	bl	8001974 <main>
  bx  lr    
 80024f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002500:	0800c834 	.word	0x0800c834
  ldr r2, =_sbss
 8002504:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002508:	20000538 	.word	0x20000538

0800250c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800250c:	e7fe      	b.n	800250c <CAN1_RX0_IRQHandler>

0800250e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002512:	2003      	movs	r0, #3
 8002514:	f000 fe7e 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002518:	2000      	movs	r0, #0
 800251a:	f000 f805 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251e:	f7ff fbad 	bl	8001c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x54>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x58>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fe99 	bl	800327e <HAL_SYSTICK_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e00e      	b.n	8002574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d80a      	bhi.n	8002572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800255c:	2200      	movs	r2, #0
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f000 fe61 	bl	800322a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <HAL_InitTick+0x5c>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000000c 	.word	0x2000000c
 8002580:	20000014 	.word	0x20000014
 8002584:	20000010 	.word	0x20000010

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000014 	.word	0x20000014
 80025ac:	20000524 	.word	0x20000524

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000524 	.word	0x20000524

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000014 	.word	0x20000014

08002610 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e031      	b.n	800268a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fe1e 	bl	8001270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_ADC_Init+0x84>)
 8002654:	4013      	ands	r3, r2
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fc04 	bl	8002e6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
 800267a:	e001      	b.n	8002680 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	ffffeefd 	.word	0xffffeefd

08002698 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Start+0x1a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0ad      	b.n	800280e <HAL_ADC_Start+0x176>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d018      	beq.n	80026fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_ADC_Start+0x184>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_ADC_Start+0x188>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9a      	lsrs	r2, r3, #18
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d175      	bne.n	80027f4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270c:	4b45      	ldr	r3, [pc, #276]	; (8002824 <HAL_ADC_Start+0x18c>)
 800270e:	4013      	ands	r3, r2
 8002710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800272e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	d106      	bne.n	8002752 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f023 0206 	bic.w	r2, r3, #6
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	645a      	str	r2, [r3, #68]	; 0x44
 8002750:	e002      	b.n	8002758 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002768:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800276a:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <HAL_ADC_Start+0x190>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d143      	bne.n	800280c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e03a      	b.n	800280c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_ADC_Start+0x194>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10e      	bne.n	80027be <HAL_ADC_Start+0x126>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_ADC_Start+0x190>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d120      	bne.n	800280c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_ADC_Start+0x198>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d11b      	bne.n	800280c <HAL_ADC_Start+0x174>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d114      	bne.n	800280c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	e00b      	b.n	800280c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	2000000c 	.word	0x2000000c
 8002820:	431bde83 	.word	0x431bde83
 8002824:	fffff8fe 	.word	0xfffff8fe
 8002828:	40012300 	.word	0x40012300
 800282c:	40012000 	.word	0x40012000
 8002830:	40012200 	.word	0x40012200

08002834 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d113      	bne.n	800287a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d10b      	bne.n	800287a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e063      	b.n	8002942 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800287a:	f7ff fe99 	bl	80025b0 <HAL_GetTick>
 800287e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002880:	e021      	b.n	80028c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d01d      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_ADC_PollForConversion+0x6c>
 8002890:	f7ff fe8e 	bl	80025b0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d212      	bcs.n	80028c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d00b      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03d      	b.n	8002942 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d1d6      	bne.n	8002882 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0212 	mvn.w	r2, #18
 80028dc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d123      	bne.n	8002940 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11f      	bne.n	8002940 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002918:	2b00      	cmp	r3, #0
 800291a:	d111      	bne.n	8002940 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d049      	beq.n	8002a14 <HAL_ADC_IRQHandler+0xca>
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d046      	beq.n	8002a14 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12b      	bne.n	8002a04 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d127      	bne.n	8002a04 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d119      	bne.n	8002a04 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0220 	bic.w	r2, r2, #32
 80029de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8bd 	bl	8002b84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0212 	mvn.w	r2, #18
 8002a12:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d057      	beq.n	8002ada <HAL_ADC_IRQHandler+0x190>
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d054      	beq.n	8002ada <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d139      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12b      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d124      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d119      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fac8 	bl	8003060 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 020c 	mvn.w	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x1d6>
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10d      	bne.n	8002b20 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f841 	bl	8002b98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0201 	mvn.w	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <HAL_ADC_IRQHandler+0x218>
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f043 0202 	orr.w	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0220 	mvn.w	r2, #32
 8002b50:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f82a 	bl	8002bac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0220 	mvn.w	r2, #32
 8002b60:	601a      	str	r2, [r3, #0]
  }
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x1c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e136      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x28a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d93a      	bls.n	8002c62 <HAL_ADC_ConfigChannel+0xa2>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bf4:	d035      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68d9      	ldr	r1, [r3, #12]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b1e      	subs	r3, #30
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8d      	ldr	r2, [pc, #564]	; (8002e58 <HAL_ADC_ConfigChannel+0x298>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	061a      	lsls	r2, r3, #24
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c3a:	e035      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68d9      	ldr	r1, [r3, #12]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4403      	add	r3, r0
 8002c54:	3b1e      	subs	r3, #30
 8002c56:	409a      	lsls	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c60:	e022      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6919      	ldr	r1, [r3, #16]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6919      	ldr	r1, [r3, #16]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4403      	add	r3, r0
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d824      	bhi.n	8002cfa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b05      	subs	r3, #5
 8002cc2:	221f      	movs	r2, #31
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	400a      	ands	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b05      	subs	r3, #5
 8002cec:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf8:	e04c      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d824      	bhi.n	8002d4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b23      	subs	r3, #35	; 0x23
 8002d14:	221f      	movs	r2, #31
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b23      	subs	r3, #35	; 0x23
 8002d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4a:	e023      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b41      	subs	r3, #65	; 0x41
 8002d5e:	221f      	movs	r2, #31
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43da      	mvns	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b41      	subs	r3, #65	; 0x41
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_ADC_ConfigChannel+0x29c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10a      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1f4>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002db2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_ADC_ConfigChannel+0x29c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10f      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x21e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d10b      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dd0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ddc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_ADC_ConfigChannel+0x29c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d12b      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x280>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_ADC_ConfigChannel+0x298>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x23a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b11      	cmp	r3, #17
 8002df8:	d122      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e04:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e10:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_ADC_ConfigChannel+0x298>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d111      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_ADC_ConfigChannel+0x2a4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_ADC_ConfigChannel+0x2a8>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9a      	lsrs	r2, r3, #18
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	10000012 	.word	0x10000012
 8002e5c:	40012000 	.word	0x40012000
 8002e60:	40012300 	.word	0x40012300
 8002e64:	2000000c 	.word	0x2000000c
 8002e68:	431bde83 	.word	0x431bde83

08002e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e74:	4b78      	ldr	r3, [pc, #480]	; (8003058 <ADC_Init+0x1ec>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <ADC_Init+0x1ec>)
 8002e7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <ADC_Init+0x1ec>)
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4973      	ldr	r1, [pc, #460]	; (8003058 <ADC_Init+0x1ec>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	4a58      	ldr	r2, [pc, #352]	; (800305c <ADC_Init+0x1f0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e00f      	b.n	8002f66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0202 	bic.w	r2, r2, #2
 8002f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	005a      	lsls	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	035a      	lsls	r2, r3, #13
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e007      	b.n	8002fdc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	051a      	lsls	r2, r3, #20
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800301e:	025a      	lsls	r2, r3, #9
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	029a      	lsls	r2, r3, #10
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	0f000001 	.word	0x0f000001

08003060 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x40>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	05fa0000 	.word	0x05fa0000

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff29 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff ff3e 	bl	80030bc <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff8e 	bl	8003168 <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff5d 	bl	8003114 <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff31 	bl	80030d8 <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffa2 	bl	80031d0 <SysTick_Config>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff f984 	bl	80025b0 <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d008      	beq.n	80032c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e052      	b.n	800336e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0216 	bic.w	r2, r2, #22
 80032d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <HAL_DMA_Abort+0x62>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0208 	bic.w	r2, r2, #8
 8003306:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003318:	e013      	b.n	8003342 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331a:	f7ff f949 	bl	80025b0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b05      	cmp	r3, #5
 8003326:	d90c      	bls.n	8003342 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2203      	movs	r2, #3
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e015      	b.n	800336e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e4      	bne.n	800331a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	223f      	movs	r2, #63	; 0x3f
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d004      	beq.n	8003394 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e00c      	b.n	80033ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2205      	movs	r2, #5
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e175      	b.n	80036c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f040 8164 	bne.w	80036c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d005      	beq.n	8003412 <HAL_GPIO_Init+0x56>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d130      	bne.n	8003474 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 0201 	and.w	r2, r3, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d017      	beq.n	80034b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d123      	bne.n	8003504 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0203 	and.w	r2, r3, #3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80be 	beq.w	80036c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <HAL_GPIO_Init+0x324>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_GPIO_Init+0x324>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_GPIO_Init+0x324>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800355e:	4a61      	ldr	r2, [pc, #388]	; (80036e4 <HAL_GPIO_Init+0x328>)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3302      	adds	r3, #2
 8003566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_GPIO_Init+0x32c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d037      	beq.n	80035fa <HAL_GPIO_Init+0x23e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a57      	ldr	r2, [pc, #348]	; (80036ec <HAL_GPIO_Init+0x330>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_GPIO_Init+0x23a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02b      	beq.n	80035f2 <HAL_GPIO_Init+0x236>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a55      	ldr	r2, [pc, #340]	; (80036f4 <HAL_GPIO_Init+0x338>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d025      	beq.n	80035ee <HAL_GPIO_Init+0x232>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a54      	ldr	r2, [pc, #336]	; (80036f8 <HAL_GPIO_Init+0x33c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <HAL_GPIO_Init+0x22e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a53      	ldr	r2, [pc, #332]	; (80036fc <HAL_GPIO_Init+0x340>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d019      	beq.n	80035e6 <HAL_GPIO_Init+0x22a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a52      	ldr	r2, [pc, #328]	; (8003700 <HAL_GPIO_Init+0x344>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a51      	ldr	r2, [pc, #324]	; (8003704 <HAL_GPIO_Init+0x348>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00d      	beq.n	80035de <HAL_GPIO_Init+0x222>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a50      	ldr	r2, [pc, #320]	; (8003708 <HAL_GPIO_Init+0x34c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	; (800370c <HAL_GPIO_Init+0x350>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035d2:	2309      	movs	r3, #9
 80035d4:	e012      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035d6:	230a      	movs	r3, #10
 80035d8:	e010      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035da:	2308      	movs	r3, #8
 80035dc:	e00e      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035de:	2307      	movs	r3, #7
 80035e0:	e00c      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035e2:	2306      	movs	r3, #6
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035e6:	2305      	movs	r3, #5
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x240>
 80035fa:	2300      	movs	r3, #0
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800360c:	4935      	ldr	r1, [pc, #212]	; (80036e4 <HAL_GPIO_Init+0x328>)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_GPIO_Init+0x354>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a34      	ldr	r2, [pc, #208]	; (8003710 <HAL_GPIO_Init+0x354>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b32      	ldr	r3, [pc, #200]	; (8003710 <HAL_GPIO_Init+0x354>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a29      	ldr	r2, [pc, #164]	; (8003710 <HAL_GPIO_Init+0x354>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <HAL_GPIO_Init+0x354>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_GPIO_Init+0x354>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_GPIO_Init+0x354>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_GPIO_Init+0x354>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3301      	adds	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	f67f ae86 	bls.w	80033dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40021400 	.word	0x40021400
 8003700:	40021800 	.word	0x40021800
 8003704:	40021c00 	.word	0x40021c00
 8003708:	40022000 	.word	0x40022000
 800370c:	40022400 	.word	0x40022400
 8003710:	40013c00 	.word	0x40013c00

08003714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
 8003720:	4613      	mov	r3, r2
 8003722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003730:	e003      	b.n	800373a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003758:	887a      	ldrh	r2, [r7, #2]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	041a      	lsls	r2, r3, #16
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43d9      	mvns	r1, r3
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07f      	b.n	800388e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fef0 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e006      	b.n	8003804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d104      	bne.n	8003816 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003814:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <HAL_I2C_Init+0x11c>)
 8003822:	430b      	orrs	r3, r1
 8003824:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003834:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69d9      	ldr	r1, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	02008000 	.word	0x02008000

0800389c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	461a      	mov	r2, r3
 80038a8:	460b      	mov	r3, r1
 80038aa:	817b      	strh	r3, [r7, #10]
 80038ac:	4613      	mov	r3, r2
 80038ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 80da 	bne.w	8003a72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_I2C_Master_Transmit+0x30>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e0d3      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038d4:	f7fe fe6c 	bl	80025b0 <HAL_GetTick>
 80038d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2319      	movs	r3, #25
 80038e0:	2201      	movs	r2, #1
 80038e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f8f0 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0be      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2210      	movs	r2, #16
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	d90e      	bls.n	8003946 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	8979      	ldrh	r1, [r7, #10]
 8003936:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <HAL_I2C_Master_Transmit+0x1e0>)
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa6c 	bl	8003e1c <I2C_TransferConfig>
 8003944:	e06c      	b.n	8003a20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	b2da      	uxtb	r2, r3
 8003956:	8979      	ldrh	r1, [r7, #10]
 8003958:	4b48      	ldr	r3, [pc, #288]	; (8003a7c <HAL_I2C_Master_Transmit+0x1e0>)
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fa5b 	bl	8003e1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003966:	e05b      	b.n	8003a20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	6a39      	ldr	r1, [r7, #32]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f8ed 	bl	8003b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e07b      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d034      	beq.n	8003a20 <HAL_I2C_Master_Transmit+0x184>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d130      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f87f 	bl	8003acc <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e04d      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2bff      	cmp	r3, #255	; 0xff
 80039e0:	d90e      	bls.n	8003a00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	22ff      	movs	r2, #255	; 0xff
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	2300      	movs	r3, #0
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fa0f 	bl	8003e1c <I2C_TransferConfig>
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f9fe 	bl	8003e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d19e      	bne.n	8003968 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8cc 	bl	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e01a      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2220      	movs	r2, #32
 8003a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a52:	400b      	ands	r3, r1
 8003a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	80002000 	.word	0x80002000
 8003a80:	fe00e800 	.word	0xfe00e800

08003a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d103      	bne.n	8003aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	619a      	str	r2, [r3, #24]
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	e022      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d01e      	beq.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fe fd63 	bl	80025b0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e00f      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d0cd      	beq.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b58:	e02c      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f870 	bl	8003c44 <I2C_IsErrorOccurred>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02a      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d01e      	beq.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fd1b 	bl	80025b0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d1cb      	bne.n	8003b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd8:	e028      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f830 	bl	8003c44 <I2C_IsErrorOccurred>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e026      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fe fcdf 	bl	80025b0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d1cf      	bne.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d075      	beq.n	8003d5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c78:	e056      	b.n	8003d28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d052      	beq.n	8003d28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fe fc95 	bl	80025b0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <I2C_IsErrorOccurred+0x54>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d147      	bne.n	8003d28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003caa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cba:	d12e      	bne.n	8003d1a <I2C_IsErrorOccurred+0xd6>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc2:	d02a      	beq.n	8003d1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d027      	beq.n	8003d1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cda:	f7fe fc69 	bl	80025b0 <HAL_GetTick>
 8003cde:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce0:	e01b      	b.n	8003d1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ce2:	f7fe fc65 	bl	80025b0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b19      	cmp	r3, #25
 8003cee:	d914      	bls.n	8003d1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d1dc      	bne.n	8003ce2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d003      	beq.n	8003d3e <I2C_IsErrorOccurred+0xfa>
 8003d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d09d      	beq.n	8003c7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f043 0304 	orr.w	r3, r3, #4
 8003d54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01c      	beq.n	8003e0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fe56 	bl	8003a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <I2C_IsErrorOccurred+0x1d4>)
 8003de4:	400b      	ands	r3, r1
 8003de6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	fe00e800 	.word	0xfe00e800

08003e1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e34:	7a7b      	ldrb	r3, [r7, #9]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	0d5b      	lsrs	r3, r3, #21
 8003e56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <I2C_TransferConfig+0x60>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	ea02 0103 	and.w	r1, r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	03ff63ff 	.word	0x03ff63ff

08003e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d138      	bne.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e032      	b.n	8003f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d139      	bne.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e033      	b.n	8003fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2224      	movs	r2, #36	; 0x24
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e291      	b.n	800450a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8087 	beq.w	8004102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff4:	4b96      	ldr	r3, [pc, #600]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00c      	beq.n	800401a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004000:	4b93      	ldr	r3, [pc, #588]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d112      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
 800400c:	4b90      	ldr	r3, [pc, #576]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d06c      	beq.n	8004100 <HAL_RCC_OscConfig+0x130>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d168      	bne.n	8004100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e26b      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x7a>
 800403c:	4b84      	ldr	r3, [pc, #528]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a83      	ldr	r2, [pc, #524]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e02e      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x9c>
 8004052:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7e      	ldr	r2, [pc, #504]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b7c      	ldr	r3, [pc, #496]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a7b      	ldr	r2, [pc, #492]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0xc0>
 8004076:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a72      	ldr	r2, [pc, #456]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6e      	ldr	r2, [pc, #440]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b6c      	ldr	r3, [pc, #432]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fa7e 	bl	80025b0 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fa7a 	bl	80025b0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e21f      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fa6a 	bl	80025b0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fa66 	bl	80025b0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e20b      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b57      	ldr	r3, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x110>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d069      	beq.n	80041e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410e:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
 8004126:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1df      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	493d      	ldr	r1, [pc, #244]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e040      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d023      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe fa1c 	bl	80025b0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe fa18 	bl	80025b0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1bd      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4929      	ldr	r1, [pc, #164]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
 80041ae:	e018      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe f9f8 	bl	80025b0 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fe f9f4 	bl	80025b0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e199      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d038      	beq.n	8004260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fe f9d5 	bl	80025b0 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fe f9d1 	bl	80025b0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e176      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x23a>
 8004228:	e01a      	b.n	8004260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe f9bb 	bl	80025b0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe f9b7 	bl	80025b0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d903      	bls.n	8004254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e15c      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
 8004250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b91      	ldr	r3, [pc, #580]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a4 	beq.w	80043b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a87      	ldr	r2, [pc, #540]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b85      	ldr	r3, [pc, #532]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004296:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042a2:	4b7f      	ldr	r3, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7e      	ldr	r2, [pc, #504]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fe f97f 	bl	80025b0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe f97b 	bl	80025b0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e120      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c8:	4b75      	ldr	r3, [pc, #468]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x31a>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	e02d      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x33c>
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a66      	ldr	r2, [pc, #408]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	e01c      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x35e>
 8004314:	4b61      	ldr	r3, [pc, #388]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a60      	ldr	r2, [pc, #384]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a5d      	ldr	r2, [pc, #372]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800432e:	4b5b      	ldr	r3, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a5a      	ldr	r2, [pc, #360]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a57      	ldr	r2, [pc, #348]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d015      	beq.n	800437a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fe f92f 	bl	80025b0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe f92b 	bl	80025b0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0ce      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b4b      	ldr	r3, [pc, #300]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCC_OscConfig+0x386>
 8004378:	e014      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fe f919 	bl	80025b0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe f915 	bl	80025b0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0b8      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	4b40      	ldr	r3, [pc, #256]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	4b3c      	ldr	r3, [pc, #240]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a3b      	ldr	r2, [pc, #236]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a4 	beq.w	8004508 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d06b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d149      	bne.n	8004468 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe f8e6 	bl	80025b0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe f8e2 	bl	80025b0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e087      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	4313      	orrs	r3, r2
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800442e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004432:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe f8b6 	bl	80025b0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe f8b2 	bl	80025b0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e057      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x478>
 8004466:	e04f      	b.n	8004508 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe f89c 	bl	80025b0 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe f898 	bl	80025b0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e03d      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x4ac>
 800449a:	e035      	b.n	8004508 <HAL_RCC_OscConfig+0x538>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x544>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d028      	beq.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d121      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11a      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	3b01      	subs	r3, #1
 80044ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0d0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	4965      	ldr	r1, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d040      	beq.n	800463c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d115      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e073      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4936      	ldr	r1, [pc, #216]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fd ffd0 	bl	80025b0 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fd ffcc 	bl	80025b0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e053      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d210      	bcs.n	800466c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4922      	ldr	r1, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1cc>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1d0>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd ff2c 	bl	8002528 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800c358 	.word	0x0800c358
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	20000010 	.word	0x20000010

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80bd 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x1a4>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0b7      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b61      	ldr	r3, [pc, #388]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004726:	60bb      	str	r3, [r7, #8]
      break;
 8004728:	e0b7      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800472c:	60bb      	str	r3, [r7, #8]
      break;
 800472e:	e0b4      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b5d      	ldr	r3, [pc, #372]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800473a:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04d      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	461a      	mov	r2, r3
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	ea02 0800 	and.w	r8, r2, r0
 800475e:	ea03 0901 	and.w	r9, r3, r1
 8004762:	4640      	mov	r0, r8
 8004764:	4649      	mov	r1, r9
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	014b      	lsls	r3, r1, #5
 8004770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004774:	0142      	lsls	r2, r0, #5
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	ebb0 0008 	subs.w	r0, r0, r8
 800477e:	eb61 0109 	sbc.w	r1, r1, r9
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	018b      	lsls	r3, r1, #6
 800478c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004790:	0182      	lsls	r2, r0, #6
 8004792:	1a12      	subs	r2, r2, r0
 8004794:	eb63 0301 	sbc.w	r3, r3, r1
 8004798:	f04f 0000 	mov.w	r0, #0
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	00d9      	lsls	r1, r3, #3
 80047a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a6:	00d0      	lsls	r0, r2, #3
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	eb12 0208 	adds.w	r2, r2, r8
 80047b0:	eb43 0309 	adc.w	r3, r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0259      	lsls	r1, r3, #9
 80047be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047c2:	0250      	lsls	r0, r2, #9
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	f7fc fa78 	bl	8000cc8 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e04a      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	ea02 0400 	and.w	r4, r2, r0
 80047fa:	ea03 0501 	and.w	r5, r3, r1
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004810:	0142      	lsls	r2, r0, #5
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	1b00      	subs	r0, r0, r4
 8004818:	eb61 0105 	sbc.w	r1, r1, r5
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	018b      	lsls	r3, r1, #6
 8004826:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800482a:	0182      	lsls	r2, r0, #6
 800482c:	1a12      	subs	r2, r2, r0
 800482e:	eb63 0301 	sbc.w	r3, r3, r1
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	00d9      	lsls	r1, r3, #3
 800483c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004840:	00d0      	lsls	r0, r2, #3
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	1912      	adds	r2, r2, r4
 8004848:	eb45 0303 	adc.w	r3, r5, r3
 800484c:	f04f 0000 	mov.w	r0, #0
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	0299      	lsls	r1, r3, #10
 8004856:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800485a:	0290      	lsls	r0, r2, #10
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	461a      	mov	r2, r3
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	f7fc fa2c 	bl	8000cc8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004896:	60bb      	str	r3, [r7, #8]
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	68bb      	ldr	r3, [r7, #8]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2000000c 	.word	0x2000000c

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800c368 	.word	0x0800c368

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f8:	f7ff ffdc 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0b5b      	lsrs	r3, r3, #13
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	0800c368 	.word	0x0800c368

0800491c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004944:	4b69      	ldr	r3, [pc, #420]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a68      	ldr	r2, [pc, #416]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	4b66      	ldr	r3, [pc, #408]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	4964      	ldr	r1, [pc, #400]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004976:	4b5d      	ldr	r3, [pc, #372]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004984:	4959      	ldr	r1, [pc, #356]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049b2:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	494a      	ldr	r1, [pc, #296]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d0:	d101      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 808b 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b3a      	ldr	r3, [pc, #232]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a39      	ldr	r2, [pc, #228]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0c:	4b37      	ldr	r3, [pc, #220]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a18:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a34      	ldr	r2, [pc, #208]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fd fdc4 	bl	80025b0 <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2c:	f7fd fdc0 	bl	80025b0 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e357      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d035      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d02e      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a68:	4b20      	ldr	r3, [pc, #128]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d114      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fd88 	bl	80025b0 <HAL_GetTick>
 8004aa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	e00a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa4:	f7fd fd84 	bl	80025b0 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e319      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ee      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ae2:	400b      	ands	r3, r1
 8004ae4:	4901      	ldr	r1, [pc, #4]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40007000 	.word	0x40007000
 8004af4:	0ffffcff 	.word	0x0ffffcff
 8004af8:	4bb1      	ldr	r3, [pc, #708]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4ab0      	ldr	r2, [pc, #704]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004afe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b02:	6093      	str	r3, [r2, #8]
 8004b04:	4bae      	ldr	r3, [pc, #696]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b10:	49ab      	ldr	r1, [pc, #684]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b22:	4ba7      	ldr	r3, [pc, #668]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b28:	4aa5      	ldr	r2, [pc, #660]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b32:	4ba3      	ldr	r3, [pc, #652]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	49a0      	ldr	r1, [pc, #640]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b50:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5e:	4998      	ldr	r1, [pc, #608]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b72:	4b93      	ldr	r3, [pc, #588]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b80:	498f      	ldr	r1, [pc, #572]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b94:	4b8a      	ldr	r3, [pc, #552]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba2:	4987      	ldr	r1, [pc, #540]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb6:	4b82      	ldr	r3, [pc, #520]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	497e      	ldr	r1, [pc, #504]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd8:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	4976      	ldr	r1, [pc, #472]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfa:	4b71      	ldr	r3, [pc, #452]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f023 020c 	bic.w	r2, r3, #12
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	496d      	ldr	r1, [pc, #436]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1c:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	4965      	ldr	r1, [pc, #404]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c3e:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	495c      	ldr	r1, [pc, #368]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	4954      	ldr	r1, [pc, #336]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c82:	4b4f      	ldr	r3, [pc, #316]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	494b      	ldr	r1, [pc, #300]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ca4:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	4943      	ldr	r1, [pc, #268]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	493a      	ldr	r1, [pc, #232]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce8:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf6:	4932      	ldr	r1, [pc, #200]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d0a:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d18:	4929      	ldr	r1, [pc, #164]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d58:	4919      	ldr	r1, [pc, #100]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7c:	4910      	ldr	r1, [pc, #64]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d006      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80d9 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fd fc04 	bl	80025b0 <HAL_GetTick>
 8004da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dac:	f7fd fc00 	bl	80025b0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	; 0x64
 8004db8:	d904      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e197      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dc4:	4b6c      	ldr	r3, [pc, #432]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ed      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d021      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004de4:	4b64      	ldr	r3, [pc, #400]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004df2:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df8:	0e1b      	lsrs	r3, r3, #24
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	019a      	lsls	r2, r3, #6
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	071b      	lsls	r3, r3, #28
 8004e18:	4957      	ldr	r1, [pc, #348]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02e      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d129      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e4c:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	0f1b      	lsrs	r3, r3, #28
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	019a      	lsls	r2, r3, #6
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	071b      	lsls	r3, r3, #28
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8e:	f023 021f 	bic.w	r2, r3, #31
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4937      	ldr	r1, [pc, #220]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	0f1b      	lsrs	r3, r3, #28
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	019a      	lsls	r2, r3, #6
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	071b      	lsls	r3, r3, #28
 8004ee0:	4925      	ldr	r1, [pc, #148]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d011      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	019a      	lsls	r2, r3, #6
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	061b      	lsls	r3, r3, #24
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	4919      	ldr	r1, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f24:	f7fd fb44 	bl	80025b0 <HAL_GetTick>
 8004f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f2c:	f7fd fb40 	bl	80025b0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0d7      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f040 80cd 	bne.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fd fb27 	bl	80025b0 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f66:	f7fd fb23 	bl	80025b0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d903      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0ba      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f88:	d0ed      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02e      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12a      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	4944      	ldr	r1, [pc, #272]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fee:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	493d      	ldr	r1, [pc, #244]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d022      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501c:	d11d      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800501e:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800502c:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	0f1b      	lsrs	r3, r3, #28
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	019a      	lsls	r2, r3, #6
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	431a      	orrs	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	071b      	lsls	r3, r3, #28
 8005052:	4929      	ldr	r1, [pc, #164]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d028      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005074:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	019a      	lsls	r2, r3, #6
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	431a      	orrs	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	4917      	ldr	r1, [pc, #92]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4911      	ldr	r1, [pc, #68]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fd fa74 	bl	80025b0 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050cc:	f7fd fa70 	bl	80025b0 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e007      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ea:	d1ef      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e049      	b.n	80051a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd f89a 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fdb0 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e054      	b.n	800526e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a26      	ldr	r2, [pc, #152]	; (800527c <HAL_TIM_Base_Start_IT+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d022      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d01d      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d018      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <HAL_TIM_Base_Start_IT+0xd8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_TIM_Base_Start_IT+0xdc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_TIM_Base_Start_IT+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <HAL_TIM_Base_Start_IT+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <HAL_TIM_Base_Start_IT+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d115      	bne.n	8005258 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <HAL_TIM_Base_Start_IT+0xec>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d015      	beq.n	800526a <HAL_TIM_Base_Start_IT+0xbe>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	d011      	beq.n	800526a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0201 	orr.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	e008      	b.n	800526a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e000      	b.n	800526c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010400 	.word	0x40010400
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800
 8005298:	00010007 	.word	0x00010007

0800529c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e049      	b.n	8005342 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc ff5e 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 fce0 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e03c      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02f      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e092      	b.n	8005518 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xb6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	e023      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xc6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005410:	e01b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xe6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b10      	cmp	r3, #16
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xf6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 ff22 	bl	800629c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a30      	ldr	r2, [pc, #192]	; (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_PWM_Start+0x120>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Start+0x124>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0x126>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_TIM_PWM_Start+0x1dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a20      	ldr	r2, [pc, #128]	; (800552c <HAL_TIM_PWM_Start+0x1e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_TIM_PWM_Start+0x1e4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_PWM_Start+0x1e8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_TIM_PWM_Start+0x1ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d115      	bne.n	8005502 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_TIM_PWM_Start+0x1f0>)
 80054de:	4013      	ands	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d015      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ee:	d011      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	e008      	b.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e000      	b.n	8005516 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800
 800553c:	00010007 	.word	0x00010007

08005540 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e08f      	b.n	8005674 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fc fe2b 	bl	80021c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <HAL_TIM_Encoder_Init+0x13c>)
 8005582:	400b      	ands	r3, r1
 8005584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 fb85 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_TIM_Encoder_Init+0x140>)
 80055bc:	4013      	ands	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	4313      	orrs	r3, r2
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_TIM_Encoder_Init+0x144>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_TIM_Encoder_Init+0x148>)
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	4313      	orrs	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	031b      	lsls	r3, r3, #12
 8005600:	4313      	orrs	r3, r2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4313      	orrs	r3, r2
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	fffebff8 	.word	0xfffebff8
 8005680:	fffffcfc 	.word	0xfffffcfc
 8005684:	fffff3f3 	.word	0xfffff3f3
 8005688:	ffff0f0f 	.word	0xffff0f0f

0800568c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800569c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d102      	bne.n	80056c8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056c2:	7b7b      	ldrb	r3, [r7, #13]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d001      	beq.n	80056cc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e089      	b.n	80057e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056dc:	e031      	b.n	8005742 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d110      	bne.n	8005706 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d102      	bne.n	80056f0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ea:	7b3b      	ldrb	r3, [r7, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e075      	b.n	80057e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005704:	e01d      	b.n	8005742 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d108      	bne.n	800571e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005712:	7b7b      	ldrb	r3, [r7, #13]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d102      	bne.n	800571e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005718:	7b3b      	ldrb	r3, [r7, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e05e      	b.n	80057e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d010      	beq.n	8005770 <HAL_TIM_Encoder_Start_IT+0xe4>
 800574e:	e01f      	b.n	8005790 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fd9f 	bl	800629c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0202 	orr.w	r2, r2, #2
 800576c:	60da      	str	r2, [r3, #12]
      break;
 800576e:	e02e      	b.n	80057ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2201      	movs	r2, #1
 8005776:	2104      	movs	r1, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fd8f 	bl	800629c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0204 	orr.w	r2, r2, #4
 800578c:	60da      	str	r2, [r3, #12]
      break;
 800578e:	e01e      	b.n	80057ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fd7f 	bl	800629c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	2104      	movs	r1, #4
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fd78 	bl	800629c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0202 	orr.w	r2, r2, #2
 80057ba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0204 	orr.w	r2, r2, #4
 80057ca:	60da      	str	r2, [r3, #12]
      break;
 80057cc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0202 	mvn.w	r2, #2
 8005814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa1a 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa0c 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa1d 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0204 	mvn.w	r2, #4
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9f0 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9e2 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9f3 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0208 	mvn.w	r2, #8
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2204      	movs	r2, #4
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9c6 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9b8 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9c9 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0210 	mvn.w	r2, #16
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2208      	movs	r2, #8
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f99c 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f98e 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f99f 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0201 	mvn.w	r2, #1
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fe7c 	bl	8001664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fd40 	bl	8006418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d10e      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fd33 	bl	800642c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f94d 	bl	8005c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d10e      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d107      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0220 	mvn.w	r2, #32
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fcf3 	bl	8006404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0ff      	b.n	8005c46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b14      	cmp	r3, #20
 8005a52:	f200 80f0 	bhi.w	8005c36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005c37 	.word	0x08005c37
 8005a64:	08005c37 	.word	0x08005c37
 8005a68:	08005c37 	.word	0x08005c37
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005c37 	.word	0x08005c37
 8005a74:	08005c37 	.word	0x08005c37
 8005a78:	08005c37 	.word	0x08005c37
 8005a7c:	08005b33 	.word	0x08005b33
 8005a80:	08005c37 	.word	0x08005c37
 8005a84:	08005c37 	.word	0x08005c37
 8005a88:	08005c37 	.word	0x08005c37
 8005a8c:	08005b73 	.word	0x08005b73
 8005a90:	08005c37 	.word	0x08005c37
 8005a94:	08005c37 	.word	0x08005c37
 8005a98:	08005c37 	.word	0x08005c37
 8005a9c:	08005bb5 	.word	0x08005bb5
 8005aa0:	08005c37 	.word	0x08005c37
 8005aa4:	08005c37 	.word	0x08005c37
 8005aa8:	08005c37 	.word	0x08005c37
 8005aac:	08005bf5 	.word	0x08005bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f992 	bl	8005de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
      break;
 8005aee:	e0a5      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f9e4 	bl	8005ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
      break;
 8005b30:	e084      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa3b 	bl	8005fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	61da      	str	r2, [r3, #28]
      break;
 8005b70:	e064      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fa91 	bl	80060a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
      break;
 8005bb2:	e043      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fac8 	bl	8006150 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0208 	orr.w	r2, r2, #8
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0204 	bic.w	r2, r2, #4
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf2:	e023      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fafa 	bl	80061f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	021a      	lsls	r2, r3, #8
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c34:	e002      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop

08005c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a40      	ldr	r2, [pc, #256]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3d      	ldr	r2, [pc, #244]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3b      	ldr	r2, [pc, #236]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3a      	ldr	r2, [pc, #232]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d108      	bne.n	8005cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d027      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d023      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_Base_SetConfig+0x128>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_Base_SetConfig+0x12c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <TIM_Base_SetConfig+0x13c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0xf8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d103      	bne.n	8005da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	615a      	str	r2, [r3, #20]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40010400 	.word	0x40010400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800
 8005dd4:	40001800 	.word	0x40001800
 8005dd8:	40001c00 	.word	0x40001c00
 8005ddc:	40002000 	.word	0x40002000

08005de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <TIM_OC1_SetConfig+0xd8>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 0302 	bic.w	r3, r3, #2
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <TIM_OC1_SetConfig+0xdc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC1_SetConfig+0x64>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <TIM_OC1_SetConfig+0xe0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10c      	bne.n	8005e5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0308 	bic.w	r3, r3, #8
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <TIM_OC1_SetConfig+0xdc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC1_SetConfig+0x8e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <TIM_OC1_SetConfig+0xe0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	fffeff8f 	.word	0xfffeff8f
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40010400 	.word	0x40010400

08005ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0210 	bic.w	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <TIM_OC2_SetConfig+0xe4>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0320 	bic.w	r3, r3, #32
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a23      	ldr	r2, [pc, #140]	; (8005fac <TIM_OC2_SetConfig+0xe8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC2_SetConfig+0x68>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <TIM_OC2_SetConfig+0xec>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10d      	bne.n	8005f48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	; (8005fac <TIM_OC2_SetConfig+0xe8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC2_SetConfig+0x94>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <TIM_OC2_SetConfig+0xec>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d113      	bne.n	8005f80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	feff8fff 	.word	0xfeff8fff
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <TIM_OC3_SetConfig+0xe0>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a22      	ldr	r2, [pc, #136]	; (8006098 <TIM_OC3_SetConfig+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_OC3_SetConfig+0x66>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a21      	ldr	r2, [pc, #132]	; (800609c <TIM_OC3_SetConfig+0xe8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10d      	bne.n	8006036 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a17      	ldr	r2, [pc, #92]	; (8006098 <TIM_OC3_SetConfig+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC3_SetConfig+0x92>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a16      	ldr	r2, [pc, #88]	; (800609c <TIM_OC3_SetConfig+0xe8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d113      	bne.n	800606e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	fffeff8f 	.word	0xfffeff8f
 8006098:	40010000 	.word	0x40010000
 800609c:	40010400 	.word	0x40010400

080060a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <TIM_OC4_SetConfig+0xa4>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <TIM_OC4_SetConfig+0xa8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC4_SetConfig+0x68>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <TIM_OC4_SetConfig+0xac>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d109      	bne.n	800611c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	feff8fff 	.word	0xfeff8fff
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400

08006150 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <TIM_OC5_SetConfig+0x98>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a12      	ldr	r2, [pc, #72]	; (80061ec <TIM_OC5_SetConfig+0x9c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_OC5_SetConfig+0x5e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <TIM_OC5_SetConfig+0xa0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d109      	bne.n	80061c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	fffeff8f 	.word	0xfffeff8f
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <TIM_OC6_SetConfig+0x9c>)
 8006220:	4013      	ands	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	051b      	lsls	r3, r3, #20
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <TIM_OC6_SetConfig+0xa0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC6_SetConfig+0x60>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a12      	ldr	r2, [pc, #72]	; (8006298 <TIM_OC6_SetConfig+0xa4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d109      	bne.n	8006268 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	029b      	lsls	r3, r3, #10
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	feff8fff 	.word	0xfeff8fff
 8006294:	40010000 	.word	0x40010000
 8006298:	40010400 	.word	0x40010400

0800629c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2201      	movs	r2, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1a      	ldr	r2, [r3, #32]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	43db      	mvns	r3, r3
 80062be:	401a      	ands	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e06d      	b.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a30      	ldr	r2, [pc, #192]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d108      	bne.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800633a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d022      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006372:	d01d      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1a      	ldr	r2, [pc, #104]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10c      	bne.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40001800 	.word	0x40001800

08006404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e040      	b.n	80064d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb ffc2 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fbf8 	bl	8006c74 <UART_SetConfig>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e022      	b.n	80064d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fe4e 	bl	8007138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fed5 	bl	800727c <UART_CheckIdleState>
 80064d2:	4603      	mov	r3, r0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08a      	sub	sp, #40	; 0x28
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	f040 8081 	bne.w	80065f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Transmit+0x26>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e079      	b.n	80065fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UART_Transmit+0x38>
 8006510:	2302      	movs	r3, #2
 8006512:	e072      	b.n	80065fa <HAL_UART_Transmit+0x11e>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2221      	movs	r2, #33	; 0x21
 8006528:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652a:	f7fc f841 	bl	80025b0 <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d108      	bne.n	800655c <HAL_UART_Transmit+0x80>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e003      	b.n	8006564 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800656c:	e02c      	b.n	80065c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 feb2 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e038      	b.n	80065fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	3302      	adds	r3, #2
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e007      	b.n	80065b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1cc      	bne.n	800656e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fe7f 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e005      	b.n	80065fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e000      	b.n	80065fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b08a      	sub	sp, #40	; 0x28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	4613      	mov	r3, r2
 800660e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006614:	2b20      	cmp	r3, #32
 8006616:	d13d      	bne.n	8006694 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_UART_Receive_IT+0x22>
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e036      	b.n	8006696 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_UART_Receive_IT+0x34>
 8006632:	2302      	movs	r3, #2
 8006634:	e02f      	b.n	8006696 <HAL_UART_Receive_IT+0x94>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d018      	beq.n	8006684 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	613b      	str	r3, [r7, #16]
   return(result);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	61bb      	str	r3, [r7, #24]
   return(result);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e6      	bne.n	8006652 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	461a      	mov	r2, r3
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 feee 	bl	800746c <UART_Start_Receive_IT>
 8006690:	4603      	mov	r3, r0
 8006692:	e000      	b.n	8006696 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3728      	adds	r7, #40	; 0x28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b0ba      	sub	sp, #232	; 0xe8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ce:	4013      	ands	r3, r2
 80066d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d115      	bne.n	8006708 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 828f 	beq.w	8006c1c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
      }
      return;
 8006706:	e289      	b.n	8006c1c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8117 	beq.w	8006940 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800671e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006722:	4b85      	ldr	r3, [pc, #532]	; (8006938 <HAL_UART_IRQHandler+0x298>)
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 810a 	beq.w	8006940 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d011      	beq.n	800675c <HAL_UART_IRQHandler+0xbc>
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <HAL_UART_IRQHandler+0xec>
 8006768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2202      	movs	r2, #2
 800677a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d011      	beq.n	80067bc <HAL_UART_IRQHandler+0x11c>
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2204      	movs	r2, #4
 80067aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b2:	f043 0202 	orr.w	r2, r3, #2
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2208      	movs	r2, #8
 80067e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ee:	f043 0208 	orr.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006800:	2b00      	cmp	r3, #0
 8006802:	d012      	beq.n	800682a <HAL_UART_IRQHandler+0x18a>
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 81f5 	beq.w	8006c20 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800687a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04f      	beq.n	8006922 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 febc 	bl	8007600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d141      	bne.n	800691a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d013      	beq.n	8006912 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a13      	ldr	r2, [pc, #76]	; (800693c <HAL_UART_IRQHandler+0x29c>)
 80068f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fc fd3d 	bl	8003376 <HAL_DMA_Abort_IT>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d017      	beq.n	8006932 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	e00f      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f998 	bl	8006c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00b      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f994 	bl	8006c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e007      	b.n	8006932 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f990 	bl	8006c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006930:	e176      	b.n	8006c20 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	bf00      	nop
    return;
 8006934:	e174      	b.n	8006c20 <HAL_UART_IRQHandler+0x580>
 8006936:	bf00      	nop
 8006938:	04000120 	.word	0x04000120
 800693c:	080076c7 	.word	0x080076c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 8144 	bne.w	8006bd2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 813d 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8136 	beq.w	8006bd2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2210      	movs	r2, #16
 800696c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	f040 80b2 	bne.w	8006ae2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800698a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8148 	beq.w	8006c24 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800699a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800699e:	429a      	cmp	r2, r3
 80069a0:	f080 8140 	bcs.w	8006c24 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b8:	f000 8085 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1da      	bne.n	80069bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e1      	bne.n	8006a06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e4      	bne.n	8006a86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fc fbe8 	bl	8003296 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f8be 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ae0:	e0a0      	b.n	8006c24 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8092 	beq.w	8006c28 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 808d 	beq.w	8006c28 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b30:	647b      	str	r3, [r7, #68]	; 0x44
 8006b32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e4      	bne.n	8006b0e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	623b      	str	r3, [r7, #32]
   return(result);
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b68:	633a      	str	r2, [r7, #48]	; 0x30
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e3      	bne.n	8006b44 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e4      	bne.n	8006b8e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f846 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd0:	e02a      	b.n	8006c28 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00e      	beq.n	8006bfc <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01c      	beq.n	8006c2c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
    }
    return;
 8006bfa:	e017      	b.n	8006c2c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <HAL_UART_IRQHandler+0x58e>
 8006c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00c      	beq.n	8006c2e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fd6c 	bl	80076f2 <UART_EndTransmit_IT>
    return;
 8006c1a:	e008      	b.n	8006c2e <HAL_UART_IRQHandler+0x58e>
      return;
 8006c1c:	bf00      	nop
 8006c1e:	e006      	b.n	8006c2e <HAL_UART_IRQHandler+0x58e>
    return;
 8006c20:	bf00      	nop
 8006c22:	e004      	b.n	8006c2e <HAL_UART_IRQHandler+0x58e>
      return;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_UART_IRQHandler+0x58e>
      return;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_IRQHandler+0x58e>
    return;
 8006c2c:	bf00      	nop
  }

}
 8006c2e:	37e8      	adds	r7, #232	; 0xe8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4ba7      	ldr	r3, [pc, #668]	; (8006f3c <UART_SetConfig+0x2c8>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a95      	ldr	r2, [pc, #596]	; (8006f40 <UART_SetConfig+0x2cc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d120      	bne.n	8006d32 <UART_SetConfig+0xbe>
 8006cf0:	4b94      	ldr	r3, [pc, #592]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d816      	bhi.n	8006d2c <UART_SetConfig+0xb8>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0x90>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d1b 	.word	0x08006d1b
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	2301      	movs	r3, #1
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e14f      	b.n	8006fba <UART_SetConfig+0x346>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e14c      	b.n	8006fba <UART_SetConfig+0x346>
 8006d20:	2304      	movs	r3, #4
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e149      	b.n	8006fba <UART_SetConfig+0x346>
 8006d26:	2308      	movs	r3, #8
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e146      	b.n	8006fba <UART_SetConfig+0x346>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e143      	b.n	8006fba <UART_SetConfig+0x346>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a84      	ldr	r2, [pc, #528]	; (8006f48 <UART_SetConfig+0x2d4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d132      	bne.n	8006da2 <UART_SetConfig+0x12e>
 8006d3c:	4b81      	ldr	r3, [pc, #516]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f003 030c 	and.w	r3, r3, #12
 8006d46:	2b0c      	cmp	r3, #12
 8006d48:	d828      	bhi.n	8006d9c <UART_SetConfig+0x128>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0xdc>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d9d 	.word	0x08006d9d
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006d9d 	.word	0x08006d9d
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006d8b 	.word	0x08006d8b
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006d97 	.word	0x08006d97
 8006d84:	2300      	movs	r3, #0
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e117      	b.n	8006fba <UART_SetConfig+0x346>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e114      	b.n	8006fba <UART_SetConfig+0x346>
 8006d90:	2304      	movs	r3, #4
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e111      	b.n	8006fba <UART_SetConfig+0x346>
 8006d96:	2308      	movs	r3, #8
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e10e      	b.n	8006fba <UART_SetConfig+0x346>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e10b      	b.n	8006fba <UART_SetConfig+0x346>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a69      	ldr	r2, [pc, #420]	; (8006f4c <UART_SetConfig+0x2d8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d120      	bne.n	8006dee <UART_SetConfig+0x17a>
 8006dac:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d013      	beq.n	8006de2 <UART_SetConfig+0x16e>
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d814      	bhi.n	8006de8 <UART_SetConfig+0x174>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d009      	beq.n	8006dd6 <UART_SetConfig+0x162>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d810      	bhi.n	8006de8 <UART_SetConfig+0x174>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x15c>
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d006      	beq.n	8006ddc <UART_SetConfig+0x168>
 8006dce:	e00b      	b.n	8006de8 <UART_SetConfig+0x174>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0f1      	b.n	8006fba <UART_SetConfig+0x346>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e0ee      	b.n	8006fba <UART_SetConfig+0x346>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e0eb      	b.n	8006fba <UART_SetConfig+0x346>
 8006de2:	2308      	movs	r3, #8
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e0e8      	b.n	8006fba <UART_SetConfig+0x346>
 8006de8:	2310      	movs	r3, #16
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e0e5      	b.n	8006fba <UART_SetConfig+0x346>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a57      	ldr	r2, [pc, #348]	; (8006f50 <UART_SetConfig+0x2dc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d120      	bne.n	8006e3a <UART_SetConfig+0x1c6>
 8006df8:	4b52      	ldr	r3, [pc, #328]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e02:	2bc0      	cmp	r3, #192	; 0xc0
 8006e04:	d013      	beq.n	8006e2e <UART_SetConfig+0x1ba>
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d814      	bhi.n	8006e34 <UART_SetConfig+0x1c0>
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d009      	beq.n	8006e22 <UART_SetConfig+0x1ae>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d810      	bhi.n	8006e34 <UART_SetConfig+0x1c0>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <UART_SetConfig+0x1a8>
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d006      	beq.n	8006e28 <UART_SetConfig+0x1b4>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x1c0>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e0cb      	b.n	8006fba <UART_SetConfig+0x346>
 8006e22:	2302      	movs	r3, #2
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e0c8      	b.n	8006fba <UART_SetConfig+0x346>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e0c5      	b.n	8006fba <UART_SetConfig+0x346>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e0c2      	b.n	8006fba <UART_SetConfig+0x346>
 8006e34:	2310      	movs	r3, #16
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e0bf      	b.n	8006fba <UART_SetConfig+0x346>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a45      	ldr	r2, [pc, #276]	; (8006f54 <UART_SetConfig+0x2e0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d125      	bne.n	8006e90 <UART_SetConfig+0x21c>
 8006e44:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e52:	d017      	beq.n	8006e84 <UART_SetConfig+0x210>
 8006e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e58:	d817      	bhi.n	8006e8a <UART_SetConfig+0x216>
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5e:	d00b      	beq.n	8006e78 <UART_SetConfig+0x204>
 8006e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e64:	d811      	bhi.n	8006e8a <UART_SetConfig+0x216>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <UART_SetConfig+0x1fe>
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6e:	d006      	beq.n	8006e7e <UART_SetConfig+0x20a>
 8006e70:	e00b      	b.n	8006e8a <UART_SetConfig+0x216>
 8006e72:	2300      	movs	r3, #0
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e0a0      	b.n	8006fba <UART_SetConfig+0x346>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e09d      	b.n	8006fba <UART_SetConfig+0x346>
 8006e7e:	2304      	movs	r3, #4
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e09a      	b.n	8006fba <UART_SetConfig+0x346>
 8006e84:	2308      	movs	r3, #8
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e097      	b.n	8006fba <UART_SetConfig+0x346>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e094      	b.n	8006fba <UART_SetConfig+0x346>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a30      	ldr	r2, [pc, #192]	; (8006f58 <UART_SetConfig+0x2e4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d125      	bne.n	8006ee6 <UART_SetConfig+0x272>
 8006e9a:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea8:	d017      	beq.n	8006eda <UART_SetConfig+0x266>
 8006eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eae:	d817      	bhi.n	8006ee0 <UART_SetConfig+0x26c>
 8006eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb4:	d00b      	beq.n	8006ece <UART_SetConfig+0x25a>
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d811      	bhi.n	8006ee0 <UART_SetConfig+0x26c>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <UART_SetConfig+0x254>
 8006ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec4:	d006      	beq.n	8006ed4 <UART_SetConfig+0x260>
 8006ec6:	e00b      	b.n	8006ee0 <UART_SetConfig+0x26c>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e075      	b.n	8006fba <UART_SetConfig+0x346>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e072      	b.n	8006fba <UART_SetConfig+0x346>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e06f      	b.n	8006fba <UART_SetConfig+0x346>
 8006eda:	2308      	movs	r3, #8
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e06c      	b.n	8006fba <UART_SetConfig+0x346>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e069      	b.n	8006fba <UART_SetConfig+0x346>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <UART_SetConfig+0x2e8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d137      	bne.n	8006f60 <UART_SetConfig+0x2ec>
 8006ef0:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <UART_SetConfig+0x2d0>)
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efe:	d017      	beq.n	8006f30 <UART_SetConfig+0x2bc>
 8006f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f04:	d817      	bhi.n	8006f36 <UART_SetConfig+0x2c2>
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0a:	d00b      	beq.n	8006f24 <UART_SetConfig+0x2b0>
 8006f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f10:	d811      	bhi.n	8006f36 <UART_SetConfig+0x2c2>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <UART_SetConfig+0x2aa>
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d006      	beq.n	8006f2a <UART_SetConfig+0x2b6>
 8006f1c:	e00b      	b.n	8006f36 <UART_SetConfig+0x2c2>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e04a      	b.n	8006fba <UART_SetConfig+0x346>
 8006f24:	2302      	movs	r3, #2
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e047      	b.n	8006fba <UART_SetConfig+0x346>
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e044      	b.n	8006fba <UART_SetConfig+0x346>
 8006f30:	2308      	movs	r3, #8
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e041      	b.n	8006fba <UART_SetConfig+0x346>
 8006f36:	2310      	movs	r3, #16
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e03e      	b.n	8006fba <UART_SetConfig+0x346>
 8006f3c:	efff69f3 	.word	0xefff69f3
 8006f40:	40011000 	.word	0x40011000
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40004400 	.word	0x40004400
 8006f4c:	40004800 	.word	0x40004800
 8006f50:	40004c00 	.word	0x40004c00
 8006f54:	40005000 	.word	0x40005000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	40007800 	.word	0x40007800
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a71      	ldr	r2, [pc, #452]	; (800712c <UART_SetConfig+0x4b8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d125      	bne.n	8006fb6 <UART_SetConfig+0x342>
 8006f6a:	4b71      	ldr	r3, [pc, #452]	; (8007130 <UART_SetConfig+0x4bc>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f78:	d017      	beq.n	8006faa <UART_SetConfig+0x336>
 8006f7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f7e:	d817      	bhi.n	8006fb0 <UART_SetConfig+0x33c>
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d00b      	beq.n	8006f9e <UART_SetConfig+0x32a>
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d811      	bhi.n	8006fb0 <UART_SetConfig+0x33c>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <UART_SetConfig+0x324>
 8006f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f94:	d006      	beq.n	8006fa4 <UART_SetConfig+0x330>
 8006f96:	e00b      	b.n	8006fb0 <UART_SetConfig+0x33c>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e00d      	b.n	8006fba <UART_SetConfig+0x346>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e00a      	b.n	8006fba <UART_SetConfig+0x346>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e007      	b.n	8006fba <UART_SetConfig+0x346>
 8006faa:	2308      	movs	r3, #8
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e004      	b.n	8006fba <UART_SetConfig+0x346>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e001      	b.n	8006fba <UART_SetConfig+0x346>
 8006fb6:	2310      	movs	r3, #16
 8006fb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc2:	d15a      	bne.n	800707a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006fc4:	7ffb      	ldrb	r3, [r7, #31]
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d827      	bhi.n	800701a <UART_SetConfig+0x3a6>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x35c>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006ff5 	.word	0x08006ff5
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	0800701b 	.word	0x0800701b
 8006fe0:	0800700b 	.word	0x0800700b
 8006fe4:	0800701b 	.word	0x0800701b
 8006fe8:	0800701b 	.word	0x0800701b
 8006fec:	0800701b 	.word	0x0800701b
 8006ff0:	08007013 	.word	0x08007013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff4:	f7fd fc6a 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8006ff8:	61b8      	str	r0, [r7, #24]
        break;
 8006ffa:	e013      	b.n	8007024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ffc:	f7fd fc7a 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 8007000:	61b8      	str	r0, [r7, #24]
        break;
 8007002:	e00f      	b.n	8007024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007004:	4b4b      	ldr	r3, [pc, #300]	; (8007134 <UART_SetConfig+0x4c0>)
 8007006:	61bb      	str	r3, [r7, #24]
        break;
 8007008:	e00c      	b.n	8007024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700a:	f7fd fb71 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800700e:	61b8      	str	r0, [r7, #24]
        break;
 8007010:	e008      	b.n	8007024 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007016:	61bb      	str	r3, [r7, #24]
        break;
 8007018:	e004      	b.n	8007024 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	77bb      	strb	r3, [r7, #30]
        break;
 8007022:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d074      	beq.n	8007114 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	005a      	lsls	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	fbb2 f3f3 	udiv	r3, r2, r3
 800703e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	d916      	bls.n	8007074 <UART_SetConfig+0x400>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d212      	bcs.n	8007074 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f023 030f 	bic.w	r3, r3, #15
 8007056:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	b29a      	uxth	r2, r3
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	4313      	orrs	r3, r2
 8007068:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	89fa      	ldrh	r2, [r7, #14]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	e04f      	b.n	8007114 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	77bb      	strb	r3, [r7, #30]
 8007078:	e04c      	b.n	8007114 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800707a:	7ffb      	ldrb	r3, [r7, #31]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d828      	bhi.n	80070d2 <UART_SetConfig+0x45e>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x414>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070ad 	.word	0x080070ad
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070d3 	.word	0x080070d3
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070d3 	.word	0x080070d3
 80070a0:	080070d3 	.word	0x080070d3
 80070a4:	080070d3 	.word	0x080070d3
 80070a8:	080070cb 	.word	0x080070cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ac:	f7fd fc0e 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80070b0:	61b8      	str	r0, [r7, #24]
        break;
 80070b2:	e013      	b.n	80070dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b4:	f7fd fc1e 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 80070b8:	61b8      	str	r0, [r7, #24]
        break;
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <UART_SetConfig+0x4c0>)
 80070be:	61bb      	str	r3, [r7, #24]
        break;
 80070c0:	e00c      	b.n	80070dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7fd fb15 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80070c6:	61b8      	str	r0, [r7, #24]
        break;
 80070c8:	e008      	b.n	80070dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ce:	61bb      	str	r3, [r7, #24]
        break;
 80070d0:	e004      	b.n	80070dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	77bb      	strb	r3, [r7, #30]
        break;
 80070da:	bf00      	nop
    }

    if (pclk != 0U)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d018      	beq.n	8007114 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	085a      	lsrs	r2, r3, #1
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	441a      	add	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b0f      	cmp	r3, #15
 80070fa:	d909      	bls.n	8007110 <UART_SetConfig+0x49c>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007102:	d205      	bcs.n	8007110 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e001      	b.n	8007114 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007120:	7fbb      	ldrb	r3, [r7, #30]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40007c00 	.word	0x40007c00
 8007130:	40023800 	.word	0x40023800
 8007134:	00f42400 	.word	0x00f42400

08007138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01a      	beq.n	800724e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007236:	d10a      	bne.n	800724e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800728c:	f7fb f990 	bl	80025b0 <HAL_GetTick>
 8007290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b08      	cmp	r3, #8
 800729e:	d10e      	bne.n	80072be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f817 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e00d      	b.n	80072da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	e0a5      	b.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	f000 80a1 	beq.w	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fe:	f7fb f957 	bl	80025b0 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800730a:	429a      	cmp	r2, r3
 800730c:	d302      	bcc.n	8007314 <UART_WaitOnFlagUntilTimeout+0x32>
 800730e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13e      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007328:	667b      	str	r3, [r7, #100]	; 0x64
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007334:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	663b      	str	r3, [r7, #96]	; 0x60
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007366:	64ba      	str	r2, [r7, #72]	; 0x48
 8007368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800736c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e067      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d04f      	beq.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ae:	d147      	bne.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
 80073da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e6      	bne.n	80073ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	613b      	str	r3, [r7, #16]
   return(result);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	66bb      	str	r3, [r7, #104]	; 0x68
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800740c:	623a      	str	r2, [r7, #32]
 800740e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	61bb      	str	r3, [r7, #24]
   return(result);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e010      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4013      	ands	r3, r2
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	429a      	cmp	r2, r3
 800745c:	f43f af4a 	beq.w	80072f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3770      	adds	r7, #112	; 0x70
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746c:	b480      	push	{r7}
 800746e:	b097      	sub	sp, #92	; 0x5c
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749e:	d10e      	bne.n	80074be <UART_Start_Receive_IT+0x52>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <UART_Start_Receive_IT+0x48>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b2:	e02d      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	22ff      	movs	r2, #255	; 0xff
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074bc:	e028      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <UART_Start_Receive_IT+0x76>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <UART_Start_Receive_IT+0x6c>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d6:	e01b      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	227f      	movs	r2, #127	; 0x7f
 80074dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074e0:	e016      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ea:	d10d      	bne.n	8007508 <UART_Start_Receive_IT+0x9c>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <UART_Start_Receive_IT+0x92>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	227f      	movs	r2, #127	; 0x7f
 80074f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074fc:	e008      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	223f      	movs	r2, #63	; 0x3f
 8007502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007506:	e003      	b.n	8007510 <UART_Start_Receive_IT+0xa4>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2222      	movs	r2, #34	; 0x22
 800751c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	657b      	str	r3, [r7, #84]	; 0x54
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800753e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d107      	bne.n	800756c <UART_Start_Receive_IT+0x100>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <UART_Start_Receive_IT+0x18c>)
 8007568:	665a      	str	r2, [r3, #100]	; 0x64
 800756a:	e002      	b.n	8007572 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a23      	ldr	r2, [pc, #140]	; (80075fc <UART_Start_Receive_IT+0x190>)
 8007570:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d019      	beq.n	80075b6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
 80075a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_Start_Receive_IT+0x116>
 80075b4:	e018      	b.n	80075e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	613b      	str	r3, [r7, #16]
   return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f043 0320 	orr.w	r3, r3, #32
 80075ca:	653b      	str	r3, [r7, #80]	; 0x50
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d4:	623b      	str	r3, [r7, #32]
 80075d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	69f9      	ldr	r1, [r7, #28]
 80075da:	6a3a      	ldr	r2, [r7, #32]
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	375c      	adds	r7, #92	; 0x5c
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	080078a3 	.word	0x080078a3
 80075fc:	08007747 	.word	0x08007747

08007600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b095      	sub	sp, #84	; 0x54
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800761c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
 8007628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800762c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e6      	bne.n	8007608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	61fb      	str	r3, [r7, #28]
   return(result);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800765a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800765c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007672:	2b01      	cmp	r3, #1
 8007674:	d118      	bne.n	80076a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	60bb      	str	r3, [r7, #8]
   return(result);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f023 0310 	bic.w	r3, r3, #16
 800768a:	647b      	str	r3, [r7, #68]	; 0x44
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6979      	ldr	r1, [r7, #20]
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	613b      	str	r3, [r7, #16]
   return(result);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e6      	bne.n	8007676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80076ba:	bf00      	nop
 80076bc:	3754      	adds	r7, #84	; 0x54
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff faaf 	bl	8006c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60bb      	str	r3, [r7, #8]
   return(result);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	613b      	str	r3, [r7, #16]
   return(result);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff fa7b 	bl	8006c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773e:	bf00      	nop
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b096      	sub	sp, #88	; 0x58
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007754:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775c:	2b22      	cmp	r3, #34	; 0x22
 800775e:	f040 8094 	bne.w	800788a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800776c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007770:	b2d9      	uxtb	r1, r3
 8007772:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007776:	b2da      	uxtb	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777c:	400a      	ands	r2, r1
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d177      	bne.n	800789a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077be:	653b      	str	r3, [r7, #80]	; 0x50
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	647b      	str	r3, [r7, #68]	; 0x44
 80077ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	623b      	str	r3, [r7, #32]
   return(result);
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077fc:	633a      	str	r2, [r7, #48]	; 0x30
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e5      	bne.n	80077dc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007820:	2b01      	cmp	r3, #1
 8007822:	d12e      	bne.n	8007882 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60fb      	str	r3, [r7, #12]
   return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	617b      	str	r3, [r7, #20]
   return(result);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e6      	bne.n	800782a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d103      	bne.n	8007872 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2210      	movs	r2, #16
 8007870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff f9ee 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007880:	e00b      	b.n	800789a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fa f80a 	bl	800189c <HAL_UART_RxCpltCallback>
}
 8007888:	e007      	b.n	800789a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0208 	orr.w	r2, r2, #8
 8007898:	619a      	str	r2, [r3, #24]
}
 800789a:	bf00      	nop
 800789c:	3758      	adds	r7, #88	; 0x58
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b096      	sub	sp, #88	; 0x58
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078b8:	2b22      	cmp	r3, #34	; 0x22
 80078ba:	f040 8094 	bne.w	80079e6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078d6:	4013      	ands	r3, r2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d177      	bne.n	80079f6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007924:	643b      	str	r3, [r7, #64]	; 0x40
 8007926:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800792a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e6      	bne.n	8007906 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	61fb      	str	r3, [r7, #28]
   return(result);
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797c:	2b01      	cmp	r3, #1
 800797e:	d12e      	bne.n	80079de <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60bb      	str	r3, [r7, #8]
   return(result);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f023 0310 	bic.w	r3, r3, #16
 800799a:	647b      	str	r3, [r7, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6979      	ldr	r1, [r7, #20]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	613b      	str	r3, [r7, #16]
   return(result);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e6      	bne.n	8007986 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b10      	cmp	r3, #16
 80079c4:	d103      	bne.n	80079ce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2210      	movs	r2, #16
 80079cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff f940 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079dc:	e00b      	b.n	80079f6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 ff5c 	bl	800189c <HAL_UART_RxCpltCallback>
}
 80079e4:	e007      	b.n	80079f6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0208 	orr.w	r2, r2, #8
 80079f4:	619a      	str	r2, [r3, #24]
}
 80079f6:	bf00      	nop
 80079f8:	3758      	adds	r7, #88	; 0x58
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <arm_pid_init_f32>:
 8007a00:	ed90 7a08 	vldr	s14, [r0, #32]
 8007a04:	edd0 7a06 	vldr	s15, [r0, #24]
 8007a08:	ed90 6a07 	vldr	s12, [r0, #28]
 8007a0c:	eef1 6a67 	vneg.f32	s13, s15
 8007a10:	ed80 7a02 	vstr	s14, [r0, #8]
 8007a14:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007a18:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a20:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007a24:	edc0 7a00 	vstr	s15, [r0]
 8007a28:	ed80 7a01 	vstr	s14, [r0, #4]
 8007a2c:	b901      	cbnz	r1, 8007a30 <arm_pid_init_f32+0x30>
 8007a2e:	4770      	bx	lr
 8007a30:	2300      	movs	r3, #0
 8007a32:	60c3      	str	r3, [r0, #12]
 8007a34:	6103      	str	r3, [r0, #16]
 8007a36:	6143      	str	r3, [r0, #20]
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop

08007a3c <__errno>:
 8007a3c:	4b01      	ldr	r3, [pc, #4]	; (8007a44 <__errno+0x8>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000018 	.word	0x20000018

08007a48 <__libc_init_array>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	4d0d      	ldr	r5, [pc, #52]	; (8007a80 <__libc_init_array+0x38>)
 8007a4c:	4c0d      	ldr	r4, [pc, #52]	; (8007a84 <__libc_init_array+0x3c>)
 8007a4e:	1b64      	subs	r4, r4, r5
 8007a50:	10a4      	asrs	r4, r4, #2
 8007a52:	2600      	movs	r6, #0
 8007a54:	42a6      	cmp	r6, r4
 8007a56:	d109      	bne.n	8007a6c <__libc_init_array+0x24>
 8007a58:	4d0b      	ldr	r5, [pc, #44]	; (8007a88 <__libc_init_array+0x40>)
 8007a5a:	4c0c      	ldr	r4, [pc, #48]	; (8007a8c <__libc_init_array+0x44>)
 8007a5c:	f004 fc44 	bl	800c2e8 <_init>
 8007a60:	1b64      	subs	r4, r4, r5
 8007a62:	10a4      	asrs	r4, r4, #2
 8007a64:	2600      	movs	r6, #0
 8007a66:	42a6      	cmp	r6, r4
 8007a68:	d105      	bne.n	8007a76 <__libc_init_array+0x2e>
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a70:	4798      	blx	r3
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7ee      	b.n	8007a54 <__libc_init_array+0xc>
 8007a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7a:	4798      	blx	r3
 8007a7c:	3601      	adds	r6, #1
 8007a7e:	e7f2      	b.n	8007a66 <__libc_init_array+0x1e>
 8007a80:	0800c82c 	.word	0x0800c82c
 8007a84:	0800c82c 	.word	0x0800c82c
 8007a88:	0800c82c 	.word	0x0800c82c
 8007a8c:	0800c830 	.word	0x0800c830

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <__cvt>:
 8007aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa4:	ec55 4b10 	vmov	r4, r5, d0
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	460e      	mov	r6, r1
 8007aac:	4619      	mov	r1, r3
 8007aae:	462b      	mov	r3, r5
 8007ab0:	bfbb      	ittet	lt
 8007ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ab6:	461d      	movlt	r5, r3
 8007ab8:	2300      	movge	r3, #0
 8007aba:	232d      	movlt	r3, #45	; 0x2d
 8007abc:	700b      	strb	r3, [r1, #0]
 8007abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ac4:	4691      	mov	r9, r2
 8007ac6:	f023 0820 	bic.w	r8, r3, #32
 8007aca:	bfbc      	itt	lt
 8007acc:	4622      	movlt	r2, r4
 8007ace:	4614      	movlt	r4, r2
 8007ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ad4:	d005      	beq.n	8007ae2 <__cvt+0x42>
 8007ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ada:	d100      	bne.n	8007ade <__cvt+0x3e>
 8007adc:	3601      	adds	r6, #1
 8007ade:	2102      	movs	r1, #2
 8007ae0:	e000      	b.n	8007ae4 <__cvt+0x44>
 8007ae2:	2103      	movs	r1, #3
 8007ae4:	ab03      	add	r3, sp, #12
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	ab02      	add	r3, sp, #8
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	ec45 4b10 	vmov	d0, r4, r5
 8007af0:	4653      	mov	r3, sl
 8007af2:	4632      	mov	r2, r6
 8007af4:	f001 fdb4 	bl	8009660 <_dtoa_r>
 8007af8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007afc:	4607      	mov	r7, r0
 8007afe:	d102      	bne.n	8007b06 <__cvt+0x66>
 8007b00:	f019 0f01 	tst.w	r9, #1
 8007b04:	d022      	beq.n	8007b4c <__cvt+0xac>
 8007b06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b0a:	eb07 0906 	add.w	r9, r7, r6
 8007b0e:	d110      	bne.n	8007b32 <__cvt+0x92>
 8007b10:	783b      	ldrb	r3, [r7, #0]
 8007b12:	2b30      	cmp	r3, #48	; 0x30
 8007b14:	d10a      	bne.n	8007b2c <__cvt+0x8c>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fff3 	bl	8000b08 <__aeabi_dcmpeq>
 8007b22:	b918      	cbnz	r0, 8007b2c <__cvt+0x8c>
 8007b24:	f1c6 0601 	rsb	r6, r6, #1
 8007b28:	f8ca 6000 	str.w	r6, [sl]
 8007b2c:	f8da 3000 	ldr.w	r3, [sl]
 8007b30:	4499      	add	r9, r3
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	f7f8 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b3e:	b108      	cbz	r0, 8007b44 <__cvt+0xa4>
 8007b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b44:	2230      	movs	r2, #48	; 0x30
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	d307      	bcc.n	8007b5c <__cvt+0xbc>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b50:	1bdb      	subs	r3, r3, r7
 8007b52:	4638      	mov	r0, r7
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	b004      	add	sp, #16
 8007b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5c:	1c59      	adds	r1, r3, #1
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e7f0      	b.n	8007b46 <__cvt+0xa6>

08007b64 <__exponent>:
 8007b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b66:	4603      	mov	r3, r0
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	bfb8      	it	lt
 8007b6c:	4249      	neglt	r1, r1
 8007b6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007b72:	bfb4      	ite	lt
 8007b74:	222d      	movlt	r2, #45	; 0x2d
 8007b76:	222b      	movge	r2, #43	; 0x2b
 8007b78:	2909      	cmp	r1, #9
 8007b7a:	7042      	strb	r2, [r0, #1]
 8007b7c:	dd2a      	ble.n	8007bd4 <__exponent+0x70>
 8007b7e:	f10d 0407 	add.w	r4, sp, #7
 8007b82:	46a4      	mov	ip, r4
 8007b84:	270a      	movs	r7, #10
 8007b86:	46a6      	mov	lr, r4
 8007b88:	460a      	mov	r2, r1
 8007b8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007b92:	3530      	adds	r5, #48	; 0x30
 8007b94:	2a63      	cmp	r2, #99	; 0x63
 8007b96:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	dcf1      	bgt.n	8007b86 <__exponent+0x22>
 8007ba2:	3130      	adds	r1, #48	; 0x30
 8007ba4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ba8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bac:	1c44      	adds	r4, r0, #1
 8007bae:	4629      	mov	r1, r5
 8007bb0:	4561      	cmp	r1, ip
 8007bb2:	d30a      	bcc.n	8007bca <__exponent+0x66>
 8007bb4:	f10d 0209 	add.w	r2, sp, #9
 8007bb8:	eba2 020e 	sub.w	r2, r2, lr
 8007bbc:	4565      	cmp	r5, ip
 8007bbe:	bf88      	it	hi
 8007bc0:	2200      	movhi	r2, #0
 8007bc2:	4413      	add	r3, r2
 8007bc4:	1a18      	subs	r0, r3, r0
 8007bc6:	b003      	add	sp, #12
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bd2:	e7ed      	b.n	8007bb0 <__exponent+0x4c>
 8007bd4:	2330      	movs	r3, #48	; 0x30
 8007bd6:	3130      	adds	r1, #48	; 0x30
 8007bd8:	7083      	strb	r3, [r0, #2]
 8007bda:	70c1      	strb	r1, [r0, #3]
 8007bdc:	1d03      	adds	r3, r0, #4
 8007bde:	e7f1      	b.n	8007bc4 <__exponent+0x60>

08007be0 <_printf_float>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ed2d 8b02 	vpush	{d8}
 8007be8:	b08d      	sub	sp, #52	; 0x34
 8007bea:	460c      	mov	r4, r1
 8007bec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	f002 fe8f 	bl	800a918 <_localeconv_r>
 8007bfa:	f8d0 a000 	ldr.w	sl, [r0]
 8007bfe:	4650      	mov	r0, sl
 8007c00:	f7f8 fb06 	bl	8000210 <strlen>
 8007c04:	2300      	movs	r3, #0
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c14:	3307      	adds	r3, #7
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	f103 0208 	add.w	r2, r3, #8
 8007c1e:	f8c8 2000 	str.w	r2, [r8]
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c32:	9307      	str	r3, [sp, #28]
 8007c34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c38:	ee08 0a10 	vmov	s16, r0
 8007c3c:	4b9f      	ldr	r3, [pc, #636]	; (8007ebc <_printf_float+0x2dc>)
 8007c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c42:	f04f 32ff 	mov.w	r2, #4294967295
 8007c46:	f7f8 ff91 	bl	8000b6c <__aeabi_dcmpun>
 8007c4a:	bb88      	cbnz	r0, 8007cb0 <_printf_float+0xd0>
 8007c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c50:	4b9a      	ldr	r3, [pc, #616]	; (8007ebc <_printf_float+0x2dc>)
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	f7f8 ff6b 	bl	8000b30 <__aeabi_dcmple>
 8007c5a:	bb48      	cbnz	r0, 8007cb0 <_printf_float+0xd0>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff5a 	bl	8000b1c <__aeabi_dcmplt>
 8007c68:	b110      	cbz	r0, 8007c70 <_printf_float+0x90>
 8007c6a:	232d      	movs	r3, #45	; 0x2d
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	4b93      	ldr	r3, [pc, #588]	; (8007ec0 <_printf_float+0x2e0>)
 8007c72:	4894      	ldr	r0, [pc, #592]	; (8007ec4 <_printf_float+0x2e4>)
 8007c74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c78:	bf94      	ite	ls
 8007c7a:	4698      	movls	r8, r3
 8007c7c:	4680      	movhi	r8, r0
 8007c7e:	2303      	movs	r3, #3
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	9b05      	ldr	r3, [sp, #20]
 8007c84:	f023 0204 	bic.w	r2, r3, #4
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	9700      	str	r7, [sp, #0]
 8007c90:	4633      	mov	r3, r6
 8007c92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f9d8 	bl	800804c <_printf_common>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f040 8090 	bne.w	8007dc2 <_printf_float+0x1e2>
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	b00d      	add	sp, #52	; 0x34
 8007ca8:	ecbd 8b02 	vpop	{d8}
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 ff58 	bl	8000b6c <__aeabi_dcmpun>
 8007cbc:	b140      	cbz	r0, 8007cd0 <_printf_float+0xf0>
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfbc      	itt	lt
 8007cc4:	232d      	movlt	r3, #45	; 0x2d
 8007cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cca:	487f      	ldr	r0, [pc, #508]	; (8007ec8 <_printf_float+0x2e8>)
 8007ccc:	4b7f      	ldr	r3, [pc, #508]	; (8007ecc <_printf_float+0x2ec>)
 8007cce:	e7d1      	b.n	8007c74 <_printf_float+0x94>
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cd6:	9206      	str	r2, [sp, #24]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	d13f      	bne.n	8007d5c <_printf_float+0x17c>
 8007cdc:	2306      	movs	r3, #6
 8007cde:	6063      	str	r3, [r4, #4]
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	6861      	ldr	r1, [r4, #4]
 8007ce4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	ab0a      	add	r3, sp, #40	; 0x28
 8007cee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cf2:	ab09      	add	r3, sp, #36	; 0x24
 8007cf4:	ec49 8b10 	vmov	d0, r8, r9
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7ff fecd 	bl	8007aa0 <__cvt>
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d0a:	2b47      	cmp	r3, #71	; 0x47
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	d108      	bne.n	8007d22 <_printf_float+0x142>
 8007d10:	1cc8      	adds	r0, r1, #3
 8007d12:	db02      	blt.n	8007d1a <_printf_float+0x13a>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	4299      	cmp	r1, r3
 8007d18:	dd41      	ble.n	8007d9e <_printf_float+0x1be>
 8007d1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d1e:	fa5f fb8b 	uxtb.w	fp, fp
 8007d22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d26:	d820      	bhi.n	8007d6a <_printf_float+0x18a>
 8007d28:	3901      	subs	r1, #1
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d30:	9109      	str	r1, [sp, #36]	; 0x24
 8007d32:	f7ff ff17 	bl	8007b64 <__exponent>
 8007d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d38:	1813      	adds	r3, r2, r0
 8007d3a:	2a01      	cmp	r2, #1
 8007d3c:	4681      	mov	r9, r0
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	dc02      	bgt.n	8007d48 <_printf_float+0x168>
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	07d2      	lsls	r2, r2, #31
 8007d46:	d501      	bpl.n	8007d4c <_printf_float+0x16c>
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d09c      	beq.n	8007c8e <_printf_float+0xae>
 8007d54:	232d      	movs	r3, #45	; 0x2d
 8007d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d5a:	e798      	b.n	8007c8e <_printf_float+0xae>
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	2a47      	cmp	r2, #71	; 0x47
 8007d60:	d1be      	bne.n	8007ce0 <_printf_float+0x100>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1bc      	bne.n	8007ce0 <_printf_float+0x100>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7b9      	b.n	8007cde <_printf_float+0xfe>
 8007d6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d6e:	d118      	bne.n	8007da2 <_printf_float+0x1c2>
 8007d70:	2900      	cmp	r1, #0
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	dd0b      	ble.n	8007d8e <_printf_float+0x1ae>
 8007d76:	6121      	str	r1, [r4, #16]
 8007d78:	b913      	cbnz	r3, 8007d80 <_printf_float+0x1a0>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	07d0      	lsls	r0, r2, #31
 8007d7e:	d502      	bpl.n	8007d86 <_printf_float+0x1a6>
 8007d80:	3301      	adds	r3, #1
 8007d82:	440b      	add	r3, r1
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d88:	f04f 0900 	mov.w	r9, #0
 8007d8c:	e7de      	b.n	8007d4c <_printf_float+0x16c>
 8007d8e:	b913      	cbnz	r3, 8007d96 <_printf_float+0x1b6>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	07d2      	lsls	r2, r2, #31
 8007d94:	d501      	bpl.n	8007d9a <_printf_float+0x1ba>
 8007d96:	3302      	adds	r3, #2
 8007d98:	e7f4      	b.n	8007d84 <_printf_float+0x1a4>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e7f2      	b.n	8007d84 <_printf_float+0x1a4>
 8007d9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da4:	4299      	cmp	r1, r3
 8007da6:	db05      	blt.n	8007db4 <_printf_float+0x1d4>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	6121      	str	r1, [r4, #16]
 8007dac:	07d8      	lsls	r0, r3, #31
 8007dae:	d5ea      	bpl.n	8007d86 <_printf_float+0x1a6>
 8007db0:	1c4b      	adds	r3, r1, #1
 8007db2:	e7e7      	b.n	8007d84 <_printf_float+0x1a4>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	bfd4      	ite	le
 8007db8:	f1c1 0202 	rsble	r2, r1, #2
 8007dbc:	2201      	movgt	r2, #1
 8007dbe:	4413      	add	r3, r2
 8007dc0:	e7e0      	b.n	8007d84 <_printf_float+0x1a4>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	055a      	lsls	r2, r3, #21
 8007dc6:	d407      	bmi.n	8007dd8 <_printf_float+0x1f8>
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	4642      	mov	r2, r8
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d12c      	bne.n	8007e30 <_printf_float+0x250>
 8007dd6:	e764      	b.n	8007ca2 <_printf_float+0xc2>
 8007dd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ddc:	f240 80e0 	bls.w	8007fa0 <_printf_float+0x3c0>
 8007de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f7f8 fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d034      	beq.n	8007e5a <_printf_float+0x27a>
 8007df0:	4a37      	ldr	r2, [pc, #220]	; (8007ed0 <_printf_float+0x2f0>)
 8007df2:	2301      	movs	r3, #1
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	f43f af51 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e04:	429a      	cmp	r2, r3
 8007e06:	db02      	blt.n	8007e0e <_printf_float+0x22e>
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	07d8      	lsls	r0, r3, #31
 8007e0c:	d510      	bpl.n	8007e30 <_printf_float+0x250>
 8007e0e:	ee18 3a10 	vmov	r3, s16
 8007e12:	4652      	mov	r2, sl
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f af41 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e20:	f04f 0800 	mov.w	r8, #0
 8007e24:	f104 091a 	add.w	r9, r4, #26
 8007e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4543      	cmp	r3, r8
 8007e2e:	dc09      	bgt.n	8007e44 <_printf_float+0x264>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	079b      	lsls	r3, r3, #30
 8007e34:	f100 8105 	bmi.w	8008042 <_printf_float+0x462>
 8007e38:	68e0      	ldr	r0, [r4, #12]
 8007e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3c:	4298      	cmp	r0, r3
 8007e3e:	bfb8      	it	lt
 8007e40:	4618      	movlt	r0, r3
 8007e42:	e730      	b.n	8007ca6 <_printf_float+0xc6>
 8007e44:	2301      	movs	r3, #1
 8007e46:	464a      	mov	r2, r9
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f43f af27 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e54:	f108 0801 	add.w	r8, r8, #1
 8007e58:	e7e6      	b.n	8007e28 <_printf_float+0x248>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc39      	bgt.n	8007ed4 <_printf_float+0x2f4>
 8007e60:	4a1b      	ldr	r2, [pc, #108]	; (8007ed0 <_printf_float+0x2f0>)
 8007e62:	2301      	movs	r3, #1
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f43f af19 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e74:	4313      	orrs	r3, r2
 8007e76:	d102      	bne.n	8007e7e <_printf_float+0x29e>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07d9      	lsls	r1, r3, #31
 8007e7c:	d5d8      	bpl.n	8007e30 <_printf_float+0x250>
 8007e7e:	ee18 3a10 	vmov	r3, s16
 8007e82:	4652      	mov	r2, sl
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b8      	blx	r7
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	f43f af09 	beq.w	8007ca2 <_printf_float+0xc2>
 8007e90:	f04f 0900 	mov.w	r9, #0
 8007e94:	f104 0a1a 	add.w	sl, r4, #26
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	425b      	negs	r3, r3
 8007e9c:	454b      	cmp	r3, r9
 8007e9e:	dc01      	bgt.n	8007ea4 <_printf_float+0x2c4>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	e792      	b.n	8007dca <_printf_float+0x1ea>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f aef7 	beq.w	8007ca2 <_printf_float+0xc2>
 8007eb4:	f109 0901 	add.w	r9, r9, #1
 8007eb8:	e7ee      	b.n	8007e98 <_printf_float+0x2b8>
 8007eba:	bf00      	nop
 8007ebc:	7fefffff 	.word	0x7fefffff
 8007ec0:	0800c374 	.word	0x0800c374
 8007ec4:	0800c378 	.word	0x0800c378
 8007ec8:	0800c380 	.word	0x0800c380
 8007ecc:	0800c37c 	.word	0x0800c37c
 8007ed0:	0800c384 	.word	0x0800c384
 8007ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	bfa8      	it	ge
 8007edc:	461a      	movge	r2, r3
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	4691      	mov	r9, r2
 8007ee2:	dc37      	bgt.n	8007f54 <_printf_float+0x374>
 8007ee4:	f04f 0b00 	mov.w	fp, #0
 8007ee8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eec:	f104 021a 	add.w	r2, r4, #26
 8007ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ef2:	9305      	str	r3, [sp, #20]
 8007ef4:	eba3 0309 	sub.w	r3, r3, r9
 8007ef8:	455b      	cmp	r3, fp
 8007efa:	dc33      	bgt.n	8007f64 <_printf_float+0x384>
 8007efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f00:	429a      	cmp	r2, r3
 8007f02:	db3b      	blt.n	8007f7c <_printf_float+0x39c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07da      	lsls	r2, r3, #31
 8007f08:	d438      	bmi.n	8007f7c <_printf_float+0x39c>
 8007f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	eba2 0901 	sub.w	r9, r2, r1
 8007f16:	4599      	cmp	r9, r3
 8007f18:	bfa8      	it	ge
 8007f1a:	4699      	movge	r9, r3
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	dc35      	bgt.n	8007f8e <_printf_float+0x3ae>
 8007f22:	f04f 0800 	mov.w	r8, #0
 8007f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2a:	f104 0a1a 	add.w	sl, r4, #26
 8007f2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	eba3 0309 	sub.w	r3, r3, r9
 8007f38:	4543      	cmp	r3, r8
 8007f3a:	f77f af79 	ble.w	8007e30 <_printf_float+0x250>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4652      	mov	r2, sl
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f43f aeaa 	beq.w	8007ca2 <_printf_float+0xc2>
 8007f4e:	f108 0801 	add.w	r8, r8, #1
 8007f52:	e7ec      	b.n	8007f2e <_printf_float+0x34e>
 8007f54:	4613      	mov	r3, r2
 8007f56:	4631      	mov	r1, r6
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d1c0      	bne.n	8007ee4 <_printf_float+0x304>
 8007f62:	e69e      	b.n	8007ca2 <_printf_float+0xc2>
 8007f64:	2301      	movs	r3, #1
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	9205      	str	r2, [sp, #20]
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f ae97 	beq.w	8007ca2 <_printf_float+0xc2>
 8007f74:	9a05      	ldr	r2, [sp, #20]
 8007f76:	f10b 0b01 	add.w	fp, fp, #1
 8007f7a:	e7b9      	b.n	8007ef0 <_printf_float+0x310>
 8007f7c:	ee18 3a10 	vmov	r3, s16
 8007f80:	4652      	mov	r2, sl
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1be      	bne.n	8007f0a <_printf_float+0x32a>
 8007f8c:	e689      	b.n	8007ca2 <_printf_float+0xc2>
 8007f8e:	9a05      	ldr	r2, [sp, #20]
 8007f90:	464b      	mov	r3, r9
 8007f92:	4442      	add	r2, r8
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d1c1      	bne.n	8007f22 <_printf_float+0x342>
 8007f9e:	e680      	b.n	8007ca2 <_printf_float+0xc2>
 8007fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa2:	2a01      	cmp	r2, #1
 8007fa4:	dc01      	bgt.n	8007faa <_printf_float+0x3ca>
 8007fa6:	07db      	lsls	r3, r3, #31
 8007fa8:	d538      	bpl.n	800801c <_printf_float+0x43c>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4642      	mov	r2, r8
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b8      	blx	r7
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f43f ae74 	beq.w	8007ca2 <_printf_float+0xc2>
 8007fba:	ee18 3a10 	vmov	r3, s16
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f ae6b 	beq.w	8007ca2 <_printf_float+0xc2>
 8007fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_printf_float+0x432>
 8007fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fdc:	f108 0201 	add.w	r2, r8, #1
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d10e      	bne.n	800800a <_printf_float+0x42a>
 8007fec:	e659      	b.n	8007ca2 <_printf_float+0xc2>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae52 	beq.w	8007ca2 <_printf_float+0xc2>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008004:	3b01      	subs	r3, #1
 8008006:	4543      	cmp	r3, r8
 8008008:	dcf1      	bgt.n	8007fee <_printf_float+0x40e>
 800800a:	464b      	mov	r3, r9
 800800c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008010:	e6dc      	b.n	8007dcc <_printf_float+0x1ec>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f104 0a1a 	add.w	sl, r4, #26
 800801a:	e7f2      	b.n	8008002 <_printf_float+0x422>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	e7df      	b.n	8007fe2 <_printf_float+0x402>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae38 	beq.w	8007ca2 <_printf_float+0xc2>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	4543      	cmp	r3, r8
 800803e:	dcf0      	bgt.n	8008022 <_printf_float+0x442>
 8008040:	e6fa      	b.n	8007e38 <_printf_float+0x258>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f4      	b.n	8008036 <_printf_float+0x456>

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4699      	mov	r9, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800805c:	4293      	cmp	r3, r2
 800805e:	bfb8      	it	lt
 8008060:	4613      	movlt	r3, r2
 8008062:	6033      	str	r3, [r6, #0]
 8008064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008068:	4607      	mov	r7, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc26      	bgt.n	80080e2 <_printf_common+0x96>
 8008094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008098:	1e13      	subs	r3, r2, #0
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d42b      	bmi.n	80080fc <_printf_common+0xb0>
 80080a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080a8:	4649      	mov	r1, r9
 80080aa:	4638      	mov	r0, r7
 80080ac:	47c0      	blx	r8
 80080ae:	3001      	adds	r0, #1
 80080b0:	d01e      	beq.n	80080f0 <_printf_common+0xa4>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	68e5      	ldr	r5, [r4, #12]
 80080b6:	6832      	ldr	r2, [r6, #0]
 80080b8:	f003 0306 	and.w	r3, r3, #6
 80080bc:	2b04      	cmp	r3, #4
 80080be:	bf08      	it	eq
 80080c0:	1aad      	subeq	r5, r5, r2
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	bf0c      	ite	eq
 80080c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080cc:	2500      	movne	r5, #0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfc4      	itt	gt
 80080d2:	1a9b      	subgt	r3, r3, r2
 80080d4:	18ed      	addgt	r5, r5, r3
 80080d6:	2600      	movs	r6, #0
 80080d8:	341a      	adds	r4, #26
 80080da:	42b5      	cmp	r5, r6
 80080dc:	d11a      	bne.n	8008114 <_printf_common+0xc8>
 80080de:	2000      	movs	r0, #0
 80080e0:	e008      	b.n	80080f4 <_printf_common+0xa8>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4652      	mov	r2, sl
 80080e6:	4649      	mov	r1, r9
 80080e8:	4638      	mov	r0, r7
 80080ea:	47c0      	blx	r8
 80080ec:	3001      	adds	r0, #1
 80080ee:	d103      	bne.n	80080f8 <_printf_common+0xac>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f8:	3501      	adds	r5, #1
 80080fa:	e7c6      	b.n	800808a <_printf_common+0x3e>
 80080fc:	18e1      	adds	r1, r4, r3
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	2030      	movs	r0, #48	; 0x30
 8008102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008106:	4422      	add	r2, r4
 8008108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800810c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008110:	3302      	adds	r3, #2
 8008112:	e7c7      	b.n	80080a4 <_printf_common+0x58>
 8008114:	2301      	movs	r3, #1
 8008116:	4622      	mov	r2, r4
 8008118:	4649      	mov	r1, r9
 800811a:	4638      	mov	r0, r7
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d0e6      	beq.n	80080f0 <_printf_common+0xa4>
 8008122:	3601      	adds	r6, #1
 8008124:	e7d9      	b.n	80080da <_printf_common+0x8e>
	...

08008128 <_printf_i>:
 8008128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	460c      	mov	r4, r1
 800812e:	4691      	mov	r9, r2
 8008130:	7e27      	ldrb	r7, [r4, #24]
 8008132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008134:	2f78      	cmp	r7, #120	; 0x78
 8008136:	4680      	mov	r8, r0
 8008138:	469a      	mov	sl, r3
 800813a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800813e:	d807      	bhi.n	8008150 <_printf_i+0x28>
 8008140:	2f62      	cmp	r7, #98	; 0x62
 8008142:	d80a      	bhi.n	800815a <_printf_i+0x32>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f000 80d8 	beq.w	80082fa <_printf_i+0x1d2>
 800814a:	2f58      	cmp	r7, #88	; 0x58
 800814c:	f000 80a3 	beq.w	8008296 <_printf_i+0x16e>
 8008150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008158:	e03a      	b.n	80081d0 <_printf_i+0xa8>
 800815a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800815e:	2b15      	cmp	r3, #21
 8008160:	d8f6      	bhi.n	8008150 <_printf_i+0x28>
 8008162:	a001      	add	r0, pc, #4	; (adr r0, 8008168 <_printf_i+0x40>)
 8008164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081d5 	.word	0x080081d5
 8008170:	08008151 	.word	0x08008151
 8008174:	08008151 	.word	0x08008151
 8008178:	08008151 	.word	0x08008151
 800817c:	08008151 	.word	0x08008151
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008151 	.word	0x08008151
 8008188:	08008151 	.word	0x08008151
 800818c:	08008151 	.word	0x08008151
 8008190:	08008151 	.word	0x08008151
 8008194:	080082e1 	.word	0x080082e1
 8008198:	08008205 	.word	0x08008205
 800819c:	080082c3 	.word	0x080082c3
 80081a0:	08008151 	.word	0x08008151
 80081a4:	08008151 	.word	0x08008151
 80081a8:	08008303 	.word	0x08008303
 80081ac:	08008151 	.word	0x08008151
 80081b0:	08008205 	.word	0x08008205
 80081b4:	08008151 	.word	0x08008151
 80081b8:	08008151 	.word	0x08008151
 80081bc:	080082cb 	.word	0x080082cb
 80081c0:	680b      	ldr	r3, [r1, #0]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	600a      	str	r2, [r1, #0]
 80081c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0a3      	b.n	800831c <_printf_i+0x1f4>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	6808      	ldr	r0, [r1, #0]
 80081d8:	062e      	lsls	r6, r5, #24
 80081da:	f100 0304 	add.w	r3, r0, #4
 80081de:	d50a      	bpl.n	80081f6 <_printf_i+0xce>
 80081e0:	6805      	ldr	r5, [r0, #0]
 80081e2:	600b      	str	r3, [r1, #0]
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	da03      	bge.n	80081f0 <_printf_i+0xc8>
 80081e8:	232d      	movs	r3, #45	; 0x2d
 80081ea:	426d      	negs	r5, r5
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	485e      	ldr	r0, [pc, #376]	; (800836c <_printf_i+0x244>)
 80081f2:	230a      	movs	r3, #10
 80081f4:	e019      	b.n	800822a <_printf_i+0x102>
 80081f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081fa:	6805      	ldr	r5, [r0, #0]
 80081fc:	600b      	str	r3, [r1, #0]
 80081fe:	bf18      	it	ne
 8008200:	b22d      	sxthne	r5, r5
 8008202:	e7ef      	b.n	80081e4 <_printf_i+0xbc>
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	1d18      	adds	r0, r3, #4
 800820a:	6008      	str	r0, [r1, #0]
 800820c:	0628      	lsls	r0, r5, #24
 800820e:	d501      	bpl.n	8008214 <_printf_i+0xec>
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	e002      	b.n	800821a <_printf_i+0xf2>
 8008214:	0669      	lsls	r1, r5, #25
 8008216:	d5fb      	bpl.n	8008210 <_printf_i+0xe8>
 8008218:	881d      	ldrh	r5, [r3, #0]
 800821a:	4854      	ldr	r0, [pc, #336]	; (800836c <_printf_i+0x244>)
 800821c:	2f6f      	cmp	r7, #111	; 0x6f
 800821e:	bf0c      	ite	eq
 8008220:	2308      	moveq	r3, #8
 8008222:	230a      	movne	r3, #10
 8008224:	2100      	movs	r1, #0
 8008226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800822a:	6866      	ldr	r6, [r4, #4]
 800822c:	60a6      	str	r6, [r4, #8]
 800822e:	2e00      	cmp	r6, #0
 8008230:	bfa2      	ittt	ge
 8008232:	6821      	ldrge	r1, [r4, #0]
 8008234:	f021 0104 	bicge.w	r1, r1, #4
 8008238:	6021      	strge	r1, [r4, #0]
 800823a:	b90d      	cbnz	r5, 8008240 <_printf_i+0x118>
 800823c:	2e00      	cmp	r6, #0
 800823e:	d04d      	beq.n	80082dc <_printf_i+0x1b4>
 8008240:	4616      	mov	r6, r2
 8008242:	fbb5 f1f3 	udiv	r1, r5, r3
 8008246:	fb03 5711 	mls	r7, r3, r1, r5
 800824a:	5dc7      	ldrb	r7, [r0, r7]
 800824c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008250:	462f      	mov	r7, r5
 8008252:	42bb      	cmp	r3, r7
 8008254:	460d      	mov	r5, r1
 8008256:	d9f4      	bls.n	8008242 <_printf_i+0x11a>
 8008258:	2b08      	cmp	r3, #8
 800825a:	d10b      	bne.n	8008274 <_printf_i+0x14c>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07df      	lsls	r7, r3, #31
 8008260:	d508      	bpl.n	8008274 <_printf_i+0x14c>
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	4299      	cmp	r1, r3
 8008268:	bfde      	ittt	le
 800826a:	2330      	movle	r3, #48	; 0x30
 800826c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008274:	1b92      	subs	r2, r2, r6
 8008276:	6122      	str	r2, [r4, #16]
 8008278:	f8cd a000 	str.w	sl, [sp]
 800827c:	464b      	mov	r3, r9
 800827e:	aa03      	add	r2, sp, #12
 8008280:	4621      	mov	r1, r4
 8008282:	4640      	mov	r0, r8
 8008284:	f7ff fee2 	bl	800804c <_printf_common>
 8008288:	3001      	adds	r0, #1
 800828a:	d14c      	bne.n	8008326 <_printf_i+0x1fe>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b004      	add	sp, #16
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	4835      	ldr	r0, [pc, #212]	; (800836c <_printf_i+0x244>)
 8008298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	680e      	ldr	r6, [r1, #0]
 80082a0:	061f      	lsls	r7, r3, #24
 80082a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80082a6:	600e      	str	r6, [r1, #0]
 80082a8:	d514      	bpl.n	80082d4 <_printf_i+0x1ac>
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	bf44      	itt	mi
 80082ae:	f043 0320 	orrmi.w	r3, r3, #32
 80082b2:	6023      	strmi	r3, [r4, #0]
 80082b4:	b91d      	cbnz	r5, 80082be <_printf_i+0x196>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	f023 0320 	bic.w	r3, r3, #32
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	2310      	movs	r3, #16
 80082c0:	e7b0      	b.n	8008224 <_printf_i+0xfc>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f043 0320 	orr.w	r3, r3, #32
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2378      	movs	r3, #120	; 0x78
 80082cc:	4828      	ldr	r0, [pc, #160]	; (8008370 <_printf_i+0x248>)
 80082ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082d2:	e7e3      	b.n	800829c <_printf_i+0x174>
 80082d4:	065e      	lsls	r6, r3, #25
 80082d6:	bf48      	it	mi
 80082d8:	b2ad      	uxthmi	r5, r5
 80082da:	e7e6      	b.n	80082aa <_printf_i+0x182>
 80082dc:	4616      	mov	r6, r2
 80082de:	e7bb      	b.n	8008258 <_printf_i+0x130>
 80082e0:	680b      	ldr	r3, [r1, #0]
 80082e2:	6826      	ldr	r6, [r4, #0]
 80082e4:	6960      	ldr	r0, [r4, #20]
 80082e6:	1d1d      	adds	r5, r3, #4
 80082e8:	600d      	str	r5, [r1, #0]
 80082ea:	0635      	lsls	r5, r6, #24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	d501      	bpl.n	80082f4 <_printf_i+0x1cc>
 80082f0:	6018      	str	r0, [r3, #0]
 80082f2:	e002      	b.n	80082fa <_printf_i+0x1d2>
 80082f4:	0671      	lsls	r1, r6, #25
 80082f6:	d5fb      	bpl.n	80082f0 <_printf_i+0x1c8>
 80082f8:	8018      	strh	r0, [r3, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	4616      	mov	r6, r2
 8008300:	e7ba      	b.n	8008278 <_printf_i+0x150>
 8008302:	680b      	ldr	r3, [r1, #0]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	600a      	str	r2, [r1, #0]
 8008308:	681e      	ldr	r6, [r3, #0]
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	2100      	movs	r1, #0
 800830e:	4630      	mov	r0, r6
 8008310:	f7f7 ff86 	bl	8000220 <memchr>
 8008314:	b108      	cbz	r0, 800831a <_printf_i+0x1f2>
 8008316:	1b80      	subs	r0, r0, r6
 8008318:	6060      	str	r0, [r4, #4]
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	2300      	movs	r3, #0
 8008320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008324:	e7a8      	b.n	8008278 <_printf_i+0x150>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d0ab      	beq.n	800828c <_printf_i+0x164>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d413      	bmi.n	8008362 <_printf_i+0x23a>
 800833a:	68e0      	ldr	r0, [r4, #12]
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	4298      	cmp	r0, r3
 8008340:	bfb8      	it	lt
 8008342:	4618      	movlt	r0, r3
 8008344:	e7a4      	b.n	8008290 <_printf_i+0x168>
 8008346:	2301      	movs	r3, #1
 8008348:	4632      	mov	r2, r6
 800834a:	4649      	mov	r1, r9
 800834c:	4640      	mov	r0, r8
 800834e:	47d0      	blx	sl
 8008350:	3001      	adds	r0, #1
 8008352:	d09b      	beq.n	800828c <_printf_i+0x164>
 8008354:	3501      	adds	r5, #1
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	9903      	ldr	r1, [sp, #12]
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	42ab      	cmp	r3, r5
 800835e:	dcf2      	bgt.n	8008346 <_printf_i+0x21e>
 8008360:	e7eb      	b.n	800833a <_printf_i+0x212>
 8008362:	2500      	movs	r5, #0
 8008364:	f104 0619 	add.w	r6, r4, #25
 8008368:	e7f5      	b.n	8008356 <_printf_i+0x22e>
 800836a:	bf00      	nop
 800836c:	0800c386 	.word	0x0800c386
 8008370:	0800c397 	.word	0x0800c397

08008374 <_scanf_float>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	b087      	sub	sp, #28
 800837a:	4617      	mov	r7, r2
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	688b      	ldr	r3, [r1, #8]
 8008380:	1e5a      	subs	r2, r3, #1
 8008382:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008386:	bf83      	ittte	hi
 8008388:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800838c:	195b      	addhi	r3, r3, r5
 800838e:	9302      	strhi	r3, [sp, #8]
 8008390:	2300      	movls	r3, #0
 8008392:	bf86      	itte	hi
 8008394:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008398:	608b      	strhi	r3, [r1, #8]
 800839a:	9302      	strls	r3, [sp, #8]
 800839c:	680b      	ldr	r3, [r1, #0]
 800839e:	468b      	mov	fp, r1
 80083a0:	2500      	movs	r5, #0
 80083a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80083aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083ae:	4680      	mov	r8, r0
 80083b0:	460c      	mov	r4, r1
 80083b2:	465e      	mov	r6, fp
 80083b4:	46aa      	mov	sl, r5
 80083b6:	46a9      	mov	r9, r5
 80083b8:	9501      	str	r5, [sp, #4]
 80083ba:	68a2      	ldr	r2, [r4, #8]
 80083bc:	b152      	cbz	r2, 80083d4 <_scanf_float+0x60>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b4e      	cmp	r3, #78	; 0x4e
 80083c4:	d864      	bhi.n	8008490 <_scanf_float+0x11c>
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d83c      	bhi.n	8008444 <_scanf_float+0xd0>
 80083ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80083ce:	b2c8      	uxtb	r0, r1
 80083d0:	280e      	cmp	r0, #14
 80083d2:	d93a      	bls.n	800844a <_scanf_float+0xd6>
 80083d4:	f1b9 0f00 	cmp.w	r9, #0
 80083d8:	d003      	beq.n	80083e2 <_scanf_float+0x6e>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083e6:	f1ba 0f01 	cmp.w	sl, #1
 80083ea:	f200 8113 	bhi.w	8008614 <_scanf_float+0x2a0>
 80083ee:	455e      	cmp	r6, fp
 80083f0:	f200 8105 	bhi.w	80085fe <_scanf_float+0x28a>
 80083f4:	2501      	movs	r5, #1
 80083f6:	4628      	mov	r0, r5
 80083f8:	b007      	add	sp, #28
 80083fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008402:	2a0d      	cmp	r2, #13
 8008404:	d8e6      	bhi.n	80083d4 <_scanf_float+0x60>
 8008406:	a101      	add	r1, pc, #4	; (adr r1, 800840c <_scanf_float+0x98>)
 8008408:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800840c:	0800854b 	.word	0x0800854b
 8008410:	080083d5 	.word	0x080083d5
 8008414:	080083d5 	.word	0x080083d5
 8008418:	080083d5 	.word	0x080083d5
 800841c:	080085ab 	.word	0x080085ab
 8008420:	08008583 	.word	0x08008583
 8008424:	080083d5 	.word	0x080083d5
 8008428:	080083d5 	.word	0x080083d5
 800842c:	08008559 	.word	0x08008559
 8008430:	080083d5 	.word	0x080083d5
 8008434:	080083d5 	.word	0x080083d5
 8008438:	080083d5 	.word	0x080083d5
 800843c:	080083d5 	.word	0x080083d5
 8008440:	08008511 	.word	0x08008511
 8008444:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008448:	e7db      	b.n	8008402 <_scanf_float+0x8e>
 800844a:	290e      	cmp	r1, #14
 800844c:	d8c2      	bhi.n	80083d4 <_scanf_float+0x60>
 800844e:	a001      	add	r0, pc, #4	; (adr r0, 8008454 <_scanf_float+0xe0>)
 8008450:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008454:	08008503 	.word	0x08008503
 8008458:	080083d5 	.word	0x080083d5
 800845c:	08008503 	.word	0x08008503
 8008460:	08008597 	.word	0x08008597
 8008464:	080083d5 	.word	0x080083d5
 8008468:	080084b1 	.word	0x080084b1
 800846c:	080084ed 	.word	0x080084ed
 8008470:	080084ed 	.word	0x080084ed
 8008474:	080084ed 	.word	0x080084ed
 8008478:	080084ed 	.word	0x080084ed
 800847c:	080084ed 	.word	0x080084ed
 8008480:	080084ed 	.word	0x080084ed
 8008484:	080084ed 	.word	0x080084ed
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080084ed 	.word	0x080084ed
 8008490:	2b6e      	cmp	r3, #110	; 0x6e
 8008492:	d809      	bhi.n	80084a8 <_scanf_float+0x134>
 8008494:	2b60      	cmp	r3, #96	; 0x60
 8008496:	d8b2      	bhi.n	80083fe <_scanf_float+0x8a>
 8008498:	2b54      	cmp	r3, #84	; 0x54
 800849a:	d077      	beq.n	800858c <_scanf_float+0x218>
 800849c:	2b59      	cmp	r3, #89	; 0x59
 800849e:	d199      	bne.n	80083d4 <_scanf_float+0x60>
 80084a0:	2d07      	cmp	r5, #7
 80084a2:	d197      	bne.n	80083d4 <_scanf_float+0x60>
 80084a4:	2508      	movs	r5, #8
 80084a6:	e029      	b.n	80084fc <_scanf_float+0x188>
 80084a8:	2b74      	cmp	r3, #116	; 0x74
 80084aa:	d06f      	beq.n	800858c <_scanf_float+0x218>
 80084ac:	2b79      	cmp	r3, #121	; 0x79
 80084ae:	e7f6      	b.n	800849e <_scanf_float+0x12a>
 80084b0:	6821      	ldr	r1, [r4, #0]
 80084b2:	05c8      	lsls	r0, r1, #23
 80084b4:	d51a      	bpl.n	80084ec <_scanf_float+0x178>
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084bc:	6021      	str	r1, [r4, #0]
 80084be:	f109 0901 	add.w	r9, r9, #1
 80084c2:	b11b      	cbz	r3, 80084cc <_scanf_float+0x158>
 80084c4:	3b01      	subs	r3, #1
 80084c6:	3201      	adds	r2, #1
 80084c8:	9302      	str	r3, [sp, #8]
 80084ca:	60a2      	str	r2, [r4, #8]
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	3301      	adds	r3, #1
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3b01      	subs	r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	607b      	str	r3, [r7, #4]
 80084e0:	f340 8084 	ble.w	80085ec <_scanf_float+0x278>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3301      	adds	r3, #1
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	e766      	b.n	80083ba <_scanf_float+0x46>
 80084ec:	eb1a 0f05 	cmn.w	sl, r5
 80084f0:	f47f af70 	bne.w	80083d4 <_scanf_float+0x60>
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80084fa:	6022      	str	r2, [r4, #0]
 80084fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008500:	e7e4      	b.n	80084cc <_scanf_float+0x158>
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	0610      	lsls	r0, r2, #24
 8008506:	f57f af65 	bpl.w	80083d4 <_scanf_float+0x60>
 800850a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800850e:	e7f4      	b.n	80084fa <_scanf_float+0x186>
 8008510:	f1ba 0f00 	cmp.w	sl, #0
 8008514:	d10e      	bne.n	8008534 <_scanf_float+0x1c0>
 8008516:	f1b9 0f00 	cmp.w	r9, #0
 800851a:	d10e      	bne.n	800853a <_scanf_float+0x1c6>
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008522:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008526:	d108      	bne.n	800853a <_scanf_float+0x1c6>
 8008528:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800852c:	6022      	str	r2, [r4, #0]
 800852e:	f04f 0a01 	mov.w	sl, #1
 8008532:	e7e3      	b.n	80084fc <_scanf_float+0x188>
 8008534:	f1ba 0f02 	cmp.w	sl, #2
 8008538:	d055      	beq.n	80085e6 <_scanf_float+0x272>
 800853a:	2d01      	cmp	r5, #1
 800853c:	d002      	beq.n	8008544 <_scanf_float+0x1d0>
 800853e:	2d04      	cmp	r5, #4
 8008540:	f47f af48 	bne.w	80083d4 <_scanf_float+0x60>
 8008544:	3501      	adds	r5, #1
 8008546:	b2ed      	uxtb	r5, r5
 8008548:	e7d8      	b.n	80084fc <_scanf_float+0x188>
 800854a:	f1ba 0f01 	cmp.w	sl, #1
 800854e:	f47f af41 	bne.w	80083d4 <_scanf_float+0x60>
 8008552:	f04f 0a02 	mov.w	sl, #2
 8008556:	e7d1      	b.n	80084fc <_scanf_float+0x188>
 8008558:	b97d      	cbnz	r5, 800857a <_scanf_float+0x206>
 800855a:	f1b9 0f00 	cmp.w	r9, #0
 800855e:	f47f af3c 	bne.w	80083da <_scanf_float+0x66>
 8008562:	6822      	ldr	r2, [r4, #0]
 8008564:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008568:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800856c:	f47f af39 	bne.w	80083e2 <_scanf_float+0x6e>
 8008570:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	2501      	movs	r5, #1
 8008578:	e7c0      	b.n	80084fc <_scanf_float+0x188>
 800857a:	2d03      	cmp	r5, #3
 800857c:	d0e2      	beq.n	8008544 <_scanf_float+0x1d0>
 800857e:	2d05      	cmp	r5, #5
 8008580:	e7de      	b.n	8008540 <_scanf_float+0x1cc>
 8008582:	2d02      	cmp	r5, #2
 8008584:	f47f af26 	bne.w	80083d4 <_scanf_float+0x60>
 8008588:	2503      	movs	r5, #3
 800858a:	e7b7      	b.n	80084fc <_scanf_float+0x188>
 800858c:	2d06      	cmp	r5, #6
 800858e:	f47f af21 	bne.w	80083d4 <_scanf_float+0x60>
 8008592:	2507      	movs	r5, #7
 8008594:	e7b2      	b.n	80084fc <_scanf_float+0x188>
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	0591      	lsls	r1, r2, #22
 800859a:	f57f af1b 	bpl.w	80083d4 <_scanf_float+0x60>
 800859e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085a2:	6022      	str	r2, [r4, #0]
 80085a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085a8:	e7a8      	b.n	80084fc <_scanf_float+0x188>
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085b4:	d006      	beq.n	80085c4 <_scanf_float+0x250>
 80085b6:	0550      	lsls	r0, r2, #21
 80085b8:	f57f af0c 	bpl.w	80083d4 <_scanf_float+0x60>
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	f43f af0f 	beq.w	80083e2 <_scanf_float+0x6e>
 80085c4:	0591      	lsls	r1, r2, #22
 80085c6:	bf58      	it	pl
 80085c8:	9901      	ldrpl	r1, [sp, #4]
 80085ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085ce:	bf58      	it	pl
 80085d0:	eba9 0101 	subpl.w	r1, r9, r1
 80085d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80085d8:	bf58      	it	pl
 80085da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085de:	6022      	str	r2, [r4, #0]
 80085e0:	f04f 0900 	mov.w	r9, #0
 80085e4:	e78a      	b.n	80084fc <_scanf_float+0x188>
 80085e6:	f04f 0a03 	mov.w	sl, #3
 80085ea:	e787      	b.n	80084fc <_scanf_float+0x188>
 80085ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085f0:	4639      	mov	r1, r7
 80085f2:	4640      	mov	r0, r8
 80085f4:	4798      	blx	r3
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f43f aedf 	beq.w	80083ba <_scanf_float+0x46>
 80085fc:	e6ea      	b.n	80083d4 <_scanf_float+0x60>
 80085fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008602:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008606:	463a      	mov	r2, r7
 8008608:	4640      	mov	r0, r8
 800860a:	4798      	blx	r3
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	3b01      	subs	r3, #1
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	e6ec      	b.n	80083ee <_scanf_float+0x7a>
 8008614:	1e6b      	subs	r3, r5, #1
 8008616:	2b06      	cmp	r3, #6
 8008618:	d825      	bhi.n	8008666 <_scanf_float+0x2f2>
 800861a:	2d02      	cmp	r5, #2
 800861c:	d836      	bhi.n	800868c <_scanf_float+0x318>
 800861e:	455e      	cmp	r6, fp
 8008620:	f67f aee8 	bls.w	80083f4 <_scanf_float+0x80>
 8008624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008628:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800862c:	463a      	mov	r2, r7
 800862e:	4640      	mov	r0, r8
 8008630:	4798      	blx	r3
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	3b01      	subs	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	e7f1      	b.n	800861e <_scanf_float+0x2aa>
 800863a:	9802      	ldr	r0, [sp, #8]
 800863c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008640:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008644:	9002      	str	r0, [sp, #8]
 8008646:	463a      	mov	r2, r7
 8008648:	4640      	mov	r0, r8
 800864a:	4798      	blx	r3
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	3b01      	subs	r3, #1
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008656:	fa5f fa8a 	uxtb.w	sl, sl
 800865a:	f1ba 0f02 	cmp.w	sl, #2
 800865e:	d1ec      	bne.n	800863a <_scanf_float+0x2c6>
 8008660:	3d03      	subs	r5, #3
 8008662:	b2ed      	uxtb	r5, r5
 8008664:	1b76      	subs	r6, r6, r5
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	05da      	lsls	r2, r3, #23
 800866a:	d52f      	bpl.n	80086cc <_scanf_float+0x358>
 800866c:	055b      	lsls	r3, r3, #21
 800866e:	d510      	bpl.n	8008692 <_scanf_float+0x31e>
 8008670:	455e      	cmp	r6, fp
 8008672:	f67f aebf 	bls.w	80083f4 <_scanf_float+0x80>
 8008676:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800867a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800867e:	463a      	mov	r2, r7
 8008680:	4640      	mov	r0, r8
 8008682:	4798      	blx	r3
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	3b01      	subs	r3, #1
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	e7f1      	b.n	8008670 <_scanf_float+0x2fc>
 800868c:	46aa      	mov	sl, r5
 800868e:	9602      	str	r6, [sp, #8]
 8008690:	e7df      	b.n	8008652 <_scanf_float+0x2de>
 8008692:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	2965      	cmp	r1, #101	; 0x65
 800869a:	f103 33ff 	add.w	r3, r3, #4294967295
 800869e:	f106 35ff 	add.w	r5, r6, #4294967295
 80086a2:	6123      	str	r3, [r4, #16]
 80086a4:	d00c      	beq.n	80086c0 <_scanf_float+0x34c>
 80086a6:	2945      	cmp	r1, #69	; 0x45
 80086a8:	d00a      	beq.n	80086c0 <_scanf_float+0x34c>
 80086aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ae:	463a      	mov	r2, r7
 80086b0:	4640      	mov	r0, r8
 80086b2:	4798      	blx	r3
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	1eb5      	subs	r5, r6, #2
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c4:	463a      	mov	r2, r7
 80086c6:	4640      	mov	r0, r8
 80086c8:	4798      	blx	r3
 80086ca:	462e      	mov	r6, r5
 80086cc:	6825      	ldr	r5, [r4, #0]
 80086ce:	f015 0510 	ands.w	r5, r5, #16
 80086d2:	d158      	bne.n	8008786 <_scanf_float+0x412>
 80086d4:	7035      	strb	r5, [r6, #0]
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e0:	d11c      	bne.n	800871c <_scanf_float+0x3a8>
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	454b      	cmp	r3, r9
 80086e6:	eba3 0209 	sub.w	r2, r3, r9
 80086ea:	d124      	bne.n	8008736 <_scanf_float+0x3c2>
 80086ec:	2200      	movs	r2, #0
 80086ee:	4659      	mov	r1, fp
 80086f0:	4640      	mov	r0, r8
 80086f2:	f000 fe9b 	bl	800942c <_strtod_r>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	6821      	ldr	r1, [r4, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f011 0f02 	tst.w	r1, #2
 8008700:	ec57 6b10 	vmov	r6, r7, d0
 8008704:	f103 0204 	add.w	r2, r3, #4
 8008708:	d020      	beq.n	800874c <_scanf_float+0x3d8>
 800870a:	9903      	ldr	r1, [sp, #12]
 800870c:	600a      	str	r2, [r1, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	e9c3 6700 	strd	r6, r7, [r3]
 8008714:	68e3      	ldr	r3, [r4, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60e3      	str	r3, [r4, #12]
 800871a:	e66c      	b.n	80083f6 <_scanf_float+0x82>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0e4      	beq.n	80086ec <_scanf_float+0x378>
 8008722:	9905      	ldr	r1, [sp, #20]
 8008724:	230a      	movs	r3, #10
 8008726:	462a      	mov	r2, r5
 8008728:	3101      	adds	r1, #1
 800872a:	4640      	mov	r0, r8
 800872c:	f000 ff08 	bl	8009540 <_strtol_r>
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	9e05      	ldr	r6, [sp, #20]
 8008734:	1ac2      	subs	r2, r0, r3
 8008736:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800873a:	429e      	cmp	r6, r3
 800873c:	bf28      	it	cs
 800873e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008742:	4912      	ldr	r1, [pc, #72]	; (800878c <_scanf_float+0x418>)
 8008744:	4630      	mov	r0, r6
 8008746:	f000 f82b 	bl	80087a0 <siprintf>
 800874a:	e7cf      	b.n	80086ec <_scanf_float+0x378>
 800874c:	f011 0f04 	tst.w	r1, #4
 8008750:	9903      	ldr	r1, [sp, #12]
 8008752:	600a      	str	r2, [r1, #0]
 8008754:	d1db      	bne.n	800870e <_scanf_float+0x39a>
 8008756:	f8d3 8000 	ldr.w	r8, [r3]
 800875a:	ee10 2a10 	vmov	r2, s0
 800875e:	ee10 0a10 	vmov	r0, s0
 8008762:	463b      	mov	r3, r7
 8008764:	4639      	mov	r1, r7
 8008766:	f7f8 fa01 	bl	8000b6c <__aeabi_dcmpun>
 800876a:	b128      	cbz	r0, 8008778 <_scanf_float+0x404>
 800876c:	4808      	ldr	r0, [pc, #32]	; (8008790 <_scanf_float+0x41c>)
 800876e:	f000 f811 	bl	8008794 <nanf>
 8008772:	ed88 0a00 	vstr	s0, [r8]
 8008776:	e7cd      	b.n	8008714 <_scanf_float+0x3a0>
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f8 fa54 	bl	8000c28 <__aeabi_d2f>
 8008780:	f8c8 0000 	str.w	r0, [r8]
 8008784:	e7c6      	b.n	8008714 <_scanf_float+0x3a0>
 8008786:	2500      	movs	r5, #0
 8008788:	e635      	b.n	80083f6 <_scanf_float+0x82>
 800878a:	bf00      	nop
 800878c:	0800c3a8 	.word	0x0800c3a8
 8008790:	0800c7c0 	.word	0x0800c7c0

08008794 <nanf>:
 8008794:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800879c <nanf+0x8>
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	7fc00000 	.word	0x7fc00000

080087a0 <siprintf>:
 80087a0:	b40e      	push	{r1, r2, r3}
 80087a2:	b500      	push	{lr}
 80087a4:	b09c      	sub	sp, #112	; 0x70
 80087a6:	ab1d      	add	r3, sp, #116	; 0x74
 80087a8:	9002      	str	r0, [sp, #8]
 80087aa:	9006      	str	r0, [sp, #24]
 80087ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087b0:	4809      	ldr	r0, [pc, #36]	; (80087d8 <siprintf+0x38>)
 80087b2:	9107      	str	r1, [sp, #28]
 80087b4:	9104      	str	r1, [sp, #16]
 80087b6:	4909      	ldr	r1, [pc, #36]	; (80087dc <siprintf+0x3c>)
 80087b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087bc:	9105      	str	r1, [sp, #20]
 80087be:	6800      	ldr	r0, [r0, #0]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	a902      	add	r1, sp, #8
 80087c4:	f002 fea4 	bl	800b510 <_svfiprintf_r>
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	b01c      	add	sp, #112	; 0x70
 80087d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d4:	b003      	add	sp, #12
 80087d6:	4770      	bx	lr
 80087d8:	20000018 	.word	0x20000018
 80087dc:	ffff0208 	.word	0xffff0208

080087e0 <sulp>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4604      	mov	r4, r0
 80087e4:	460d      	mov	r5, r1
 80087e6:	ec45 4b10 	vmov	d0, r4, r5
 80087ea:	4616      	mov	r6, r2
 80087ec:	f002 fc2c 	bl	800b048 <__ulp>
 80087f0:	ec51 0b10 	vmov	r0, r1, d0
 80087f4:	b17e      	cbz	r6, 8008816 <sulp+0x36>
 80087f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80087fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd09      	ble.n	8008816 <sulp+0x36>
 8008802:	051b      	lsls	r3, r3, #20
 8008804:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008808:	2400      	movs	r4, #0
 800880a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800880e:	4622      	mov	r2, r4
 8008810:	462b      	mov	r3, r5
 8008812:	f7f7 ff11 	bl	8000638 <__aeabi_dmul>
 8008816:	bd70      	pop	{r4, r5, r6, pc}

08008818 <_strtod_l>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	b0a3      	sub	sp, #140	; 0x8c
 800881e:	461f      	mov	r7, r3
 8008820:	2300      	movs	r3, #0
 8008822:	931e      	str	r3, [sp, #120]	; 0x78
 8008824:	4ba4      	ldr	r3, [pc, #656]	; (8008ab8 <_strtod_l+0x2a0>)
 8008826:	9219      	str	r2, [sp, #100]	; 0x64
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	9307      	str	r3, [sp, #28]
 800882c:	4604      	mov	r4, r0
 800882e:	4618      	mov	r0, r3
 8008830:	4688      	mov	r8, r1
 8008832:	f7f7 fced 	bl	8000210 <strlen>
 8008836:	f04f 0a00 	mov.w	sl, #0
 800883a:	4605      	mov	r5, r0
 800883c:	f04f 0b00 	mov.w	fp, #0
 8008840:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	2a2b      	cmp	r2, #43	; 0x2b
 800884a:	d04c      	beq.n	80088e6 <_strtod_l+0xce>
 800884c:	d839      	bhi.n	80088c2 <_strtod_l+0xaa>
 800884e:	2a0d      	cmp	r2, #13
 8008850:	d832      	bhi.n	80088b8 <_strtod_l+0xa0>
 8008852:	2a08      	cmp	r2, #8
 8008854:	d832      	bhi.n	80088bc <_strtod_l+0xa4>
 8008856:	2a00      	cmp	r2, #0
 8008858:	d03c      	beq.n	80088d4 <_strtod_l+0xbc>
 800885a:	2300      	movs	r3, #0
 800885c:	930e      	str	r3, [sp, #56]	; 0x38
 800885e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008860:	7833      	ldrb	r3, [r6, #0]
 8008862:	2b30      	cmp	r3, #48	; 0x30
 8008864:	f040 80b4 	bne.w	80089d0 <_strtod_l+0x1b8>
 8008868:	7873      	ldrb	r3, [r6, #1]
 800886a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800886e:	2b58      	cmp	r3, #88	; 0x58
 8008870:	d16c      	bne.n	800894c <_strtod_l+0x134>
 8008872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	ab1e      	add	r3, sp, #120	; 0x78
 8008878:	9702      	str	r7, [sp, #8]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	4a8f      	ldr	r2, [pc, #572]	; (8008abc <_strtod_l+0x2a4>)
 800887e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008880:	a91d      	add	r1, sp, #116	; 0x74
 8008882:	4620      	mov	r0, r4
 8008884:	f001 fd40 	bl	800a308 <__gethex>
 8008888:	f010 0707 	ands.w	r7, r0, #7
 800888c:	4605      	mov	r5, r0
 800888e:	d005      	beq.n	800889c <_strtod_l+0x84>
 8008890:	2f06      	cmp	r7, #6
 8008892:	d12a      	bne.n	80088ea <_strtod_l+0xd2>
 8008894:	3601      	adds	r6, #1
 8008896:	2300      	movs	r3, #0
 8008898:	961d      	str	r6, [sp, #116]	; 0x74
 800889a:	930e      	str	r3, [sp, #56]	; 0x38
 800889c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 8596 	bne.w	80093d0 <_strtod_l+0xbb8>
 80088a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088a6:	b1db      	cbz	r3, 80088e0 <_strtod_l+0xc8>
 80088a8:	4652      	mov	r2, sl
 80088aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088ae:	ec43 2b10 	vmov	d0, r2, r3
 80088b2:	b023      	add	sp, #140	; 0x8c
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	2a20      	cmp	r2, #32
 80088ba:	d1ce      	bne.n	800885a <_strtod_l+0x42>
 80088bc:	3301      	adds	r3, #1
 80088be:	931d      	str	r3, [sp, #116]	; 0x74
 80088c0:	e7c0      	b.n	8008844 <_strtod_l+0x2c>
 80088c2:	2a2d      	cmp	r2, #45	; 0x2d
 80088c4:	d1c9      	bne.n	800885a <_strtod_l+0x42>
 80088c6:	2201      	movs	r2, #1
 80088c8:	920e      	str	r2, [sp, #56]	; 0x38
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	921d      	str	r2, [sp, #116]	; 0x74
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1c4      	bne.n	800885e <_strtod_l+0x46>
 80088d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 8576 	bne.w	80093cc <_strtod_l+0xbb4>
 80088e0:	4652      	mov	r2, sl
 80088e2:	465b      	mov	r3, fp
 80088e4:	e7e3      	b.n	80088ae <_strtod_l+0x96>
 80088e6:	2200      	movs	r2, #0
 80088e8:	e7ee      	b.n	80088c8 <_strtod_l+0xb0>
 80088ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80088ec:	b13a      	cbz	r2, 80088fe <_strtod_l+0xe6>
 80088ee:	2135      	movs	r1, #53	; 0x35
 80088f0:	a820      	add	r0, sp, #128	; 0x80
 80088f2:	f002 fcb4 	bl	800b25e <__copybits>
 80088f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80088f8:	4620      	mov	r0, r4
 80088fa:	f002 f879 	bl	800a9f0 <_Bfree>
 80088fe:	3f01      	subs	r7, #1
 8008900:	2f05      	cmp	r7, #5
 8008902:	d807      	bhi.n	8008914 <_strtod_l+0xfc>
 8008904:	e8df f007 	tbb	[pc, r7]
 8008908:	1d180b0e 	.word	0x1d180b0e
 800890c:	030e      	.short	0x030e
 800890e:	f04f 0b00 	mov.w	fp, #0
 8008912:	46da      	mov	sl, fp
 8008914:	0728      	lsls	r0, r5, #28
 8008916:	d5c1      	bpl.n	800889c <_strtod_l+0x84>
 8008918:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800891c:	e7be      	b.n	800889c <_strtod_l+0x84>
 800891e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008922:	e7f7      	b.n	8008914 <_strtod_l+0xfc>
 8008924:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008928:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800892a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800892e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008932:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008936:	e7ed      	b.n	8008914 <_strtod_l+0xfc>
 8008938:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008ac0 <_strtod_l+0x2a8>
 800893c:	f04f 0a00 	mov.w	sl, #0
 8008940:	e7e8      	b.n	8008914 <_strtod_l+0xfc>
 8008942:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008946:	f04f 3aff 	mov.w	sl, #4294967295
 800894a:	e7e3      	b.n	8008914 <_strtod_l+0xfc>
 800894c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	921d      	str	r2, [sp, #116]	; 0x74
 8008952:	785b      	ldrb	r3, [r3, #1]
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d0f9      	beq.n	800894c <_strtod_l+0x134>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d09f      	beq.n	800889c <_strtod_l+0x84>
 800895c:	2301      	movs	r3, #1
 800895e:	f04f 0900 	mov.w	r9, #0
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008966:	930a      	str	r3, [sp, #40]	; 0x28
 8008968:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800896c:	464f      	mov	r7, r9
 800896e:	220a      	movs	r2, #10
 8008970:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008972:	7806      	ldrb	r6, [r0, #0]
 8008974:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008978:	b2d9      	uxtb	r1, r3
 800897a:	2909      	cmp	r1, #9
 800897c:	d92a      	bls.n	80089d4 <_strtod_l+0x1bc>
 800897e:	9907      	ldr	r1, [sp, #28]
 8008980:	462a      	mov	r2, r5
 8008982:	f002 fedd 	bl	800b740 <strncmp>
 8008986:	b398      	cbz	r0, 80089f0 <_strtod_l+0x1d8>
 8008988:	2000      	movs	r0, #0
 800898a:	4633      	mov	r3, r6
 800898c:	463d      	mov	r5, r7
 800898e:	9007      	str	r0, [sp, #28]
 8008990:	4602      	mov	r2, r0
 8008992:	2b65      	cmp	r3, #101	; 0x65
 8008994:	d001      	beq.n	800899a <_strtod_l+0x182>
 8008996:	2b45      	cmp	r3, #69	; 0x45
 8008998:	d118      	bne.n	80089cc <_strtod_l+0x1b4>
 800899a:	b91d      	cbnz	r5, 80089a4 <_strtod_l+0x18c>
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	4303      	orrs	r3, r0
 80089a0:	d098      	beq.n	80088d4 <_strtod_l+0xbc>
 80089a2:	2500      	movs	r5, #0
 80089a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80089a8:	f108 0301 	add.w	r3, r8, #1
 80089ac:	931d      	str	r3, [sp, #116]	; 0x74
 80089ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80089b2:	2b2b      	cmp	r3, #43	; 0x2b
 80089b4:	d075      	beq.n	8008aa2 <_strtod_l+0x28a>
 80089b6:	2b2d      	cmp	r3, #45	; 0x2d
 80089b8:	d07b      	beq.n	8008ab2 <_strtod_l+0x29a>
 80089ba:	f04f 0c00 	mov.w	ip, #0
 80089be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80089c2:	2909      	cmp	r1, #9
 80089c4:	f240 8082 	bls.w	8008acc <_strtod_l+0x2b4>
 80089c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80089cc:	2600      	movs	r6, #0
 80089ce:	e09d      	b.n	8008b0c <_strtod_l+0x2f4>
 80089d0:	2300      	movs	r3, #0
 80089d2:	e7c4      	b.n	800895e <_strtod_l+0x146>
 80089d4:	2f08      	cmp	r7, #8
 80089d6:	bfd8      	it	le
 80089d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80089da:	f100 0001 	add.w	r0, r0, #1
 80089de:	bfda      	itte	le
 80089e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80089e4:	9309      	strle	r3, [sp, #36]	; 0x24
 80089e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80089ea:	3701      	adds	r7, #1
 80089ec:	901d      	str	r0, [sp, #116]	; 0x74
 80089ee:	e7bf      	b.n	8008970 <_strtod_l+0x158>
 80089f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089f2:	195a      	adds	r2, r3, r5
 80089f4:	921d      	str	r2, [sp, #116]	; 0x74
 80089f6:	5d5b      	ldrb	r3, [r3, r5]
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	d037      	beq.n	8008a6c <_strtod_l+0x254>
 80089fc:	9007      	str	r0, [sp, #28]
 80089fe:	463d      	mov	r5, r7
 8008a00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008a04:	2a09      	cmp	r2, #9
 8008a06:	d912      	bls.n	8008a2e <_strtod_l+0x216>
 8008a08:	2201      	movs	r2, #1
 8008a0a:	e7c2      	b.n	8008992 <_strtod_l+0x17a>
 8008a0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	921d      	str	r2, [sp, #116]	; 0x74
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	3001      	adds	r0, #1
 8008a16:	2b30      	cmp	r3, #48	; 0x30
 8008a18:	d0f8      	beq.n	8008a0c <_strtod_l+0x1f4>
 8008a1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008a1e:	2a08      	cmp	r2, #8
 8008a20:	f200 84db 	bhi.w	80093da <_strtod_l+0xbc2>
 8008a24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a26:	9007      	str	r0, [sp, #28]
 8008a28:	2000      	movs	r0, #0
 8008a2a:	920a      	str	r2, [sp, #40]	; 0x28
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	3b30      	subs	r3, #48	; 0x30
 8008a30:	f100 0201 	add.w	r2, r0, #1
 8008a34:	d014      	beq.n	8008a60 <_strtod_l+0x248>
 8008a36:	9907      	ldr	r1, [sp, #28]
 8008a38:	4411      	add	r1, r2
 8008a3a:	9107      	str	r1, [sp, #28]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	eb00 0e05 	add.w	lr, r0, r5
 8008a42:	210a      	movs	r1, #10
 8008a44:	4572      	cmp	r2, lr
 8008a46:	d113      	bne.n	8008a70 <_strtod_l+0x258>
 8008a48:	182a      	adds	r2, r5, r0
 8008a4a:	2a08      	cmp	r2, #8
 8008a4c:	f105 0501 	add.w	r5, r5, #1
 8008a50:	4405      	add	r5, r0
 8008a52:	dc1c      	bgt.n	8008a8e <_strtod_l+0x276>
 8008a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a56:	220a      	movs	r2, #10
 8008a58:	fb02 3301 	mla	r3, r2, r1, r3
 8008a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5e:	2200      	movs	r2, #0
 8008a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a62:	1c59      	adds	r1, r3, #1
 8008a64:	911d      	str	r1, [sp, #116]	; 0x74
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	4610      	mov	r0, r2
 8008a6a:	e7c9      	b.n	8008a00 <_strtod_l+0x1e8>
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	e7d2      	b.n	8008a16 <_strtod_l+0x1fe>
 8008a70:	2a08      	cmp	r2, #8
 8008a72:	dc04      	bgt.n	8008a7e <_strtod_l+0x266>
 8008a74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a76:	434e      	muls	r6, r1
 8008a78:	9609      	str	r6, [sp, #36]	; 0x24
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	e7e2      	b.n	8008a44 <_strtod_l+0x22c>
 8008a7e:	f102 0c01 	add.w	ip, r2, #1
 8008a82:	f1bc 0f10 	cmp.w	ip, #16
 8008a86:	bfd8      	it	le
 8008a88:	fb01 f909 	mulle.w	r9, r1, r9
 8008a8c:	e7f5      	b.n	8008a7a <_strtod_l+0x262>
 8008a8e:	2d10      	cmp	r5, #16
 8008a90:	bfdc      	itt	le
 8008a92:	220a      	movle	r2, #10
 8008a94:	fb02 3909 	mlale	r9, r2, r9, r3
 8008a98:	e7e1      	b.n	8008a5e <_strtod_l+0x246>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9307      	str	r3, [sp, #28]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	e77c      	b.n	800899c <_strtod_l+0x184>
 8008aa2:	f04f 0c00 	mov.w	ip, #0
 8008aa6:	f108 0302 	add.w	r3, r8, #2
 8008aaa:	931d      	str	r3, [sp, #116]	; 0x74
 8008aac:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008ab0:	e785      	b.n	80089be <_strtod_l+0x1a6>
 8008ab2:	f04f 0c01 	mov.w	ip, #1
 8008ab6:	e7f6      	b.n	8008aa6 <_strtod_l+0x28e>
 8008ab8:	0800c600 	.word	0x0800c600
 8008abc:	0800c3b0 	.word	0x0800c3b0
 8008ac0:	7ff00000 	.word	0x7ff00000
 8008ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ac6:	1c59      	adds	r1, r3, #1
 8008ac8:	911d      	str	r1, [sp, #116]	; 0x74
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b30      	cmp	r3, #48	; 0x30
 8008ace:	d0f9      	beq.n	8008ac4 <_strtod_l+0x2ac>
 8008ad0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008ad4:	2908      	cmp	r1, #8
 8008ad6:	f63f af79 	bhi.w	80089cc <_strtod_l+0x1b4>
 8008ada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008ade:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ae0:	9308      	str	r3, [sp, #32]
 8008ae2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ae4:	1c59      	adds	r1, r3, #1
 8008ae6:	911d      	str	r1, [sp, #116]	; 0x74
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008aee:	2e09      	cmp	r6, #9
 8008af0:	d937      	bls.n	8008b62 <_strtod_l+0x34a>
 8008af2:	9e08      	ldr	r6, [sp, #32]
 8008af4:	1b89      	subs	r1, r1, r6
 8008af6:	2908      	cmp	r1, #8
 8008af8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008afc:	dc02      	bgt.n	8008b04 <_strtod_l+0x2ec>
 8008afe:	4576      	cmp	r6, lr
 8008b00:	bfa8      	it	ge
 8008b02:	4676      	movge	r6, lr
 8008b04:	f1bc 0f00 	cmp.w	ip, #0
 8008b08:	d000      	beq.n	8008b0c <_strtod_l+0x2f4>
 8008b0a:	4276      	negs	r6, r6
 8008b0c:	2d00      	cmp	r5, #0
 8008b0e:	d14f      	bne.n	8008bb0 <_strtod_l+0x398>
 8008b10:	9904      	ldr	r1, [sp, #16]
 8008b12:	4301      	orrs	r1, r0
 8008b14:	f47f aec2 	bne.w	800889c <_strtod_l+0x84>
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	f47f aedb 	bne.w	80088d4 <_strtod_l+0xbc>
 8008b1e:	2b69      	cmp	r3, #105	; 0x69
 8008b20:	d027      	beq.n	8008b72 <_strtod_l+0x35a>
 8008b22:	dc24      	bgt.n	8008b6e <_strtod_l+0x356>
 8008b24:	2b49      	cmp	r3, #73	; 0x49
 8008b26:	d024      	beq.n	8008b72 <_strtod_l+0x35a>
 8008b28:	2b4e      	cmp	r3, #78	; 0x4e
 8008b2a:	f47f aed3 	bne.w	80088d4 <_strtod_l+0xbc>
 8008b2e:	499e      	ldr	r1, [pc, #632]	; (8008da8 <_strtod_l+0x590>)
 8008b30:	a81d      	add	r0, sp, #116	; 0x74
 8008b32:	f001 fe41 	bl	800a7b8 <__match>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aecc 	beq.w	80088d4 <_strtod_l+0xbc>
 8008b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b28      	cmp	r3, #40	; 0x28
 8008b42:	d12d      	bne.n	8008ba0 <_strtod_l+0x388>
 8008b44:	4999      	ldr	r1, [pc, #612]	; (8008dac <_strtod_l+0x594>)
 8008b46:	aa20      	add	r2, sp, #128	; 0x80
 8008b48:	a81d      	add	r0, sp, #116	; 0x74
 8008b4a:	f001 fe49 	bl	800a7e0 <__hexnan>
 8008b4e:	2805      	cmp	r0, #5
 8008b50:	d126      	bne.n	8008ba0 <_strtod_l+0x388>
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008b58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008b5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008b60:	e69c      	b.n	800889c <_strtod_l+0x84>
 8008b62:	210a      	movs	r1, #10
 8008b64:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008b68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008b6c:	e7b9      	b.n	8008ae2 <_strtod_l+0x2ca>
 8008b6e:	2b6e      	cmp	r3, #110	; 0x6e
 8008b70:	e7db      	b.n	8008b2a <_strtod_l+0x312>
 8008b72:	498f      	ldr	r1, [pc, #572]	; (8008db0 <_strtod_l+0x598>)
 8008b74:	a81d      	add	r0, sp, #116	; 0x74
 8008b76:	f001 fe1f 	bl	800a7b8 <__match>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f aeaa 	beq.w	80088d4 <_strtod_l+0xbc>
 8008b80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b82:	498c      	ldr	r1, [pc, #560]	; (8008db4 <_strtod_l+0x59c>)
 8008b84:	3b01      	subs	r3, #1
 8008b86:	a81d      	add	r0, sp, #116	; 0x74
 8008b88:	931d      	str	r3, [sp, #116]	; 0x74
 8008b8a:	f001 fe15 	bl	800a7b8 <__match>
 8008b8e:	b910      	cbnz	r0, 8008b96 <_strtod_l+0x37e>
 8008b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b92:	3301      	adds	r3, #1
 8008b94:	931d      	str	r3, [sp, #116]	; 0x74
 8008b96:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008dc4 <_strtod_l+0x5ac>
 8008b9a:	f04f 0a00 	mov.w	sl, #0
 8008b9e:	e67d      	b.n	800889c <_strtod_l+0x84>
 8008ba0:	4885      	ldr	r0, [pc, #532]	; (8008db8 <_strtod_l+0x5a0>)
 8008ba2:	f002 fdb5 	bl	800b710 <nan>
 8008ba6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008baa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008bae:	e675      	b.n	800889c <_strtod_l+0x84>
 8008bb0:	9b07      	ldr	r3, [sp, #28]
 8008bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb4:	1af3      	subs	r3, r6, r3
 8008bb6:	2f00      	cmp	r7, #0
 8008bb8:	bf08      	it	eq
 8008bba:	462f      	moveq	r7, r5
 8008bbc:	2d10      	cmp	r5, #16
 8008bbe:	9308      	str	r3, [sp, #32]
 8008bc0:	46a8      	mov	r8, r5
 8008bc2:	bfa8      	it	ge
 8008bc4:	f04f 0810 	movge.w	r8, #16
 8008bc8:	f7f7 fcbc 	bl	8000544 <__aeabi_ui2d>
 8008bcc:	2d09      	cmp	r5, #9
 8008bce:	4682      	mov	sl, r0
 8008bd0:	468b      	mov	fp, r1
 8008bd2:	dd13      	ble.n	8008bfc <_strtod_l+0x3e4>
 8008bd4:	4b79      	ldr	r3, [pc, #484]	; (8008dbc <_strtod_l+0x5a4>)
 8008bd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008bda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008bde:	f7f7 fd2b 	bl	8000638 <__aeabi_dmul>
 8008be2:	4682      	mov	sl, r0
 8008be4:	4648      	mov	r0, r9
 8008be6:	468b      	mov	fp, r1
 8008be8:	f7f7 fcac 	bl	8000544 <__aeabi_ui2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7f7 fb6a 	bl	80002cc <__adddf3>
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	2d0f      	cmp	r5, #15
 8008bfe:	dc38      	bgt.n	8008c72 <_strtod_l+0x45a>
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f43f ae4a 	beq.w	800889c <_strtod_l+0x84>
 8008c08:	dd24      	ble.n	8008c54 <_strtod_l+0x43c>
 8008c0a:	2b16      	cmp	r3, #22
 8008c0c:	dc0b      	bgt.n	8008c26 <_strtod_l+0x40e>
 8008c0e:	4d6b      	ldr	r5, [pc, #428]	; (8008dbc <_strtod_l+0x5a4>)
 8008c10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008c14:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008c18:	4652      	mov	r2, sl
 8008c1a:	465b      	mov	r3, fp
 8008c1c:	f7f7 fd0c 	bl	8000638 <__aeabi_dmul>
 8008c20:	4682      	mov	sl, r0
 8008c22:	468b      	mov	fp, r1
 8008c24:	e63a      	b.n	800889c <_strtod_l+0x84>
 8008c26:	9a08      	ldr	r2, [sp, #32]
 8008c28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	db20      	blt.n	8008c72 <_strtod_l+0x45a>
 8008c30:	4c62      	ldr	r4, [pc, #392]	; (8008dbc <_strtod_l+0x5a4>)
 8008c32:	f1c5 050f 	rsb	r5, r5, #15
 8008c36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c42:	f7f7 fcf9 	bl	8000638 <__aeabi_dmul>
 8008c46:	9b08      	ldr	r3, [sp, #32]
 8008c48:	1b5d      	subs	r5, r3, r5
 8008c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c52:	e7e3      	b.n	8008c1c <_strtod_l+0x404>
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	3316      	adds	r3, #22
 8008c58:	db0b      	blt.n	8008c72 <_strtod_l+0x45a>
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	4a57      	ldr	r2, [pc, #348]	; (8008dbc <_strtod_l+0x5a4>)
 8008c5e:	1b9e      	subs	r6, r3, r6
 8008c60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008c64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c68:	4650      	mov	r0, sl
 8008c6a:	4659      	mov	r1, fp
 8008c6c:	f7f7 fe0e 	bl	800088c <__aeabi_ddiv>
 8008c70:	e7d6      	b.n	8008c20 <_strtod_l+0x408>
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	eba5 0808 	sub.w	r8, r5, r8
 8008c78:	4498      	add	r8, r3
 8008c7a:	f1b8 0f00 	cmp.w	r8, #0
 8008c7e:	dd71      	ble.n	8008d64 <_strtod_l+0x54c>
 8008c80:	f018 030f 	ands.w	r3, r8, #15
 8008c84:	d00a      	beq.n	8008c9c <_strtod_l+0x484>
 8008c86:	494d      	ldr	r1, [pc, #308]	; (8008dbc <_strtod_l+0x5a4>)
 8008c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c8c:	4652      	mov	r2, sl
 8008c8e:	465b      	mov	r3, fp
 8008c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c94:	f7f7 fcd0 	bl	8000638 <__aeabi_dmul>
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	f038 080f 	bics.w	r8, r8, #15
 8008ca0:	d04d      	beq.n	8008d3e <_strtod_l+0x526>
 8008ca2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008ca6:	dd22      	ble.n	8008cee <_strtod_l+0x4d6>
 8008ca8:	2500      	movs	r5, #0
 8008caa:	462e      	mov	r6, r5
 8008cac:	9509      	str	r5, [sp, #36]	; 0x24
 8008cae:	9507      	str	r5, [sp, #28]
 8008cb0:	2322      	movs	r3, #34	; 0x22
 8008cb2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008dc4 <_strtod_l+0x5ac>
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f43f adec 	beq.w	800889c <_strtod_l+0x84>
 8008cc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f001 fe92 	bl	800a9f0 <_Bfree>
 8008ccc:	9907      	ldr	r1, [sp, #28]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f001 fe8e 	bl	800a9f0 <_Bfree>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f001 fe8a 	bl	800a9f0 <_Bfree>
 8008cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f001 fe86 	bl	800a9f0 <_Bfree>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f001 fe82 	bl	800a9f0 <_Bfree>
 8008cec:	e5d6      	b.n	800889c <_strtod_l+0x84>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	4659      	mov	r1, fp
 8008cf8:	4699      	mov	r9, r3
 8008cfa:	f1b8 0f01 	cmp.w	r8, #1
 8008cfe:	dc21      	bgt.n	8008d44 <_strtod_l+0x52c>
 8008d00:	b10b      	cbz	r3, 8008d06 <_strtod_l+0x4ee>
 8008d02:	4682      	mov	sl, r0
 8008d04:	468b      	mov	fp, r1
 8008d06:	4b2e      	ldr	r3, [pc, #184]	; (8008dc0 <_strtod_l+0x5a8>)
 8008d08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008d0c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008d10:	4652      	mov	r2, sl
 8008d12:	465b      	mov	r3, fp
 8008d14:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008d18:	f7f7 fc8e 	bl	8000638 <__aeabi_dmul>
 8008d1c:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <_strtod_l+0x5ac>)
 8008d1e:	460a      	mov	r2, r1
 8008d20:	400b      	ands	r3, r1
 8008d22:	4929      	ldr	r1, [pc, #164]	; (8008dc8 <_strtod_l+0x5b0>)
 8008d24:	428b      	cmp	r3, r1
 8008d26:	4682      	mov	sl, r0
 8008d28:	d8be      	bhi.n	8008ca8 <_strtod_l+0x490>
 8008d2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008d2e:	428b      	cmp	r3, r1
 8008d30:	bf86      	itte	hi
 8008d32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008dcc <_strtod_l+0x5b4>
 8008d36:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	e081      	b.n	8008e48 <_strtod_l+0x630>
 8008d44:	f018 0f01 	tst.w	r8, #1
 8008d48:	d007      	beq.n	8008d5a <_strtod_l+0x542>
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <_strtod_l+0x5a8>)
 8008d4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fc70 	bl	8000638 <__aeabi_dmul>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f109 0901 	add.w	r9, r9, #1
 8008d5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d62:	e7ca      	b.n	8008cfa <_strtod_l+0x4e2>
 8008d64:	d0eb      	beq.n	8008d3e <_strtod_l+0x526>
 8008d66:	f1c8 0800 	rsb	r8, r8, #0
 8008d6a:	f018 020f 	ands.w	r2, r8, #15
 8008d6e:	d00a      	beq.n	8008d86 <_strtod_l+0x56e>
 8008d70:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <_strtod_l+0x5a4>)
 8008d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d76:	4650      	mov	r0, sl
 8008d78:	4659      	mov	r1, fp
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fd85 	bl	800088c <__aeabi_ddiv>
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008d8a:	d0d8      	beq.n	8008d3e <_strtod_l+0x526>
 8008d8c:	f1b8 0f1f 	cmp.w	r8, #31
 8008d90:	dd1e      	ble.n	8008dd0 <_strtod_l+0x5b8>
 8008d92:	2500      	movs	r5, #0
 8008d94:	462e      	mov	r6, r5
 8008d96:	9509      	str	r5, [sp, #36]	; 0x24
 8008d98:	9507      	str	r5, [sp, #28]
 8008d9a:	2322      	movs	r3, #34	; 0x22
 8008d9c:	f04f 0a00 	mov.w	sl, #0
 8008da0:	f04f 0b00 	mov.w	fp, #0
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	e789      	b.n	8008cbc <_strtod_l+0x4a4>
 8008da8:	0800c381 	.word	0x0800c381
 8008dac:	0800c3c4 	.word	0x0800c3c4
 8008db0:	0800c379 	.word	0x0800c379
 8008db4:	0800c504 	.word	0x0800c504
 8008db8:	0800c7c0 	.word	0x0800c7c0
 8008dbc:	0800c6a0 	.word	0x0800c6a0
 8008dc0:	0800c678 	.word	0x0800c678
 8008dc4:	7ff00000 	.word	0x7ff00000
 8008dc8:	7ca00000 	.word	0x7ca00000
 8008dcc:	7fefffff 	.word	0x7fefffff
 8008dd0:	f018 0310 	ands.w	r3, r8, #16
 8008dd4:	bf18      	it	ne
 8008dd6:	236a      	movne	r3, #106	; 0x6a
 8008dd8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009190 <_strtod_l+0x978>
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	4650      	mov	r0, sl
 8008de0:	4659      	mov	r1, fp
 8008de2:	2300      	movs	r3, #0
 8008de4:	f018 0f01 	tst.w	r8, #1
 8008de8:	d004      	beq.n	8008df4 <_strtod_l+0x5dc>
 8008dea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008dee:	f7f7 fc23 	bl	8000638 <__aeabi_dmul>
 8008df2:	2301      	movs	r3, #1
 8008df4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008df8:	f109 0908 	add.w	r9, r9, #8
 8008dfc:	d1f2      	bne.n	8008de4 <_strtod_l+0x5cc>
 8008dfe:	b10b      	cbz	r3, 8008e04 <_strtod_l+0x5ec>
 8008e00:	4682      	mov	sl, r0
 8008e02:	468b      	mov	fp, r1
 8008e04:	9b04      	ldr	r3, [sp, #16]
 8008e06:	b1bb      	cbz	r3, 8008e38 <_strtod_l+0x620>
 8008e08:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008e0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	4659      	mov	r1, fp
 8008e14:	dd10      	ble.n	8008e38 <_strtod_l+0x620>
 8008e16:	2b1f      	cmp	r3, #31
 8008e18:	f340 8128 	ble.w	800906c <_strtod_l+0x854>
 8008e1c:	2b34      	cmp	r3, #52	; 0x34
 8008e1e:	bfde      	ittt	le
 8008e20:	3b20      	suble	r3, #32
 8008e22:	f04f 32ff 	movle.w	r2, #4294967295
 8008e26:	fa02 f303 	lslle.w	r3, r2, r3
 8008e2a:	f04f 0a00 	mov.w	sl, #0
 8008e2e:	bfcc      	ite	gt
 8008e30:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008e34:	ea03 0b01 	andle.w	fp, r3, r1
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	f7f7 fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1a4      	bne.n	8008d92 <_strtod_l+0x57a>
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e4e:	462b      	mov	r3, r5
 8008e50:	463a      	mov	r2, r7
 8008e52:	4620      	mov	r0, r4
 8008e54:	f001 fe38 	bl	800aac8 <__s2b>
 8008e58:	9009      	str	r0, [sp, #36]	; 0x24
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f43f af24 	beq.w	8008ca8 <_strtod_l+0x490>
 8008e60:	9b07      	ldr	r3, [sp, #28]
 8008e62:	1b9e      	subs	r6, r3, r6
 8008e64:	9b08      	ldr	r3, [sp, #32]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfb4      	ite	lt
 8008e6a:	4633      	movlt	r3, r6
 8008e6c:	2300      	movge	r3, #0
 8008e6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	2500      	movs	r5, #0
 8008e74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008e78:	9318      	str	r3, [sp, #96]	; 0x60
 8008e7a:	462e      	mov	r6, r5
 8008e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7e:	4620      	mov	r0, r4
 8008e80:	6859      	ldr	r1, [r3, #4]
 8008e82:	f001 fd75 	bl	800a970 <_Balloc>
 8008e86:	9007      	str	r0, [sp, #28]
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f43f af11 	beq.w	8008cb0 <_strtod_l+0x498>
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	3202      	adds	r2, #2
 8008e94:	f103 010c 	add.w	r1, r3, #12
 8008e98:	0092      	lsls	r2, r2, #2
 8008e9a:	300c      	adds	r0, #12
 8008e9c:	f001 fd5a 	bl	800a954 <memcpy>
 8008ea0:	ec4b ab10 	vmov	d0, sl, fp
 8008ea4:	aa20      	add	r2, sp, #128	; 0x80
 8008ea6:	a91f      	add	r1, sp, #124	; 0x7c
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008eae:	f002 f947 	bl	800b140 <__d2b>
 8008eb2:	901e      	str	r0, [sp, #120]	; 0x78
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f43f aefb 	beq.w	8008cb0 <_strtod_l+0x498>
 8008eba:	2101      	movs	r1, #1
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f001 fe9d 	bl	800abfc <__i2b>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f aef3 	beq.w	8008cb0 <_strtod_l+0x498>
 8008eca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ecc:	9904      	ldr	r1, [sp, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfab      	itete	ge
 8008ed2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008ed4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008ed6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008ed8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008edc:	bfac      	ite	ge
 8008ede:	eb03 0902 	addge.w	r9, r3, r2
 8008ee2:	1ad7      	sublt	r7, r2, r3
 8008ee4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ee6:	eba3 0801 	sub.w	r8, r3, r1
 8008eea:	4490      	add	r8, r2
 8008eec:	4ba3      	ldr	r3, [pc, #652]	; (800917c <_strtod_l+0x964>)
 8008eee:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ef2:	4598      	cmp	r8, r3
 8008ef4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ef8:	f280 80cc 	bge.w	8009094 <_strtod_l+0x87c>
 8008efc:	eba3 0308 	sub.w	r3, r3, r8
 8008f00:	2b1f      	cmp	r3, #31
 8008f02:	eba2 0203 	sub.w	r2, r2, r3
 8008f06:	f04f 0101 	mov.w	r1, #1
 8008f0a:	f300 80b6 	bgt.w	800907a <_strtod_l+0x862>
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	9311      	str	r3, [sp, #68]	; 0x44
 8008f14:	2300      	movs	r3, #0
 8008f16:	930c      	str	r3, [sp, #48]	; 0x30
 8008f18:	eb09 0802 	add.w	r8, r9, r2
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	45c1      	cmp	r9, r8
 8008f20:	4417      	add	r7, r2
 8008f22:	441f      	add	r7, r3
 8008f24:	464b      	mov	r3, r9
 8008f26:	bfa8      	it	ge
 8008f28:	4643      	movge	r3, r8
 8008f2a:	42bb      	cmp	r3, r7
 8008f2c:	bfa8      	it	ge
 8008f2e:	463b      	movge	r3, r7
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfc2      	ittt	gt
 8008f34:	eba8 0803 	subgt.w	r8, r8, r3
 8008f38:	1aff      	subgt	r7, r7, r3
 8008f3a:	eba9 0903 	subgt.w	r9, r9, r3
 8008f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd17      	ble.n	8008f74 <_strtod_l+0x75c>
 8008f44:	4631      	mov	r1, r6
 8008f46:	461a      	mov	r2, r3
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f001 ff13 	bl	800ad74 <__pow5mult>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	2800      	cmp	r0, #0
 8008f52:	f43f aead 	beq.w	8008cb0 <_strtod_l+0x498>
 8008f56:	4601      	mov	r1, r0
 8008f58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f001 fe64 	bl	800ac28 <__multiply>
 8008f60:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f43f aea4 	beq.w	8008cb0 <_strtod_l+0x498>
 8008f68:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f001 fd40 	bl	800a9f0 <_Bfree>
 8008f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f72:	931e      	str	r3, [sp, #120]	; 0x78
 8008f74:	f1b8 0f00 	cmp.w	r8, #0
 8008f78:	f300 8091 	bgt.w	800909e <_strtod_l+0x886>
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd08      	ble.n	8008f94 <_strtod_l+0x77c>
 8008f82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f84:	9907      	ldr	r1, [sp, #28]
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 fef4 	bl	800ad74 <__pow5mult>
 8008f8c:	9007      	str	r0, [sp, #28]
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f ae8e 	beq.w	8008cb0 <_strtod_l+0x498>
 8008f94:	2f00      	cmp	r7, #0
 8008f96:	dd08      	ble.n	8008faa <_strtod_l+0x792>
 8008f98:	9907      	ldr	r1, [sp, #28]
 8008f9a:	463a      	mov	r2, r7
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f001 ff43 	bl	800ae28 <__lshift>
 8008fa2:	9007      	str	r0, [sp, #28]
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f ae83 	beq.w	8008cb0 <_strtod_l+0x498>
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	dd08      	ble.n	8008fc2 <_strtod_l+0x7aa>
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	464a      	mov	r2, r9
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f001 ff37 	bl	800ae28 <__lshift>
 8008fba:	4606      	mov	r6, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f ae77 	beq.w	8008cb0 <_strtod_l+0x498>
 8008fc2:	9a07      	ldr	r2, [sp, #28]
 8008fc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f001 ffb6 	bl	800af38 <__mdiff>
 8008fcc:	4605      	mov	r5, r0
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f ae6e 	beq.w	8008cb0 <_strtod_l+0x498>
 8008fd4:	68c3      	ldr	r3, [r0, #12]
 8008fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60c3      	str	r3, [r0, #12]
 8008fdc:	4631      	mov	r1, r6
 8008fde:	f001 ff8f 	bl	800af00 <__mcmp>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	da65      	bge.n	80090b2 <_strtod_l+0x89a>
 8008fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fe8:	ea53 030a 	orrs.w	r3, r3, sl
 8008fec:	f040 8087 	bne.w	80090fe <_strtod_l+0x8e6>
 8008ff0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 8082 	bne.w	80090fe <_strtod_l+0x8e6>
 8008ffa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ffe:	0d1b      	lsrs	r3, r3, #20
 8009000:	051b      	lsls	r3, r3, #20
 8009002:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009006:	d97a      	bls.n	80090fe <_strtod_l+0x8e6>
 8009008:	696b      	ldr	r3, [r5, #20]
 800900a:	b913      	cbnz	r3, 8009012 <_strtod_l+0x7fa>
 800900c:	692b      	ldr	r3, [r5, #16]
 800900e:	2b01      	cmp	r3, #1
 8009010:	dd75      	ble.n	80090fe <_strtod_l+0x8e6>
 8009012:	4629      	mov	r1, r5
 8009014:	2201      	movs	r2, #1
 8009016:	4620      	mov	r0, r4
 8009018:	f001 ff06 	bl	800ae28 <__lshift>
 800901c:	4631      	mov	r1, r6
 800901e:	4605      	mov	r5, r0
 8009020:	f001 ff6e 	bl	800af00 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	dd6a      	ble.n	80090fe <_strtod_l+0x8e6>
 8009028:	9904      	ldr	r1, [sp, #16]
 800902a:	4a55      	ldr	r2, [pc, #340]	; (8009180 <_strtod_l+0x968>)
 800902c:	465b      	mov	r3, fp
 800902e:	2900      	cmp	r1, #0
 8009030:	f000 8085 	beq.w	800913e <_strtod_l+0x926>
 8009034:	ea02 010b 	and.w	r1, r2, fp
 8009038:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800903c:	dc7f      	bgt.n	800913e <_strtod_l+0x926>
 800903e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009042:	f77f aeaa 	ble.w	8008d9a <_strtod_l+0x582>
 8009046:	4a4f      	ldr	r2, [pc, #316]	; (8009184 <_strtod_l+0x96c>)
 8009048:	2300      	movs	r3, #0
 800904a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800904e:	4650      	mov	r0, sl
 8009050:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009054:	4659      	mov	r1, fp
 8009056:	f7f7 faef 	bl	8000638 <__aeabi_dmul>
 800905a:	460b      	mov	r3, r1
 800905c:	4303      	orrs	r3, r0
 800905e:	bf08      	it	eq
 8009060:	2322      	moveq	r3, #34	; 0x22
 8009062:	4682      	mov	sl, r0
 8009064:	468b      	mov	fp, r1
 8009066:	bf08      	it	eq
 8009068:	6023      	streq	r3, [r4, #0]
 800906a:	e62b      	b.n	8008cc4 <_strtod_l+0x4ac>
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	ea03 0a0a 	and.w	sl, r3, sl
 8009078:	e6de      	b.n	8008e38 <_strtod_l+0x620>
 800907a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800907e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009082:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009086:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800908a:	fa01 f308 	lsl.w	r3, r1, r8
 800908e:	930c      	str	r3, [sp, #48]	; 0x30
 8009090:	9111      	str	r1, [sp, #68]	; 0x44
 8009092:	e741      	b.n	8008f18 <_strtod_l+0x700>
 8009094:	2300      	movs	r3, #0
 8009096:	930c      	str	r3, [sp, #48]	; 0x30
 8009098:	2301      	movs	r3, #1
 800909a:	9311      	str	r3, [sp, #68]	; 0x44
 800909c:	e73c      	b.n	8008f18 <_strtod_l+0x700>
 800909e:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090a0:	4642      	mov	r2, r8
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 fec0 	bl	800ae28 <__lshift>
 80090a8:	901e      	str	r0, [sp, #120]	; 0x78
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f47f af66 	bne.w	8008f7c <_strtod_l+0x764>
 80090b0:	e5fe      	b.n	8008cb0 <_strtod_l+0x498>
 80090b2:	465f      	mov	r7, fp
 80090b4:	d16e      	bne.n	8009194 <_strtod_l+0x97c>
 80090b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090bc:	b342      	cbz	r2, 8009110 <_strtod_l+0x8f8>
 80090be:	4a32      	ldr	r2, [pc, #200]	; (8009188 <_strtod_l+0x970>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d128      	bne.n	8009116 <_strtod_l+0x8fe>
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	4650      	mov	r0, sl
 80090c8:	b1eb      	cbz	r3, 8009106 <_strtod_l+0x8ee>
 80090ca:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <_strtod_l+0x968>)
 80090cc:	403a      	ands	r2, r7
 80090ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80090d2:	f04f 31ff 	mov.w	r1, #4294967295
 80090d6:	d819      	bhi.n	800910c <_strtod_l+0x8f4>
 80090d8:	0d12      	lsrs	r2, r2, #20
 80090da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090de:	fa01 f303 	lsl.w	r3, r1, r3
 80090e2:	4298      	cmp	r0, r3
 80090e4:	d117      	bne.n	8009116 <_strtod_l+0x8fe>
 80090e6:	4b29      	ldr	r3, [pc, #164]	; (800918c <_strtod_l+0x974>)
 80090e8:	429f      	cmp	r7, r3
 80090ea:	d102      	bne.n	80090f2 <_strtod_l+0x8da>
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f addf 	beq.w	8008cb0 <_strtod_l+0x498>
 80090f2:	4b23      	ldr	r3, [pc, #140]	; (8009180 <_strtod_l+0x968>)
 80090f4:	403b      	ands	r3, r7
 80090f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80090fa:	f04f 0a00 	mov.w	sl, #0
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1a0      	bne.n	8009046 <_strtod_l+0x82e>
 8009104:	e5de      	b.n	8008cc4 <_strtod_l+0x4ac>
 8009106:	f04f 33ff 	mov.w	r3, #4294967295
 800910a:	e7ea      	b.n	80090e2 <_strtod_l+0x8ca>
 800910c:	460b      	mov	r3, r1
 800910e:	e7e8      	b.n	80090e2 <_strtod_l+0x8ca>
 8009110:	ea53 030a 	orrs.w	r3, r3, sl
 8009114:	d088      	beq.n	8009028 <_strtod_l+0x810>
 8009116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009118:	b1db      	cbz	r3, 8009152 <_strtod_l+0x93a>
 800911a:	423b      	tst	r3, r7
 800911c:	d0ef      	beq.n	80090fe <_strtod_l+0x8e6>
 800911e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009120:	9a04      	ldr	r2, [sp, #16]
 8009122:	4650      	mov	r0, sl
 8009124:	4659      	mov	r1, fp
 8009126:	b1c3      	cbz	r3, 800915a <_strtod_l+0x942>
 8009128:	f7ff fb5a 	bl	80087e0 <sulp>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009134:	f7f7 f8ca 	bl	80002cc <__adddf3>
 8009138:	4682      	mov	sl, r0
 800913a:	468b      	mov	fp, r1
 800913c:	e7df      	b.n	80090fe <_strtod_l+0x8e6>
 800913e:	4013      	ands	r3, r2
 8009140:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009144:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009148:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800914c:	f04f 3aff 	mov.w	sl, #4294967295
 8009150:	e7d5      	b.n	80090fe <_strtod_l+0x8e6>
 8009152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009154:	ea13 0f0a 	tst.w	r3, sl
 8009158:	e7e0      	b.n	800911c <_strtod_l+0x904>
 800915a:	f7ff fb41 	bl	80087e0 <sulp>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009166:	f7f7 f8af 	bl	80002c8 <__aeabi_dsub>
 800916a:	2200      	movs	r2, #0
 800916c:	2300      	movs	r3, #0
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	f7f7 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 8009176:	2800      	cmp	r0, #0
 8009178:	d0c1      	beq.n	80090fe <_strtod_l+0x8e6>
 800917a:	e60e      	b.n	8008d9a <_strtod_l+0x582>
 800917c:	fffffc02 	.word	0xfffffc02
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	39500000 	.word	0x39500000
 8009188:	000fffff 	.word	0x000fffff
 800918c:	7fefffff 	.word	0x7fefffff
 8009190:	0800c3d8 	.word	0x0800c3d8
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	f002 f82e 	bl	800b1f8 <__ratio>
 800919c:	ec59 8b10 	vmov	r8, r9, d0
 80091a0:	ee10 0a10 	vmov	r0, s0
 80091a4:	2200      	movs	r2, #0
 80091a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 fcc0 	bl	8000b30 <__aeabi_dcmple>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d07c      	beq.n	80092ae <_strtod_l+0xa96>
 80091b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d04c      	beq.n	8009254 <_strtod_l+0xa3c>
 80091ba:	4b95      	ldr	r3, [pc, #596]	; (8009410 <_strtod_l+0xbf8>)
 80091bc:	2200      	movs	r2, #0
 80091be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80091c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009410 <_strtod_l+0xbf8>
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	4b92      	ldr	r3, [pc, #584]	; (8009414 <_strtod_l+0xbfc>)
 80091cc:	403b      	ands	r3, r7
 80091ce:	9311      	str	r3, [sp, #68]	; 0x44
 80091d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80091d2:	4b91      	ldr	r3, [pc, #580]	; (8009418 <_strtod_l+0xc00>)
 80091d4:	429a      	cmp	r2, r3
 80091d6:	f040 80b2 	bne.w	800933e <_strtod_l+0xb26>
 80091da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80091e6:	ec4b ab10 	vmov	d0, sl, fp
 80091ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80091ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091f2:	f001 ff29 	bl	800b048 <__ulp>
 80091f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091fa:	ec53 2b10 	vmov	r2, r3, d0
 80091fe:	f7f7 fa1b 	bl	8000638 <__aeabi_dmul>
 8009202:	4652      	mov	r2, sl
 8009204:	465b      	mov	r3, fp
 8009206:	f7f7 f861 	bl	80002cc <__adddf3>
 800920a:	460b      	mov	r3, r1
 800920c:	4981      	ldr	r1, [pc, #516]	; (8009414 <_strtod_l+0xbfc>)
 800920e:	4a83      	ldr	r2, [pc, #524]	; (800941c <_strtod_l+0xc04>)
 8009210:	4019      	ands	r1, r3
 8009212:	4291      	cmp	r1, r2
 8009214:	4682      	mov	sl, r0
 8009216:	d95e      	bls.n	80092d6 <_strtod_l+0xabe>
 8009218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800921a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800921e:	4293      	cmp	r3, r2
 8009220:	d103      	bne.n	800922a <_strtod_l+0xa12>
 8009222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009224:	3301      	adds	r3, #1
 8009226:	f43f ad43 	beq.w	8008cb0 <_strtod_l+0x498>
 800922a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009428 <_strtod_l+0xc10>
 800922e:	f04f 3aff 	mov.w	sl, #4294967295
 8009232:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009234:	4620      	mov	r0, r4
 8009236:	f001 fbdb 	bl	800a9f0 <_Bfree>
 800923a:	9907      	ldr	r1, [sp, #28]
 800923c:	4620      	mov	r0, r4
 800923e:	f001 fbd7 	bl	800a9f0 <_Bfree>
 8009242:	4631      	mov	r1, r6
 8009244:	4620      	mov	r0, r4
 8009246:	f001 fbd3 	bl	800a9f0 <_Bfree>
 800924a:	4629      	mov	r1, r5
 800924c:	4620      	mov	r0, r4
 800924e:	f001 fbcf 	bl	800a9f0 <_Bfree>
 8009252:	e613      	b.n	8008e7c <_strtod_l+0x664>
 8009254:	f1ba 0f00 	cmp.w	sl, #0
 8009258:	d11b      	bne.n	8009292 <_strtod_l+0xa7a>
 800925a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800925e:	b9f3      	cbnz	r3, 800929e <_strtod_l+0xa86>
 8009260:	4b6b      	ldr	r3, [pc, #428]	; (8009410 <_strtod_l+0xbf8>)
 8009262:	2200      	movs	r2, #0
 8009264:	4640      	mov	r0, r8
 8009266:	4649      	mov	r1, r9
 8009268:	f7f7 fc58 	bl	8000b1c <__aeabi_dcmplt>
 800926c:	b9d0      	cbnz	r0, 80092a4 <_strtod_l+0xa8c>
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	4b6b      	ldr	r3, [pc, #428]	; (8009420 <_strtod_l+0xc08>)
 8009274:	2200      	movs	r2, #0
 8009276:	f7f7 f9df 	bl	8000638 <__aeabi_dmul>
 800927a:	4680      	mov	r8, r0
 800927c:	4689      	mov	r9, r1
 800927e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009282:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009286:	931b      	str	r3, [sp, #108]	; 0x6c
 8009288:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800928c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009290:	e79b      	b.n	80091ca <_strtod_l+0x9b2>
 8009292:	f1ba 0f01 	cmp.w	sl, #1
 8009296:	d102      	bne.n	800929e <_strtod_l+0xa86>
 8009298:	2f00      	cmp	r7, #0
 800929a:	f43f ad7e 	beq.w	8008d9a <_strtod_l+0x582>
 800929e:	4b61      	ldr	r3, [pc, #388]	; (8009424 <_strtod_l+0xc0c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	e78c      	b.n	80091be <_strtod_l+0x9a6>
 80092a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009420 <_strtod_l+0xc08>
 80092a8:	f04f 0800 	mov.w	r8, #0
 80092ac:	e7e7      	b.n	800927e <_strtod_l+0xa66>
 80092ae:	4b5c      	ldr	r3, [pc, #368]	; (8009420 <_strtod_l+0xc08>)
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	2200      	movs	r2, #0
 80092b6:	f7f7 f9bf 	bl	8000638 <__aeabi_dmul>
 80092ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	b933      	cbnz	r3, 80092d0 <_strtod_l+0xab8>
 80092c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092c6:	9012      	str	r0, [sp, #72]	; 0x48
 80092c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80092ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80092ce:	e7dd      	b.n	800928c <_strtod_l+0xa74>
 80092d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80092d4:	e7f9      	b.n	80092ca <_strtod_l+0xab2>
 80092d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1a8      	bne.n	8009232 <_strtod_l+0xa1a>
 80092e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092e6:	0d1b      	lsrs	r3, r3, #20
 80092e8:	051b      	lsls	r3, r3, #20
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d1a1      	bne.n	8009232 <_strtod_l+0xa1a>
 80092ee:	4640      	mov	r0, r8
 80092f0:	4649      	mov	r1, r9
 80092f2:	f7f7 fd01 	bl	8000cf8 <__aeabi_d2lz>
 80092f6:	f7f7 f971 	bl	80005dc <__aeabi_l2d>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4640      	mov	r0, r8
 8009300:	4649      	mov	r1, r9
 8009302:	f7f6 ffe1 	bl	80002c8 <__aeabi_dsub>
 8009306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800930c:	ea43 030a 	orr.w	r3, r3, sl
 8009310:	4313      	orrs	r3, r2
 8009312:	4680      	mov	r8, r0
 8009314:	4689      	mov	r9, r1
 8009316:	d053      	beq.n	80093c0 <_strtod_l+0xba8>
 8009318:	a335      	add	r3, pc, #212	; (adr r3, 80093f0 <_strtod_l+0xbd8>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	f7f7 fbfd 	bl	8000b1c <__aeabi_dcmplt>
 8009322:	2800      	cmp	r0, #0
 8009324:	f47f acce 	bne.w	8008cc4 <_strtod_l+0x4ac>
 8009328:	a333      	add	r3, pc, #204	; (adr r3, 80093f8 <_strtod_l+0xbe0>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f7 fc11 	bl	8000b58 <__aeabi_dcmpgt>
 8009336:	2800      	cmp	r0, #0
 8009338:	f43f af7b 	beq.w	8009232 <_strtod_l+0xa1a>
 800933c:	e4c2      	b.n	8008cc4 <_strtod_l+0x4ac>
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	b333      	cbz	r3, 8009390 <_strtod_l+0xb78>
 8009342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009344:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009348:	d822      	bhi.n	8009390 <_strtod_l+0xb78>
 800934a:	a32d      	add	r3, pc, #180	; (adr r3, 8009400 <_strtod_l+0xbe8>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f7 fbec 	bl	8000b30 <__aeabi_dcmple>
 8009358:	b1a0      	cbz	r0, 8009384 <_strtod_l+0xb6c>
 800935a:	4649      	mov	r1, r9
 800935c:	4640      	mov	r0, r8
 800935e:	f7f7 fc43 	bl	8000be8 <__aeabi_d2uiz>
 8009362:	2801      	cmp	r0, #1
 8009364:	bf38      	it	cc
 8009366:	2001      	movcc	r0, #1
 8009368:	f7f7 f8ec 	bl	8000544 <__aeabi_ui2d>
 800936c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800936e:	4680      	mov	r8, r0
 8009370:	4689      	mov	r9, r1
 8009372:	bb13      	cbnz	r3, 80093ba <_strtod_l+0xba2>
 8009374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009378:	9014      	str	r0, [sp, #80]	; 0x50
 800937a:	9315      	str	r3, [sp, #84]	; 0x54
 800937c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009380:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009386:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009388:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	930d      	str	r3, [sp, #52]	; 0x34
 8009390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009394:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009398:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800939c:	f001 fe54 	bl	800b048 <__ulp>
 80093a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093a4:	ec53 2b10 	vmov	r2, r3, d0
 80093a8:	f7f7 f946 	bl	8000638 <__aeabi_dmul>
 80093ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093b0:	f7f6 ff8c 	bl	80002cc <__adddf3>
 80093b4:	4682      	mov	sl, r0
 80093b6:	468b      	mov	fp, r1
 80093b8:	e78f      	b.n	80092da <_strtod_l+0xac2>
 80093ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80093be:	e7dd      	b.n	800937c <_strtod_l+0xb64>
 80093c0:	a311      	add	r3, pc, #68	; (adr r3, 8009408 <_strtod_l+0xbf0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 fba9 	bl	8000b1c <__aeabi_dcmplt>
 80093ca:	e7b4      	b.n	8009336 <_strtod_l+0xb1e>
 80093cc:	2300      	movs	r3, #0
 80093ce:	930e      	str	r3, [sp, #56]	; 0x38
 80093d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	f7ff ba65 	b.w	80088a4 <_strtod_l+0x8c>
 80093da:	2b65      	cmp	r3, #101	; 0x65
 80093dc:	f43f ab5d 	beq.w	8008a9a <_strtod_l+0x282>
 80093e0:	2b45      	cmp	r3, #69	; 0x45
 80093e2:	f43f ab5a 	beq.w	8008a9a <_strtod_l+0x282>
 80093e6:	2201      	movs	r2, #1
 80093e8:	f7ff bb92 	b.w	8008b10 <_strtod_l+0x2f8>
 80093ec:	f3af 8000 	nop.w
 80093f0:	94a03595 	.word	0x94a03595
 80093f4:	3fdfffff 	.word	0x3fdfffff
 80093f8:	35afe535 	.word	0x35afe535
 80093fc:	3fe00000 	.word	0x3fe00000
 8009400:	ffc00000 	.word	0xffc00000
 8009404:	41dfffff 	.word	0x41dfffff
 8009408:	94a03595 	.word	0x94a03595
 800940c:	3fcfffff 	.word	0x3fcfffff
 8009410:	3ff00000 	.word	0x3ff00000
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	7fe00000 	.word	0x7fe00000
 800941c:	7c9fffff 	.word	0x7c9fffff
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	bff00000 	.word	0xbff00000
 8009428:	7fefffff 	.word	0x7fefffff

0800942c <_strtod_r>:
 800942c:	4b01      	ldr	r3, [pc, #4]	; (8009434 <_strtod_r+0x8>)
 800942e:	f7ff b9f3 	b.w	8008818 <_strtod_l>
 8009432:	bf00      	nop
 8009434:	20000080 	.word	0x20000080

08009438 <_strtol_l.isra.0>:
 8009438:	2b01      	cmp	r3, #1
 800943a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943e:	d001      	beq.n	8009444 <_strtol_l.isra.0+0xc>
 8009440:	2b24      	cmp	r3, #36	; 0x24
 8009442:	d906      	bls.n	8009452 <_strtol_l.isra.0+0x1a>
 8009444:	f7fe fafa 	bl	8007a3c <__errno>
 8009448:	2316      	movs	r3, #22
 800944a:	6003      	str	r3, [r0, #0]
 800944c:	2000      	movs	r0, #0
 800944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009452:	4f3a      	ldr	r7, [pc, #232]	; (800953c <_strtol_l.isra.0+0x104>)
 8009454:	468e      	mov	lr, r1
 8009456:	4676      	mov	r6, lr
 8009458:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800945c:	5de5      	ldrb	r5, [r4, r7]
 800945e:	f015 0508 	ands.w	r5, r5, #8
 8009462:	d1f8      	bne.n	8009456 <_strtol_l.isra.0+0x1e>
 8009464:	2c2d      	cmp	r4, #45	; 0x2d
 8009466:	d134      	bne.n	80094d2 <_strtol_l.isra.0+0x9a>
 8009468:	f89e 4000 	ldrb.w	r4, [lr]
 800946c:	f04f 0801 	mov.w	r8, #1
 8009470:	f106 0e02 	add.w	lr, r6, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d05c      	beq.n	8009532 <_strtol_l.isra.0+0xfa>
 8009478:	2b10      	cmp	r3, #16
 800947a:	d10c      	bne.n	8009496 <_strtol_l.isra.0+0x5e>
 800947c:	2c30      	cmp	r4, #48	; 0x30
 800947e:	d10a      	bne.n	8009496 <_strtol_l.isra.0+0x5e>
 8009480:	f89e 4000 	ldrb.w	r4, [lr]
 8009484:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009488:	2c58      	cmp	r4, #88	; 0x58
 800948a:	d14d      	bne.n	8009528 <_strtol_l.isra.0+0xf0>
 800948c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009490:	2310      	movs	r3, #16
 8009492:	f10e 0e02 	add.w	lr, lr, #2
 8009496:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800949a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800949e:	2600      	movs	r6, #0
 80094a0:	fbbc f9f3 	udiv	r9, ip, r3
 80094a4:	4635      	mov	r5, r6
 80094a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80094aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80094ae:	2f09      	cmp	r7, #9
 80094b0:	d818      	bhi.n	80094e4 <_strtol_l.isra.0+0xac>
 80094b2:	463c      	mov	r4, r7
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	dd24      	ble.n	8009502 <_strtol_l.isra.0+0xca>
 80094b8:	2e00      	cmp	r6, #0
 80094ba:	db1f      	blt.n	80094fc <_strtol_l.isra.0+0xc4>
 80094bc:	45a9      	cmp	r9, r5
 80094be:	d31d      	bcc.n	80094fc <_strtol_l.isra.0+0xc4>
 80094c0:	d101      	bne.n	80094c6 <_strtol_l.isra.0+0x8e>
 80094c2:	45a2      	cmp	sl, r4
 80094c4:	db1a      	blt.n	80094fc <_strtol_l.isra.0+0xc4>
 80094c6:	fb05 4503 	mla	r5, r5, r3, r4
 80094ca:	2601      	movs	r6, #1
 80094cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80094d0:	e7eb      	b.n	80094aa <_strtol_l.isra.0+0x72>
 80094d2:	2c2b      	cmp	r4, #43	; 0x2b
 80094d4:	bf08      	it	eq
 80094d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80094da:	46a8      	mov	r8, r5
 80094dc:	bf08      	it	eq
 80094de:	f106 0e02 	addeq.w	lr, r6, #2
 80094e2:	e7c7      	b.n	8009474 <_strtol_l.isra.0+0x3c>
 80094e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80094e8:	2f19      	cmp	r7, #25
 80094ea:	d801      	bhi.n	80094f0 <_strtol_l.isra.0+0xb8>
 80094ec:	3c37      	subs	r4, #55	; 0x37
 80094ee:	e7e1      	b.n	80094b4 <_strtol_l.isra.0+0x7c>
 80094f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80094f4:	2f19      	cmp	r7, #25
 80094f6:	d804      	bhi.n	8009502 <_strtol_l.isra.0+0xca>
 80094f8:	3c57      	subs	r4, #87	; 0x57
 80094fa:	e7db      	b.n	80094b4 <_strtol_l.isra.0+0x7c>
 80094fc:	f04f 36ff 	mov.w	r6, #4294967295
 8009500:	e7e4      	b.n	80094cc <_strtol_l.isra.0+0x94>
 8009502:	2e00      	cmp	r6, #0
 8009504:	da05      	bge.n	8009512 <_strtol_l.isra.0+0xda>
 8009506:	2322      	movs	r3, #34	; 0x22
 8009508:	6003      	str	r3, [r0, #0]
 800950a:	4665      	mov	r5, ip
 800950c:	b942      	cbnz	r2, 8009520 <_strtol_l.isra.0+0xe8>
 800950e:	4628      	mov	r0, r5
 8009510:	e79d      	b.n	800944e <_strtol_l.isra.0+0x16>
 8009512:	f1b8 0f00 	cmp.w	r8, #0
 8009516:	d000      	beq.n	800951a <_strtol_l.isra.0+0xe2>
 8009518:	426d      	negs	r5, r5
 800951a:	2a00      	cmp	r2, #0
 800951c:	d0f7      	beq.n	800950e <_strtol_l.isra.0+0xd6>
 800951e:	b10e      	cbz	r6, 8009524 <_strtol_l.isra.0+0xec>
 8009520:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009524:	6011      	str	r1, [r2, #0]
 8009526:	e7f2      	b.n	800950e <_strtol_l.isra.0+0xd6>
 8009528:	2430      	movs	r4, #48	; 0x30
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b3      	bne.n	8009496 <_strtol_l.isra.0+0x5e>
 800952e:	2308      	movs	r3, #8
 8009530:	e7b1      	b.n	8009496 <_strtol_l.isra.0+0x5e>
 8009532:	2c30      	cmp	r4, #48	; 0x30
 8009534:	d0a4      	beq.n	8009480 <_strtol_l.isra.0+0x48>
 8009536:	230a      	movs	r3, #10
 8009538:	e7ad      	b.n	8009496 <_strtol_l.isra.0+0x5e>
 800953a:	bf00      	nop
 800953c:	0800c401 	.word	0x0800c401

08009540 <_strtol_r>:
 8009540:	f7ff bf7a 	b.w	8009438 <_strtol_l.isra.0>

08009544 <quorem>:
 8009544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	6903      	ldr	r3, [r0, #16]
 800954a:	690c      	ldr	r4, [r1, #16]
 800954c:	42a3      	cmp	r3, r4
 800954e:	4607      	mov	r7, r0
 8009550:	f2c0 8081 	blt.w	8009656 <quorem+0x112>
 8009554:	3c01      	subs	r4, #1
 8009556:	f101 0814 	add.w	r8, r1, #20
 800955a:	f100 0514 	add.w	r5, r0, #20
 800955e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800956c:	3301      	adds	r3, #1
 800956e:	429a      	cmp	r2, r3
 8009570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009578:	fbb2 f6f3 	udiv	r6, r2, r3
 800957c:	d331      	bcc.n	80095e2 <quorem+0x9e>
 800957e:	f04f 0e00 	mov.w	lr, #0
 8009582:	4640      	mov	r0, r8
 8009584:	46ac      	mov	ip, r5
 8009586:	46f2      	mov	sl, lr
 8009588:	f850 2b04 	ldr.w	r2, [r0], #4
 800958c:	b293      	uxth	r3, r2
 800958e:	fb06 e303 	mla	r3, r6, r3, lr
 8009592:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009596:	b29b      	uxth	r3, r3
 8009598:	ebaa 0303 	sub.w	r3, sl, r3
 800959c:	0c12      	lsrs	r2, r2, #16
 800959e:	f8dc a000 	ldr.w	sl, [ip]
 80095a2:	fb06 e202 	mla	r2, r6, r2, lr
 80095a6:	fa13 f38a 	uxtah	r3, r3, sl
 80095aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095ae:	fa1f fa82 	uxth.w	sl, r2
 80095b2:	f8dc 2000 	ldr.w	r2, [ip]
 80095b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80095ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095c4:	4581      	cmp	r9, r0
 80095c6:	f84c 3b04 	str.w	r3, [ip], #4
 80095ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095ce:	d2db      	bcs.n	8009588 <quorem+0x44>
 80095d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80095d4:	b92b      	cbnz	r3, 80095e2 <quorem+0x9e>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	3b04      	subs	r3, #4
 80095da:	429d      	cmp	r5, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	d32e      	bcc.n	800963e <quorem+0xfa>
 80095e0:	613c      	str	r4, [r7, #16]
 80095e2:	4638      	mov	r0, r7
 80095e4:	f001 fc8c 	bl	800af00 <__mcmp>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	db24      	blt.n	8009636 <quorem+0xf2>
 80095ec:	3601      	adds	r6, #1
 80095ee:	4628      	mov	r0, r5
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80095f8:	f8d0 e000 	ldr.w	lr, [r0]
 80095fc:	b293      	uxth	r3, r2
 80095fe:	ebac 0303 	sub.w	r3, ip, r3
 8009602:	0c12      	lsrs	r2, r2, #16
 8009604:	fa13 f38e 	uxtah	r3, r3, lr
 8009608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800960c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009610:	b29b      	uxth	r3, r3
 8009612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009616:	45c1      	cmp	r9, r8
 8009618:	f840 3b04 	str.w	r3, [r0], #4
 800961c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009620:	d2e8      	bcs.n	80095f4 <quorem+0xb0>
 8009622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800962a:	b922      	cbnz	r2, 8009636 <quorem+0xf2>
 800962c:	3b04      	subs	r3, #4
 800962e:	429d      	cmp	r5, r3
 8009630:	461a      	mov	r2, r3
 8009632:	d30a      	bcc.n	800964a <quorem+0x106>
 8009634:	613c      	str	r4, [r7, #16]
 8009636:	4630      	mov	r0, r6
 8009638:	b003      	add	sp, #12
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	3b04      	subs	r3, #4
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1cc      	bne.n	80095e0 <quorem+0x9c>
 8009646:	3c01      	subs	r4, #1
 8009648:	e7c7      	b.n	80095da <quorem+0x96>
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	3b04      	subs	r3, #4
 800964e:	2a00      	cmp	r2, #0
 8009650:	d1f0      	bne.n	8009634 <quorem+0xf0>
 8009652:	3c01      	subs	r4, #1
 8009654:	e7eb      	b.n	800962e <quorem+0xea>
 8009656:	2000      	movs	r0, #0
 8009658:	e7ee      	b.n	8009638 <quorem+0xf4>
 800965a:	0000      	movs	r0, r0
 800965c:	0000      	movs	r0, r0
	...

08009660 <_dtoa_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	ed2d 8b02 	vpush	{d8}
 8009668:	ec57 6b10 	vmov	r6, r7, d0
 800966c:	b095      	sub	sp, #84	; 0x54
 800966e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009674:	9105      	str	r1, [sp, #20]
 8009676:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800967a:	4604      	mov	r4, r0
 800967c:	9209      	str	r2, [sp, #36]	; 0x24
 800967e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009680:	b975      	cbnz	r5, 80096a0 <_dtoa_r+0x40>
 8009682:	2010      	movs	r0, #16
 8009684:	f001 f94c 	bl	800a920 <malloc>
 8009688:	4602      	mov	r2, r0
 800968a:	6260      	str	r0, [r4, #36]	; 0x24
 800968c:	b920      	cbnz	r0, 8009698 <_dtoa_r+0x38>
 800968e:	4bb2      	ldr	r3, [pc, #712]	; (8009958 <_dtoa_r+0x2f8>)
 8009690:	21ea      	movs	r1, #234	; 0xea
 8009692:	48b2      	ldr	r0, [pc, #712]	; (800995c <_dtoa_r+0x2fc>)
 8009694:	f002 f874 	bl	800b780 <__assert_func>
 8009698:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800969c:	6005      	str	r5, [r0, #0]
 800969e:	60c5      	str	r5, [r0, #12]
 80096a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	b151      	cbz	r1, 80096bc <_dtoa_r+0x5c>
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	604a      	str	r2, [r1, #4]
 80096aa:	2301      	movs	r3, #1
 80096ac:	4093      	lsls	r3, r2
 80096ae:	608b      	str	r3, [r1, #8]
 80096b0:	4620      	mov	r0, r4
 80096b2:	f001 f99d 	bl	800a9f0 <_Bfree>
 80096b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	1e3b      	subs	r3, r7, #0
 80096be:	bfb9      	ittee	lt
 80096c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096c4:	9303      	strlt	r3, [sp, #12]
 80096c6:	2300      	movge	r3, #0
 80096c8:	f8c8 3000 	strge.w	r3, [r8]
 80096cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80096d0:	4ba3      	ldr	r3, [pc, #652]	; (8009960 <_dtoa_r+0x300>)
 80096d2:	bfbc      	itt	lt
 80096d4:	2201      	movlt	r2, #1
 80096d6:	f8c8 2000 	strlt.w	r2, [r8]
 80096da:	ea33 0309 	bics.w	r3, r3, r9
 80096de:	d11b      	bne.n	8009718 <_dtoa_r+0xb8>
 80096e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096ec:	4333      	orrs	r3, r6
 80096ee:	f000 857a 	beq.w	800a1e6 <_dtoa_r+0xb86>
 80096f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f4:	b963      	cbnz	r3, 8009710 <_dtoa_r+0xb0>
 80096f6:	4b9b      	ldr	r3, [pc, #620]	; (8009964 <_dtoa_r+0x304>)
 80096f8:	e024      	b.n	8009744 <_dtoa_r+0xe4>
 80096fa:	4b9b      	ldr	r3, [pc, #620]	; (8009968 <_dtoa_r+0x308>)
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	9800      	ldr	r0, [sp, #0]
 8009706:	b015      	add	sp, #84	; 0x54
 8009708:	ecbd 8b02 	vpop	{d8}
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009710:	4b94      	ldr	r3, [pc, #592]	; (8009964 <_dtoa_r+0x304>)
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	3303      	adds	r3, #3
 8009716:	e7f3      	b.n	8009700 <_dtoa_r+0xa0>
 8009718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	ec51 0b17 	vmov	r0, r1, d7
 8009722:	2300      	movs	r3, #0
 8009724:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009728:	f7f7 f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800972c:	4680      	mov	r8, r0
 800972e:	b158      	cbz	r0, 8009748 <_dtoa_r+0xe8>
 8009730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009732:	2301      	movs	r3, #1
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8551 	beq.w	800a1e0 <_dtoa_r+0xb80>
 800973e:	488b      	ldr	r0, [pc, #556]	; (800996c <_dtoa_r+0x30c>)
 8009740:	6018      	str	r0, [r3, #0]
 8009742:	1e43      	subs	r3, r0, #1
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	e7dd      	b.n	8009704 <_dtoa_r+0xa4>
 8009748:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800974c:	aa12      	add	r2, sp, #72	; 0x48
 800974e:	a913      	add	r1, sp, #76	; 0x4c
 8009750:	4620      	mov	r0, r4
 8009752:	f001 fcf5 	bl	800b140 <__d2b>
 8009756:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800975a:	4683      	mov	fp, r0
 800975c:	2d00      	cmp	r5, #0
 800975e:	d07c      	beq.n	800985a <_dtoa_r+0x1fa>
 8009760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009762:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800976a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800976e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009772:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800977a:	4b7d      	ldr	r3, [pc, #500]	; (8009970 <_dtoa_r+0x310>)
 800977c:	2200      	movs	r2, #0
 800977e:	4630      	mov	r0, r6
 8009780:	4639      	mov	r1, r7
 8009782:	f7f6 fda1 	bl	80002c8 <__aeabi_dsub>
 8009786:	a36e      	add	r3, pc, #440	; (adr r3, 8009940 <_dtoa_r+0x2e0>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f6 ff54 	bl	8000638 <__aeabi_dmul>
 8009790:	a36d      	add	r3, pc, #436	; (adr r3, 8009948 <_dtoa_r+0x2e8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd99 	bl	80002cc <__adddf3>
 800979a:	4606      	mov	r6, r0
 800979c:	4628      	mov	r0, r5
 800979e:	460f      	mov	r7, r1
 80097a0:	f7f6 fee0 	bl	8000564 <__aeabi_i2d>
 80097a4:	a36a      	add	r3, pc, #424	; (adr r3, 8009950 <_dtoa_r+0x2f0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 ff45 	bl	8000638 <__aeabi_dmul>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f6 fd89 	bl	80002cc <__adddf3>
 80097ba:	4606      	mov	r6, r0
 80097bc:	460f      	mov	r7, r1
 80097be:	f7f7 f9eb 	bl	8000b98 <__aeabi_d2iz>
 80097c2:	2200      	movs	r2, #0
 80097c4:	4682      	mov	sl, r0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f7 f9a6 	bl	8000b1c <__aeabi_dcmplt>
 80097d0:	b148      	cbz	r0, 80097e6 <_dtoa_r+0x186>
 80097d2:	4650      	mov	r0, sl
 80097d4:	f7f6 fec6 	bl	8000564 <__aeabi_i2d>
 80097d8:	4632      	mov	r2, r6
 80097da:	463b      	mov	r3, r7
 80097dc:	f7f7 f994 	bl	8000b08 <__aeabi_dcmpeq>
 80097e0:	b908      	cbnz	r0, 80097e6 <_dtoa_r+0x186>
 80097e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097e6:	f1ba 0f16 	cmp.w	sl, #22
 80097ea:	d854      	bhi.n	8009896 <_dtoa_r+0x236>
 80097ec:	4b61      	ldr	r3, [pc, #388]	; (8009974 <_dtoa_r+0x314>)
 80097ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097fa:	f7f7 f98f 	bl	8000b1c <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d04b      	beq.n	800989a <_dtoa_r+0x23a>
 8009802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009806:	2300      	movs	r3, #0
 8009808:	930e      	str	r3, [sp, #56]	; 0x38
 800980a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800980c:	1b5d      	subs	r5, r3, r5
 800980e:	1e6b      	subs	r3, r5, #1
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	bf43      	ittte	mi
 8009814:	2300      	movmi	r3, #0
 8009816:	f1c5 0801 	rsbmi	r8, r5, #1
 800981a:	9304      	strmi	r3, [sp, #16]
 800981c:	f04f 0800 	movpl.w	r8, #0
 8009820:	f1ba 0f00 	cmp.w	sl, #0
 8009824:	db3b      	blt.n	800989e <_dtoa_r+0x23e>
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800982c:	4453      	add	r3, sl
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	2300      	movs	r3, #0
 8009832:	9306      	str	r3, [sp, #24]
 8009834:	9b05      	ldr	r3, [sp, #20]
 8009836:	2b09      	cmp	r3, #9
 8009838:	d869      	bhi.n	800990e <_dtoa_r+0x2ae>
 800983a:	2b05      	cmp	r3, #5
 800983c:	bfc4      	itt	gt
 800983e:	3b04      	subgt	r3, #4
 8009840:	9305      	strgt	r3, [sp, #20]
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	f1a3 0302 	sub.w	r3, r3, #2
 8009848:	bfcc      	ite	gt
 800984a:	2500      	movgt	r5, #0
 800984c:	2501      	movle	r5, #1
 800984e:	2b03      	cmp	r3, #3
 8009850:	d869      	bhi.n	8009926 <_dtoa_r+0x2c6>
 8009852:	e8df f003 	tbb	[pc, r3]
 8009856:	4e2c      	.short	0x4e2c
 8009858:	5a4c      	.short	0x5a4c
 800985a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800985e:	441d      	add	r5, r3
 8009860:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009864:	2b20      	cmp	r3, #32
 8009866:	bfc1      	itttt	gt
 8009868:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800986c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009870:	fa09 f303 	lslgt.w	r3, r9, r3
 8009874:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009878:	bfda      	itte	le
 800987a:	f1c3 0320 	rsble	r3, r3, #32
 800987e:	fa06 f003 	lslle.w	r0, r6, r3
 8009882:	4318      	orrgt	r0, r3
 8009884:	f7f6 fe5e 	bl	8000544 <__aeabi_ui2d>
 8009888:	2301      	movs	r3, #1
 800988a:	4606      	mov	r6, r0
 800988c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009890:	3d01      	subs	r5, #1
 8009892:	9310      	str	r3, [sp, #64]	; 0x40
 8009894:	e771      	b.n	800977a <_dtoa_r+0x11a>
 8009896:	2301      	movs	r3, #1
 8009898:	e7b6      	b.n	8009808 <_dtoa_r+0x1a8>
 800989a:	900e      	str	r0, [sp, #56]	; 0x38
 800989c:	e7b5      	b.n	800980a <_dtoa_r+0x1aa>
 800989e:	f1ca 0300 	rsb	r3, sl, #0
 80098a2:	9306      	str	r3, [sp, #24]
 80098a4:	2300      	movs	r3, #0
 80098a6:	eba8 080a 	sub.w	r8, r8, sl
 80098aa:	930d      	str	r3, [sp, #52]	; 0x34
 80098ac:	e7c2      	b.n	8009834 <_dtoa_r+0x1d4>
 80098ae:	2300      	movs	r3, #0
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dc39      	bgt.n	800992c <_dtoa_r+0x2cc>
 80098b8:	f04f 0901 	mov.w	r9, #1
 80098bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80098c0:	464b      	mov	r3, r9
 80098c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80098c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098c8:	2200      	movs	r2, #0
 80098ca:	6042      	str	r2, [r0, #4]
 80098cc:	2204      	movs	r2, #4
 80098ce:	f102 0614 	add.w	r6, r2, #20
 80098d2:	429e      	cmp	r6, r3
 80098d4:	6841      	ldr	r1, [r0, #4]
 80098d6:	d92f      	bls.n	8009938 <_dtoa_r+0x2d8>
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 f849 	bl	800a970 <_Balloc>
 80098de:	9000      	str	r0, [sp, #0]
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d14b      	bne.n	800997c <_dtoa_r+0x31c>
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <_dtoa_r+0x318>)
 80098e6:	4602      	mov	r2, r0
 80098e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80098ec:	e6d1      	b.n	8009692 <_dtoa_r+0x32>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e7de      	b.n	80098b0 <_dtoa_r+0x250>
 80098f2:	2300      	movs	r3, #0
 80098f4:	9308      	str	r3, [sp, #32]
 80098f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f8:	eb0a 0903 	add.w	r9, sl, r3
 80098fc:	f109 0301 	add.w	r3, r9, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	bfb8      	it	lt
 8009906:	2301      	movlt	r3, #1
 8009908:	e7dd      	b.n	80098c6 <_dtoa_r+0x266>
 800990a:	2301      	movs	r3, #1
 800990c:	e7f2      	b.n	80098f4 <_dtoa_r+0x294>
 800990e:	2501      	movs	r5, #1
 8009910:	2300      	movs	r3, #0
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	9508      	str	r5, [sp, #32]
 8009916:	f04f 39ff 	mov.w	r9, #4294967295
 800991a:	2200      	movs	r2, #0
 800991c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009920:	2312      	movs	r3, #18
 8009922:	9209      	str	r2, [sp, #36]	; 0x24
 8009924:	e7cf      	b.n	80098c6 <_dtoa_r+0x266>
 8009926:	2301      	movs	r3, #1
 8009928:	9308      	str	r3, [sp, #32]
 800992a:	e7f4      	b.n	8009916 <_dtoa_r+0x2b6>
 800992c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009930:	f8cd 9004 	str.w	r9, [sp, #4]
 8009934:	464b      	mov	r3, r9
 8009936:	e7c6      	b.n	80098c6 <_dtoa_r+0x266>
 8009938:	3101      	adds	r1, #1
 800993a:	6041      	str	r1, [r0, #4]
 800993c:	0052      	lsls	r2, r2, #1
 800993e:	e7c6      	b.n	80098ce <_dtoa_r+0x26e>
 8009940:	636f4361 	.word	0x636f4361
 8009944:	3fd287a7 	.word	0x3fd287a7
 8009948:	8b60c8b3 	.word	0x8b60c8b3
 800994c:	3fc68a28 	.word	0x3fc68a28
 8009950:	509f79fb 	.word	0x509f79fb
 8009954:	3fd34413 	.word	0x3fd34413
 8009958:	0800c50e 	.word	0x0800c50e
 800995c:	0800c525 	.word	0x0800c525
 8009960:	7ff00000 	.word	0x7ff00000
 8009964:	0800c50a 	.word	0x0800c50a
 8009968:	0800c501 	.word	0x0800c501
 800996c:	0800c385 	.word	0x0800c385
 8009970:	3ff80000 	.word	0x3ff80000
 8009974:	0800c6a0 	.word	0x0800c6a0
 8009978:	0800c584 	.word	0x0800c584
 800997c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997e:	9a00      	ldr	r2, [sp, #0]
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	9b01      	ldr	r3, [sp, #4]
 8009984:	2b0e      	cmp	r3, #14
 8009986:	f200 80ad 	bhi.w	8009ae4 <_dtoa_r+0x484>
 800998a:	2d00      	cmp	r5, #0
 800998c:	f000 80aa 	beq.w	8009ae4 <_dtoa_r+0x484>
 8009990:	f1ba 0f00 	cmp.w	sl, #0
 8009994:	dd36      	ble.n	8009a04 <_dtoa_r+0x3a4>
 8009996:	4ac3      	ldr	r2, [pc, #780]	; (8009ca4 <_dtoa_r+0x644>)
 8009998:	f00a 030f 	and.w	r3, sl, #15
 800999c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099a0:	ed93 7b00 	vldr	d7, [r3]
 80099a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80099a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80099ac:	eeb0 8a47 	vmov.f32	s16, s14
 80099b0:	eef0 8a67 	vmov.f32	s17, s15
 80099b4:	d016      	beq.n	80099e4 <_dtoa_r+0x384>
 80099b6:	4bbc      	ldr	r3, [pc, #752]	; (8009ca8 <_dtoa_r+0x648>)
 80099b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099c0:	f7f6 ff64 	bl	800088c <__aeabi_ddiv>
 80099c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c8:	f007 070f 	and.w	r7, r7, #15
 80099cc:	2503      	movs	r5, #3
 80099ce:	4eb6      	ldr	r6, [pc, #728]	; (8009ca8 <_dtoa_r+0x648>)
 80099d0:	b957      	cbnz	r7, 80099e8 <_dtoa_r+0x388>
 80099d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d6:	ec53 2b18 	vmov	r2, r3, d8
 80099da:	f7f6 ff57 	bl	800088c <__aeabi_ddiv>
 80099de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e2:	e029      	b.n	8009a38 <_dtoa_r+0x3d8>
 80099e4:	2502      	movs	r5, #2
 80099e6:	e7f2      	b.n	80099ce <_dtoa_r+0x36e>
 80099e8:	07f9      	lsls	r1, r7, #31
 80099ea:	d508      	bpl.n	80099fe <_dtoa_r+0x39e>
 80099ec:	ec51 0b18 	vmov	r0, r1, d8
 80099f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099f4:	f7f6 fe20 	bl	8000638 <__aeabi_dmul>
 80099f8:	ec41 0b18 	vmov	d8, r0, r1
 80099fc:	3501      	adds	r5, #1
 80099fe:	107f      	asrs	r7, r7, #1
 8009a00:	3608      	adds	r6, #8
 8009a02:	e7e5      	b.n	80099d0 <_dtoa_r+0x370>
 8009a04:	f000 80a6 	beq.w	8009b54 <_dtoa_r+0x4f4>
 8009a08:	f1ca 0600 	rsb	r6, sl, #0
 8009a0c:	4ba5      	ldr	r3, [pc, #660]	; (8009ca4 <_dtoa_r+0x644>)
 8009a0e:	4fa6      	ldr	r7, [pc, #664]	; (8009ca8 <_dtoa_r+0x648>)
 8009a10:	f006 020f 	and.w	r2, r6, #15
 8009a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a20:	f7f6 fe0a 	bl	8000638 <__aeabi_dmul>
 8009a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a28:	1136      	asrs	r6, r6, #4
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	2502      	movs	r5, #2
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	f040 8085 	bne.w	8009b3e <_dtoa_r+0x4de>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1d2      	bne.n	80099de <_dtoa_r+0x37e>
 8009a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 808c 	beq.w	8009b58 <_dtoa_r+0x4f8>
 8009a40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a44:	4b99      	ldr	r3, [pc, #612]	; (8009cac <_dtoa_r+0x64c>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	4630      	mov	r0, r6
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f7f7 f866 	bl	8000b1c <__aeabi_dcmplt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f000 8081 	beq.w	8009b58 <_dtoa_r+0x4f8>
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d07d      	beq.n	8009b58 <_dtoa_r+0x4f8>
 8009a5c:	f1b9 0f00 	cmp.w	r9, #0
 8009a60:	dd3c      	ble.n	8009adc <_dtoa_r+0x47c>
 8009a62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4b91      	ldr	r3, [pc, #580]	; (8009cb0 <_dtoa_r+0x650>)
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7f6 fde2 	bl	8000638 <__aeabi_dmul>
 8009a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a78:	3501      	adds	r5, #1
 8009a7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009a7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a82:	4628      	mov	r0, r5
 8009a84:	f7f6 fd6e 	bl	8000564 <__aeabi_i2d>
 8009a88:	4632      	mov	r2, r6
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	f7f6 fdd4 	bl	8000638 <__aeabi_dmul>
 8009a90:	4b88      	ldr	r3, [pc, #544]	; (8009cb4 <_dtoa_r+0x654>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	f7f6 fc1a 	bl	80002cc <__adddf3>
 8009a98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa0:	9303      	str	r3, [sp, #12]
 8009aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d15c      	bne.n	8009b62 <_dtoa_r+0x502>
 8009aa8:	4b83      	ldr	r3, [pc, #524]	; (8009cb8 <_dtoa_r+0x658>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f7f6 fc0a 	bl	80002c8 <__aeabi_dsub>
 8009ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab8:	4606      	mov	r6, r0
 8009aba:	460f      	mov	r7, r1
 8009abc:	f7f7 f84c 	bl	8000b58 <__aeabi_dcmpgt>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	f040 8296 	bne.w	8009ff2 <_dtoa_r+0x992>
 8009ac6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009aca:	4630      	mov	r0, r6
 8009acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f7 f823 	bl	8000b1c <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f040 8288 	bne.w	8009fec <_dtoa_r+0x98c>
 8009adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f2c0 8158 	blt.w	8009d9c <_dtoa_r+0x73c>
 8009aec:	f1ba 0f0e 	cmp.w	sl, #14
 8009af0:	f300 8154 	bgt.w	8009d9c <_dtoa_r+0x73c>
 8009af4:	4b6b      	ldr	r3, [pc, #428]	; (8009ca4 <_dtoa_r+0x644>)
 8009af6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009afa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f280 80e3 	bge.w	8009ccc <_dtoa_r+0x66c>
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f300 80df 	bgt.w	8009ccc <_dtoa_r+0x66c>
 8009b0e:	f040 826d 	bne.w	8009fec <_dtoa_r+0x98c>
 8009b12:	4b69      	ldr	r3, [pc, #420]	; (8009cb8 <_dtoa_r+0x658>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	4640      	mov	r0, r8
 8009b18:	4649      	mov	r1, r9
 8009b1a:	f7f6 fd8d 	bl	8000638 <__aeabi_dmul>
 8009b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b22:	f7f7 f80f 	bl	8000b44 <__aeabi_dcmpge>
 8009b26:	9e01      	ldr	r6, [sp, #4]
 8009b28:	4637      	mov	r7, r6
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f040 8243 	bne.w	8009fb6 <_dtoa_r+0x956>
 8009b30:	9d00      	ldr	r5, [sp, #0]
 8009b32:	2331      	movs	r3, #49	; 0x31
 8009b34:	f805 3b01 	strb.w	r3, [r5], #1
 8009b38:	f10a 0a01 	add.w	sl, sl, #1
 8009b3c:	e23f      	b.n	8009fbe <_dtoa_r+0x95e>
 8009b3e:	07f2      	lsls	r2, r6, #31
 8009b40:	d505      	bpl.n	8009b4e <_dtoa_r+0x4ee>
 8009b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b46:	f7f6 fd77 	bl	8000638 <__aeabi_dmul>
 8009b4a:	3501      	adds	r5, #1
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	1076      	asrs	r6, r6, #1
 8009b50:	3708      	adds	r7, #8
 8009b52:	e76c      	b.n	8009a2e <_dtoa_r+0x3ce>
 8009b54:	2502      	movs	r5, #2
 8009b56:	e76f      	b.n	8009a38 <_dtoa_r+0x3d8>
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b60:	e78d      	b.n	8009a7e <_dtoa_r+0x41e>
 8009b62:	9900      	ldr	r1, [sp, #0]
 8009b64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b68:	4b4e      	ldr	r3, [pc, #312]	; (8009ca4 <_dtoa_r+0x644>)
 8009b6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b6e:	4401      	add	r1, r0
 8009b70:	9102      	str	r1, [sp, #8]
 8009b72:	9908      	ldr	r1, [sp, #32]
 8009b74:	eeb0 8a47 	vmov.f32	s16, s14
 8009b78:	eef0 8a67 	vmov.f32	s17, s15
 8009b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d045      	beq.n	8009c14 <_dtoa_r+0x5b4>
 8009b88:	494c      	ldr	r1, [pc, #304]	; (8009cbc <_dtoa_r+0x65c>)
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	f7f6 fe7e 	bl	800088c <__aeabi_ddiv>
 8009b90:	ec53 2b18 	vmov	r2, r3, d8
 8009b94:	f7f6 fb98 	bl	80002c8 <__aeabi_dsub>
 8009b98:	9d00      	ldr	r5, [sp, #0]
 8009b9a:	ec41 0b18 	vmov	d8, r0, r1
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7f6 fff9 	bl	8000b98 <__aeabi_d2iz>
 8009ba6:	900c      	str	r0, [sp, #48]	; 0x30
 8009ba8:	f7f6 fcdc 	bl	8000564 <__aeabi_i2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb88 	bl	80002c8 <__aeabi_dsub>
 8009bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bba:	3330      	adds	r3, #48	; 0x30
 8009bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8009bc0:	ec53 2b18 	vmov	r2, r3, d8
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	f7f6 ffa8 	bl	8000b1c <__aeabi_dcmplt>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d165      	bne.n	8009c9c <_dtoa_r+0x63c>
 8009bd0:	4632      	mov	r2, r6
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	4935      	ldr	r1, [pc, #212]	; (8009cac <_dtoa_r+0x64c>)
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	f7f6 fb76 	bl	80002c8 <__aeabi_dsub>
 8009bdc:	ec53 2b18 	vmov	r2, r3, d8
 8009be0:	f7f6 ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f040 80b9 	bne.w	8009d5c <_dtoa_r+0x6fc>
 8009bea:	9b02      	ldr	r3, [sp, #8]
 8009bec:	429d      	cmp	r5, r3
 8009bee:	f43f af75 	beq.w	8009adc <_dtoa_r+0x47c>
 8009bf2:	4b2f      	ldr	r3, [pc, #188]	; (8009cb0 <_dtoa_r+0x650>)
 8009bf4:	ec51 0b18 	vmov	r0, r1, d8
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f7f6 fd1d 	bl	8000638 <__aeabi_dmul>
 8009bfe:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <_dtoa_r+0x650>)
 8009c00:	ec41 0b18 	vmov	d8, r0, r1
 8009c04:	2200      	movs	r2, #0
 8009c06:	4630      	mov	r0, r6
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7f6 fd15 	bl	8000638 <__aeabi_dmul>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	e7c4      	b.n	8009b9e <_dtoa_r+0x53e>
 8009c14:	ec51 0b17 	vmov	r0, r1, d7
 8009c18:	f7f6 fd0e 	bl	8000638 <__aeabi_dmul>
 8009c1c:	9b02      	ldr	r3, [sp, #8]
 8009c1e:	9d00      	ldr	r5, [sp, #0]
 8009c20:	930c      	str	r3, [sp, #48]	; 0x30
 8009c22:	ec41 0b18 	vmov	d8, r0, r1
 8009c26:	4639      	mov	r1, r7
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7f6 ffb5 	bl	8000b98 <__aeabi_d2iz>
 8009c2e:	9011      	str	r0, [sp, #68]	; 0x44
 8009c30:	f7f6 fc98 	bl	8000564 <__aeabi_i2d>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 fb44 	bl	80002c8 <__aeabi_dsub>
 8009c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c42:	3330      	adds	r3, #48	; 0x30
 8009c44:	f805 3b01 	strb.w	r3, [r5], #1
 8009c48:	9b02      	ldr	r3, [sp, #8]
 8009c4a:	429d      	cmp	r5, r3
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	d134      	bne.n	8009cc0 <_dtoa_r+0x660>
 8009c56:	4b19      	ldr	r3, [pc, #100]	; (8009cbc <_dtoa_r+0x65c>)
 8009c58:	ec51 0b18 	vmov	r0, r1, d8
 8009c5c:	f7f6 fb36 	bl	80002cc <__adddf3>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 ff76 	bl	8000b58 <__aeabi_dcmpgt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d175      	bne.n	8009d5c <_dtoa_r+0x6fc>
 8009c70:	ec53 2b18 	vmov	r2, r3, d8
 8009c74:	4911      	ldr	r1, [pc, #68]	; (8009cbc <_dtoa_r+0x65c>)
 8009c76:	2000      	movs	r0, #0
 8009c78:	f7f6 fb26 	bl	80002c8 <__aeabi_dsub>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 ff4a 	bl	8000b1c <__aeabi_dcmplt>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f43f af27 	beq.w	8009adc <_dtoa_r+0x47c>
 8009c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c90:	1e6b      	subs	r3, r5, #1
 8009c92:	930c      	str	r3, [sp, #48]	; 0x30
 8009c94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c98:	2b30      	cmp	r3, #48	; 0x30
 8009c9a:	d0f8      	beq.n	8009c8e <_dtoa_r+0x62e>
 8009c9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ca0:	e04a      	b.n	8009d38 <_dtoa_r+0x6d8>
 8009ca2:	bf00      	nop
 8009ca4:	0800c6a0 	.word	0x0800c6a0
 8009ca8:	0800c678 	.word	0x0800c678
 8009cac:	3ff00000 	.word	0x3ff00000
 8009cb0:	40240000 	.word	0x40240000
 8009cb4:	401c0000 	.word	0x401c0000
 8009cb8:	40140000 	.word	0x40140000
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	4baf      	ldr	r3, [pc, #700]	; (8009f80 <_dtoa_r+0x920>)
 8009cc2:	f7f6 fcb9 	bl	8000638 <__aeabi_dmul>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	e7ac      	b.n	8009c26 <_dtoa_r+0x5c6>
 8009ccc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cd0:	9d00      	ldr	r5, [sp, #0]
 8009cd2:	4642      	mov	r2, r8
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	f7f6 fdd7 	bl	800088c <__aeabi_ddiv>
 8009cde:	f7f6 ff5b 	bl	8000b98 <__aeabi_d2iz>
 8009ce2:	9002      	str	r0, [sp, #8]
 8009ce4:	f7f6 fc3e 	bl	8000564 <__aeabi_i2d>
 8009ce8:	4642      	mov	r2, r8
 8009cea:	464b      	mov	r3, r9
 8009cec:	f7f6 fca4 	bl	8000638 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fae6 	bl	80002c8 <__aeabi_dsub>
 8009cfc:	9e02      	ldr	r6, [sp, #8]
 8009cfe:	9f01      	ldr	r7, [sp, #4]
 8009d00:	3630      	adds	r6, #48	; 0x30
 8009d02:	f805 6b01 	strb.w	r6, [r5], #1
 8009d06:	9e00      	ldr	r6, [sp, #0]
 8009d08:	1bae      	subs	r6, r5, r6
 8009d0a:	42b7      	cmp	r7, r6
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	d137      	bne.n	8009d82 <_dtoa_r+0x722>
 8009d12:	f7f6 fadb 	bl	80002cc <__adddf3>
 8009d16:	4642      	mov	r2, r8
 8009d18:	464b      	mov	r3, r9
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	f7f6 ff1b 	bl	8000b58 <__aeabi_dcmpgt>
 8009d22:	b9c8      	cbnz	r0, 8009d58 <_dtoa_r+0x6f8>
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 feec 	bl	8000b08 <__aeabi_dcmpeq>
 8009d30:	b110      	cbz	r0, 8009d38 <_dtoa_r+0x6d8>
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	07d9      	lsls	r1, r3, #31
 8009d36:	d40f      	bmi.n	8009d58 <_dtoa_r+0x6f8>
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	f000 fe58 	bl	800a9f0 <_Bfree>
 8009d40:	2300      	movs	r3, #0
 8009d42:	702b      	strb	r3, [r5, #0]
 8009d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d46:	f10a 0001 	add.w	r0, sl, #1
 8009d4a:	6018      	str	r0, [r3, #0]
 8009d4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f43f acd8 	beq.w	8009704 <_dtoa_r+0xa4>
 8009d54:	601d      	str	r5, [r3, #0]
 8009d56:	e4d5      	b.n	8009704 <_dtoa_r+0xa4>
 8009d58:	f8cd a01c 	str.w	sl, [sp, #28]
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	461d      	mov	r5, r3
 8009d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d64:	2a39      	cmp	r2, #57	; 0x39
 8009d66:	d108      	bne.n	8009d7a <_dtoa_r+0x71a>
 8009d68:	9a00      	ldr	r2, [sp, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d1f7      	bne.n	8009d5e <_dtoa_r+0x6fe>
 8009d6e:	9a07      	ldr	r2, [sp, #28]
 8009d70:	9900      	ldr	r1, [sp, #0]
 8009d72:	3201      	adds	r2, #1
 8009d74:	9207      	str	r2, [sp, #28]
 8009d76:	2230      	movs	r2, #48	; 0x30
 8009d78:	700a      	strb	r2, [r1, #0]
 8009d7a:	781a      	ldrb	r2, [r3, #0]
 8009d7c:	3201      	adds	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e78c      	b.n	8009c9c <_dtoa_r+0x63c>
 8009d82:	4b7f      	ldr	r3, [pc, #508]	; (8009f80 <_dtoa_r+0x920>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	f7f6 fc57 	bl	8000638 <__aeabi_dmul>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	f7f6 feb9 	bl	8000b08 <__aeabi_dcmpeq>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d09b      	beq.n	8009cd2 <_dtoa_r+0x672>
 8009d9a:	e7cd      	b.n	8009d38 <_dtoa_r+0x6d8>
 8009d9c:	9a08      	ldr	r2, [sp, #32]
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	f000 80c4 	beq.w	8009f2c <_dtoa_r+0x8cc>
 8009da4:	9a05      	ldr	r2, [sp, #20]
 8009da6:	2a01      	cmp	r2, #1
 8009da8:	f300 80a8 	bgt.w	8009efc <_dtoa_r+0x89c>
 8009dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	f000 80a0 	beq.w	8009ef4 <_dtoa_r+0x894>
 8009db4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009db8:	9e06      	ldr	r6, [sp, #24]
 8009dba:	4645      	mov	r5, r8
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	441a      	add	r2, r3
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4498      	add	r8, r3
 8009dc6:	9204      	str	r2, [sp, #16]
 8009dc8:	f000 ff18 	bl	800abfc <__i2b>
 8009dcc:	4607      	mov	r7, r0
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	dd0b      	ble.n	8009dea <_dtoa_r+0x78a>
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dd08      	ble.n	8009dea <_dtoa_r+0x78a>
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	9a04      	ldr	r2, [sp, #16]
 8009ddc:	bfa8      	it	ge
 8009dde:	462b      	movge	r3, r5
 8009de0:	eba8 0803 	sub.w	r8, r8, r3
 8009de4:	1aed      	subs	r5, r5, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	9b06      	ldr	r3, [sp, #24]
 8009dec:	b1fb      	cbz	r3, 8009e2e <_dtoa_r+0x7ce>
 8009dee:	9b08      	ldr	r3, [sp, #32]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 809f 	beq.w	8009f34 <_dtoa_r+0x8d4>
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	dd11      	ble.n	8009e1e <_dtoa_r+0x7be>
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 ffb8 	bl	800ad74 <__pow5mult>
 8009e04:	465a      	mov	r2, fp
 8009e06:	4601      	mov	r1, r0
 8009e08:	4607      	mov	r7, r0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 ff0c 	bl	800ac28 <__multiply>
 8009e10:	4659      	mov	r1, fp
 8009e12:	9007      	str	r0, [sp, #28]
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fdeb 	bl	800a9f0 <_Bfree>
 8009e1a:	9b07      	ldr	r3, [sp, #28]
 8009e1c:	469b      	mov	fp, r3
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	1b9a      	subs	r2, r3, r6
 8009e22:	d004      	beq.n	8009e2e <_dtoa_r+0x7ce>
 8009e24:	4659      	mov	r1, fp
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 ffa4 	bl	800ad74 <__pow5mult>
 8009e2c:	4683      	mov	fp, r0
 8009e2e:	2101      	movs	r1, #1
 8009e30:	4620      	mov	r0, r4
 8009e32:	f000 fee3 	bl	800abfc <__i2b>
 8009e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	dd7c      	ble.n	8009f38 <_dtoa_r+0x8d8>
 8009e3e:	461a      	mov	r2, r3
 8009e40:	4601      	mov	r1, r0
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 ff96 	bl	800ad74 <__pow5mult>
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	dd76      	ble.n	8009f3e <_dtoa_r+0x8de>
 8009e50:	2300      	movs	r3, #0
 8009e52:	9306      	str	r3, [sp, #24]
 8009e54:	6933      	ldr	r3, [r6, #16]
 8009e56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e5a:	6918      	ldr	r0, [r3, #16]
 8009e5c:	f000 fe7e 	bl	800ab5c <__hi0bits>
 8009e60:	f1c0 0020 	rsb	r0, r0, #32
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	4418      	add	r0, r3
 8009e68:	f010 001f 	ands.w	r0, r0, #31
 8009e6c:	f000 8086 	beq.w	8009f7c <_dtoa_r+0x91c>
 8009e70:	f1c0 0320 	rsb	r3, r0, #32
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	dd7f      	ble.n	8009f78 <_dtoa_r+0x918>
 8009e78:	f1c0 001c 	rsb	r0, r0, #28
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	4403      	add	r3, r0
 8009e80:	4480      	add	r8, r0
 8009e82:	4405      	add	r5, r0
 8009e84:	9304      	str	r3, [sp, #16]
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	dd05      	ble.n	8009e98 <_dtoa_r+0x838>
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	4642      	mov	r2, r8
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 ffc9 	bl	800ae28 <__lshift>
 8009e96:	4683      	mov	fp, r0
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dd05      	ble.n	8009eaa <_dtoa_r+0x84a>
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 ffc0 	bl	800ae28 <__lshift>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d069      	beq.n	8009f84 <_dtoa_r+0x924>
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4658      	mov	r0, fp
 8009eb4:	f001 f824 	bl	800af00 <__mcmp>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	da63      	bge.n	8009f84 <_dtoa_r+0x924>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4659      	mov	r1, fp
 8009ec0:	220a      	movs	r2, #10
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 fdb6 	bl	800aa34 <__multadd>
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ece:	4683      	mov	fp, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 818f 	beq.w	800a1f4 <_dtoa_r+0xb94>
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	2300      	movs	r3, #0
 8009eda:	220a      	movs	r2, #10
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 fda9 	bl	800aa34 <__multadd>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	f300 808e 	bgt.w	800a008 <_dtoa_r+0x9a8>
 8009eec:	9b05      	ldr	r3, [sp, #20]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	dc50      	bgt.n	8009f94 <_dtoa_r+0x934>
 8009ef2:	e089      	b.n	800a008 <_dtoa_r+0x9a8>
 8009ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009efa:	e75d      	b.n	8009db8 <_dtoa_r+0x758>
 8009efc:	9b01      	ldr	r3, [sp, #4]
 8009efe:	1e5e      	subs	r6, r3, #1
 8009f00:	9b06      	ldr	r3, [sp, #24]
 8009f02:	42b3      	cmp	r3, r6
 8009f04:	bfbf      	itttt	lt
 8009f06:	9b06      	ldrlt	r3, [sp, #24]
 8009f08:	9606      	strlt	r6, [sp, #24]
 8009f0a:	1af2      	sublt	r2, r6, r3
 8009f0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009f0e:	bfb6      	itet	lt
 8009f10:	189b      	addlt	r3, r3, r2
 8009f12:	1b9e      	subge	r6, r3, r6
 8009f14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	bfb8      	it	lt
 8009f1a:	2600      	movlt	r6, #0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bfb5      	itete	lt
 8009f20:	eba8 0503 	sublt.w	r5, r8, r3
 8009f24:	9b01      	ldrge	r3, [sp, #4]
 8009f26:	2300      	movlt	r3, #0
 8009f28:	4645      	movge	r5, r8
 8009f2a:	e747      	b.n	8009dbc <_dtoa_r+0x75c>
 8009f2c:	9e06      	ldr	r6, [sp, #24]
 8009f2e:	9f08      	ldr	r7, [sp, #32]
 8009f30:	4645      	mov	r5, r8
 8009f32:	e74c      	b.n	8009dce <_dtoa_r+0x76e>
 8009f34:	9a06      	ldr	r2, [sp, #24]
 8009f36:	e775      	b.n	8009e24 <_dtoa_r+0x7c4>
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	dc18      	bgt.n	8009f70 <_dtoa_r+0x910>
 8009f3e:	9b02      	ldr	r3, [sp, #8]
 8009f40:	b9b3      	cbnz	r3, 8009f70 <_dtoa_r+0x910>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f48:	b9a3      	cbnz	r3, 8009f74 <_dtoa_r+0x914>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f50:	0d1b      	lsrs	r3, r3, #20
 8009f52:	051b      	lsls	r3, r3, #20
 8009f54:	b12b      	cbz	r3, 8009f62 <_dtoa_r+0x902>
 8009f56:	9b04      	ldr	r3, [sp, #16]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	f108 0801 	add.w	r8, r8, #1
 8009f60:	2301      	movs	r3, #1
 8009f62:	9306      	str	r3, [sp, #24]
 8009f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f47f af74 	bne.w	8009e54 <_dtoa_r+0x7f4>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	e779      	b.n	8009e64 <_dtoa_r+0x804>
 8009f70:	2300      	movs	r3, #0
 8009f72:	e7f6      	b.n	8009f62 <_dtoa_r+0x902>
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	e7f4      	b.n	8009f62 <_dtoa_r+0x902>
 8009f78:	d085      	beq.n	8009e86 <_dtoa_r+0x826>
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	301c      	adds	r0, #28
 8009f7e:	e77d      	b.n	8009e7c <_dtoa_r+0x81c>
 8009f80:	40240000 	.word	0x40240000
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dc38      	bgt.n	8009ffc <_dtoa_r+0x99c>
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	dd35      	ble.n	8009ffc <_dtoa_r+0x99c>
 8009f90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	d10d      	bne.n	8009fb6 <_dtoa_r+0x956>
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	2205      	movs	r2, #5
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fd47 	bl	800aa34 <__multadd>
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	4606      	mov	r6, r0
 8009faa:	4658      	mov	r0, fp
 8009fac:	f000 ffa8 	bl	800af00 <__mcmp>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f73f adbd 	bgt.w	8009b30 <_dtoa_r+0x4d0>
 8009fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb8:	9d00      	ldr	r5, [sp, #0]
 8009fba:	ea6f 0a03 	mvn.w	sl, r3
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fd13 	bl	800a9f0 <_Bfree>
 8009fca:	2f00      	cmp	r7, #0
 8009fcc:	f43f aeb4 	beq.w	8009d38 <_dtoa_r+0x6d8>
 8009fd0:	f1b8 0f00 	cmp.w	r8, #0
 8009fd4:	d005      	beq.n	8009fe2 <_dtoa_r+0x982>
 8009fd6:	45b8      	cmp	r8, r7
 8009fd8:	d003      	beq.n	8009fe2 <_dtoa_r+0x982>
 8009fda:	4641      	mov	r1, r8
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fd07 	bl	800a9f0 <_Bfree>
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fd03 	bl	800a9f0 <_Bfree>
 8009fea:	e6a5      	b.n	8009d38 <_dtoa_r+0x6d8>
 8009fec:	2600      	movs	r6, #0
 8009fee:	4637      	mov	r7, r6
 8009ff0:	e7e1      	b.n	8009fb6 <_dtoa_r+0x956>
 8009ff2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009ff4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ff8:	4637      	mov	r7, r6
 8009ffa:	e599      	b.n	8009b30 <_dtoa_r+0x4d0>
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80fd 	beq.w	800a202 <_dtoa_r+0xba2>
 800a008:	2d00      	cmp	r5, #0
 800a00a:	dd05      	ble.n	800a018 <_dtoa_r+0x9b8>
 800a00c:	4639      	mov	r1, r7
 800a00e:	462a      	mov	r2, r5
 800a010:	4620      	mov	r0, r4
 800a012:	f000 ff09 	bl	800ae28 <__lshift>
 800a016:	4607      	mov	r7, r0
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d05c      	beq.n	800a0d8 <_dtoa_r+0xa78>
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fca5 	bl	800a970 <_Balloc>
 800a026:	4605      	mov	r5, r0
 800a028:	b928      	cbnz	r0, 800a036 <_dtoa_r+0x9d6>
 800a02a:	4b80      	ldr	r3, [pc, #512]	; (800a22c <_dtoa_r+0xbcc>)
 800a02c:	4602      	mov	r2, r0
 800a02e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a032:	f7ff bb2e 	b.w	8009692 <_dtoa_r+0x32>
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	3202      	adds	r2, #2
 800a03a:	0092      	lsls	r2, r2, #2
 800a03c:	f107 010c 	add.w	r1, r7, #12
 800a040:	300c      	adds	r0, #12
 800a042:	f000 fc87 	bl	800a954 <memcpy>
 800a046:	2201      	movs	r2, #1
 800a048:	4629      	mov	r1, r5
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 feec 	bl	800ae28 <__lshift>
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	444b      	add	r3, r9
 800a05a:	9307      	str	r3, [sp, #28]
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	46b8      	mov	r8, r7
 800a064:	9306      	str	r3, [sp, #24]
 800a066:	4607      	mov	r7, r0
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	4631      	mov	r1, r6
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4658      	mov	r0, fp
 800a070:	9302      	str	r3, [sp, #8]
 800a072:	f7ff fa67 	bl	8009544 <quorem>
 800a076:	4603      	mov	r3, r0
 800a078:	3330      	adds	r3, #48	; 0x30
 800a07a:	9004      	str	r0, [sp, #16]
 800a07c:	4641      	mov	r1, r8
 800a07e:	4658      	mov	r0, fp
 800a080:	9308      	str	r3, [sp, #32]
 800a082:	f000 ff3d 	bl	800af00 <__mcmp>
 800a086:	463a      	mov	r2, r7
 800a088:	4681      	mov	r9, r0
 800a08a:	4631      	mov	r1, r6
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 ff53 	bl	800af38 <__mdiff>
 800a092:	68c2      	ldr	r2, [r0, #12]
 800a094:	9b08      	ldr	r3, [sp, #32]
 800a096:	4605      	mov	r5, r0
 800a098:	bb02      	cbnz	r2, 800a0dc <_dtoa_r+0xa7c>
 800a09a:	4601      	mov	r1, r0
 800a09c:	4658      	mov	r0, fp
 800a09e:	f000 ff2f 	bl	800af00 <__mcmp>
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a0ae:	f000 fc9f 	bl	800a9f0 <_Bfree>
 800a0b2:	9b05      	ldr	r3, [sp, #20]
 800a0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b6:	9d01      	ldr	r5, [sp, #4]
 800a0b8:	ea43 0102 	orr.w	r1, r3, r2
 800a0bc:	9b06      	ldr	r3, [sp, #24]
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	d10d      	bne.n	800a0e0 <_dtoa_r+0xa80>
 800a0c4:	2b39      	cmp	r3, #57	; 0x39
 800a0c6:	d029      	beq.n	800a11c <_dtoa_r+0xabc>
 800a0c8:	f1b9 0f00 	cmp.w	r9, #0
 800a0cc:	dd01      	ble.n	800a0d2 <_dtoa_r+0xa72>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	3331      	adds	r3, #49	; 0x31
 800a0d2:	9a02      	ldr	r2, [sp, #8]
 800a0d4:	7013      	strb	r3, [r2, #0]
 800a0d6:	e774      	b.n	8009fc2 <_dtoa_r+0x962>
 800a0d8:	4638      	mov	r0, r7
 800a0da:	e7b9      	b.n	800a050 <_dtoa_r+0x9f0>
 800a0dc:	2201      	movs	r2, #1
 800a0de:	e7e2      	b.n	800a0a6 <_dtoa_r+0xa46>
 800a0e0:	f1b9 0f00 	cmp.w	r9, #0
 800a0e4:	db06      	blt.n	800a0f4 <_dtoa_r+0xa94>
 800a0e6:	9905      	ldr	r1, [sp, #20]
 800a0e8:	ea41 0909 	orr.w	r9, r1, r9
 800a0ec:	9906      	ldr	r1, [sp, #24]
 800a0ee:	ea59 0101 	orrs.w	r1, r9, r1
 800a0f2:	d120      	bne.n	800a136 <_dtoa_r+0xad6>
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	ddec      	ble.n	800a0d2 <_dtoa_r+0xa72>
 800a0f8:	4659      	mov	r1, fp
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	f000 fe92 	bl	800ae28 <__lshift>
 800a104:	4631      	mov	r1, r6
 800a106:	4683      	mov	fp, r0
 800a108:	f000 fefa 	bl	800af00 <__mcmp>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	dc02      	bgt.n	800a118 <_dtoa_r+0xab8>
 800a112:	d1de      	bne.n	800a0d2 <_dtoa_r+0xa72>
 800a114:	07da      	lsls	r2, r3, #31
 800a116:	d5dc      	bpl.n	800a0d2 <_dtoa_r+0xa72>
 800a118:	2b39      	cmp	r3, #57	; 0x39
 800a11a:	d1d8      	bne.n	800a0ce <_dtoa_r+0xa6e>
 800a11c:	9a02      	ldr	r2, [sp, #8]
 800a11e:	2339      	movs	r3, #57	; 0x39
 800a120:	7013      	strb	r3, [r2, #0]
 800a122:	462b      	mov	r3, r5
 800a124:	461d      	mov	r5, r3
 800a126:	3b01      	subs	r3, #1
 800a128:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a12c:	2a39      	cmp	r2, #57	; 0x39
 800a12e:	d050      	beq.n	800a1d2 <_dtoa_r+0xb72>
 800a130:	3201      	adds	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	e745      	b.n	8009fc2 <_dtoa_r+0x962>
 800a136:	2a00      	cmp	r2, #0
 800a138:	dd03      	ble.n	800a142 <_dtoa_r+0xae2>
 800a13a:	2b39      	cmp	r3, #57	; 0x39
 800a13c:	d0ee      	beq.n	800a11c <_dtoa_r+0xabc>
 800a13e:	3301      	adds	r3, #1
 800a140:	e7c7      	b.n	800a0d2 <_dtoa_r+0xa72>
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	9907      	ldr	r1, [sp, #28]
 800a146:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a14a:	428a      	cmp	r2, r1
 800a14c:	d02a      	beq.n	800a1a4 <_dtoa_r+0xb44>
 800a14e:	4659      	mov	r1, fp
 800a150:	2300      	movs	r3, #0
 800a152:	220a      	movs	r2, #10
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fc6d 	bl	800aa34 <__multadd>
 800a15a:	45b8      	cmp	r8, r7
 800a15c:	4683      	mov	fp, r0
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f04f 020a 	mov.w	r2, #10
 800a166:	4641      	mov	r1, r8
 800a168:	4620      	mov	r0, r4
 800a16a:	d107      	bne.n	800a17c <_dtoa_r+0xb1c>
 800a16c:	f000 fc62 	bl	800aa34 <__multadd>
 800a170:	4680      	mov	r8, r0
 800a172:	4607      	mov	r7, r0
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	3301      	adds	r3, #1
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	e775      	b.n	800a068 <_dtoa_r+0xa08>
 800a17c:	f000 fc5a 	bl	800aa34 <__multadd>
 800a180:	4639      	mov	r1, r7
 800a182:	4680      	mov	r8, r0
 800a184:	2300      	movs	r3, #0
 800a186:	220a      	movs	r2, #10
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fc53 	bl	800aa34 <__multadd>
 800a18e:	4607      	mov	r7, r0
 800a190:	e7f0      	b.n	800a174 <_dtoa_r+0xb14>
 800a192:	f1b9 0f00 	cmp.w	r9, #0
 800a196:	9a00      	ldr	r2, [sp, #0]
 800a198:	bfcc      	ite	gt
 800a19a:	464d      	movgt	r5, r9
 800a19c:	2501      	movle	r5, #1
 800a19e:	4415      	add	r5, r2
 800a1a0:	f04f 0800 	mov.w	r8, #0
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	f000 fe3c 	bl	800ae28 <__lshift>
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4683      	mov	fp, r0
 800a1b4:	f000 fea4 	bl	800af00 <__mcmp>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	dcb2      	bgt.n	800a122 <_dtoa_r+0xac2>
 800a1bc:	d102      	bne.n	800a1c4 <_dtoa_r+0xb64>
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d4ae      	bmi.n	800a122 <_dtoa_r+0xac2>
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	461d      	mov	r5, r3
 800a1c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1cc:	2a30      	cmp	r2, #48	; 0x30
 800a1ce:	d0fa      	beq.n	800a1c6 <_dtoa_r+0xb66>
 800a1d0:	e6f7      	b.n	8009fc2 <_dtoa_r+0x962>
 800a1d2:	9a00      	ldr	r2, [sp, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d1a5      	bne.n	800a124 <_dtoa_r+0xac4>
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	2331      	movs	r3, #49	; 0x31
 800a1de:	e779      	b.n	800a0d4 <_dtoa_r+0xa74>
 800a1e0:	4b13      	ldr	r3, [pc, #76]	; (800a230 <_dtoa_r+0xbd0>)
 800a1e2:	f7ff baaf 	b.w	8009744 <_dtoa_r+0xe4>
 800a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f47f aa86 	bne.w	80096fa <_dtoa_r+0x9a>
 800a1ee:	4b11      	ldr	r3, [pc, #68]	; (800a234 <_dtoa_r+0xbd4>)
 800a1f0:	f7ff baa8 	b.w	8009744 <_dtoa_r+0xe4>
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	dc03      	bgt.n	800a202 <_dtoa_r+0xba2>
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	f73f aec9 	bgt.w	8009f94 <_dtoa_r+0x934>
 800a202:	9d00      	ldr	r5, [sp, #0]
 800a204:	4631      	mov	r1, r6
 800a206:	4658      	mov	r0, fp
 800a208:	f7ff f99c 	bl	8009544 <quorem>
 800a20c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a210:	f805 3b01 	strb.w	r3, [r5], #1
 800a214:	9a00      	ldr	r2, [sp, #0]
 800a216:	1aaa      	subs	r2, r5, r2
 800a218:	4591      	cmp	r9, r2
 800a21a:	ddba      	ble.n	800a192 <_dtoa_r+0xb32>
 800a21c:	4659      	mov	r1, fp
 800a21e:	2300      	movs	r3, #0
 800a220:	220a      	movs	r2, #10
 800a222:	4620      	mov	r0, r4
 800a224:	f000 fc06 	bl	800aa34 <__multadd>
 800a228:	4683      	mov	fp, r0
 800a22a:	e7eb      	b.n	800a204 <_dtoa_r+0xba4>
 800a22c:	0800c584 	.word	0x0800c584
 800a230:	0800c384 	.word	0x0800c384
 800a234:	0800c501 	.word	0x0800c501

0800a238 <rshift>:
 800a238:	6903      	ldr	r3, [r0, #16]
 800a23a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a23e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a242:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a246:	f100 0414 	add.w	r4, r0, #20
 800a24a:	dd45      	ble.n	800a2d8 <rshift+0xa0>
 800a24c:	f011 011f 	ands.w	r1, r1, #31
 800a250:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a254:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a258:	d10c      	bne.n	800a274 <rshift+0x3c>
 800a25a:	f100 0710 	add.w	r7, r0, #16
 800a25e:	4629      	mov	r1, r5
 800a260:	42b1      	cmp	r1, r6
 800a262:	d334      	bcc.n	800a2ce <rshift+0x96>
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	1eea      	subs	r2, r5, #3
 800a26a:	4296      	cmp	r6, r2
 800a26c:	bf38      	it	cc
 800a26e:	2300      	movcc	r3, #0
 800a270:	4423      	add	r3, r4
 800a272:	e015      	b.n	800a2a0 <rshift+0x68>
 800a274:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a278:	f1c1 0820 	rsb	r8, r1, #32
 800a27c:	40cf      	lsrs	r7, r1
 800a27e:	f105 0e04 	add.w	lr, r5, #4
 800a282:	46a1      	mov	r9, r4
 800a284:	4576      	cmp	r6, lr
 800a286:	46f4      	mov	ip, lr
 800a288:	d815      	bhi.n	800a2b6 <rshift+0x7e>
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	009a      	lsls	r2, r3, #2
 800a28e:	3a04      	subs	r2, #4
 800a290:	3501      	adds	r5, #1
 800a292:	42ae      	cmp	r6, r5
 800a294:	bf38      	it	cc
 800a296:	2200      	movcc	r2, #0
 800a298:	18a3      	adds	r3, r4, r2
 800a29a:	50a7      	str	r7, [r4, r2]
 800a29c:	b107      	cbz	r7, 800a2a0 <rshift+0x68>
 800a29e:	3304      	adds	r3, #4
 800a2a0:	1b1a      	subs	r2, r3, r4
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2a8:	bf08      	it	eq
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	6102      	str	r2, [r0, #16]
 800a2ae:	bf08      	it	eq
 800a2b0:	6143      	streq	r3, [r0, #20]
 800a2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	f8dc c000 	ldr.w	ip, [ip]
 800a2ba:	fa0c fc08 	lsl.w	ip, ip, r8
 800a2be:	ea4c 0707 	orr.w	r7, ip, r7
 800a2c2:	f849 7b04 	str.w	r7, [r9], #4
 800a2c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2ca:	40cf      	lsrs	r7, r1
 800a2cc:	e7da      	b.n	800a284 <rshift+0x4c>
 800a2ce:	f851 cb04 	ldr.w	ip, [r1], #4
 800a2d2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2d6:	e7c3      	b.n	800a260 <rshift+0x28>
 800a2d8:	4623      	mov	r3, r4
 800a2da:	e7e1      	b.n	800a2a0 <rshift+0x68>

0800a2dc <__hexdig_fun>:
 800a2dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a2e0:	2b09      	cmp	r3, #9
 800a2e2:	d802      	bhi.n	800a2ea <__hexdig_fun+0xe>
 800a2e4:	3820      	subs	r0, #32
 800a2e6:	b2c0      	uxtb	r0, r0
 800a2e8:	4770      	bx	lr
 800a2ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d801      	bhi.n	800a2f6 <__hexdig_fun+0x1a>
 800a2f2:	3847      	subs	r0, #71	; 0x47
 800a2f4:	e7f7      	b.n	800a2e6 <__hexdig_fun+0xa>
 800a2f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d801      	bhi.n	800a302 <__hexdig_fun+0x26>
 800a2fe:	3827      	subs	r0, #39	; 0x27
 800a300:	e7f1      	b.n	800a2e6 <__hexdig_fun+0xa>
 800a302:	2000      	movs	r0, #0
 800a304:	4770      	bx	lr
	...

0800a308 <__gethex>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ed2d 8b02 	vpush	{d8}
 800a310:	b089      	sub	sp, #36	; 0x24
 800a312:	ee08 0a10 	vmov	s16, r0
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	4bbc      	ldr	r3, [pc, #752]	; (800a60c <__gethex+0x304>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	468b      	mov	fp, r1
 800a322:	4690      	mov	r8, r2
 800a324:	f7f5 ff74 	bl	8000210 <strlen>
 800a328:	9b01      	ldr	r3, [sp, #4]
 800a32a:	f8db 2000 	ldr.w	r2, [fp]
 800a32e:	4403      	add	r3, r0
 800a330:	4682      	mov	sl, r0
 800a332:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	1c93      	adds	r3, r2, #2
 800a33a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a33e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a342:	32fe      	adds	r2, #254	; 0xfe
 800a344:	18d1      	adds	r1, r2, r3
 800a346:	461f      	mov	r7, r3
 800a348:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a34c:	9100      	str	r1, [sp, #0]
 800a34e:	2830      	cmp	r0, #48	; 0x30
 800a350:	d0f8      	beq.n	800a344 <__gethex+0x3c>
 800a352:	f7ff ffc3 	bl	800a2dc <__hexdig_fun>
 800a356:	4604      	mov	r4, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d13a      	bne.n	800a3d2 <__gethex+0xca>
 800a35c:	9901      	ldr	r1, [sp, #4]
 800a35e:	4652      	mov	r2, sl
 800a360:	4638      	mov	r0, r7
 800a362:	f001 f9ed 	bl	800b740 <strncmp>
 800a366:	4605      	mov	r5, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	d168      	bne.n	800a43e <__gethex+0x136>
 800a36c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a370:	eb07 060a 	add.w	r6, r7, sl
 800a374:	f7ff ffb2 	bl	800a2dc <__hexdig_fun>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d062      	beq.n	800a442 <__gethex+0x13a>
 800a37c:	4633      	mov	r3, r6
 800a37e:	7818      	ldrb	r0, [r3, #0]
 800a380:	2830      	cmp	r0, #48	; 0x30
 800a382:	461f      	mov	r7, r3
 800a384:	f103 0301 	add.w	r3, r3, #1
 800a388:	d0f9      	beq.n	800a37e <__gethex+0x76>
 800a38a:	f7ff ffa7 	bl	800a2dc <__hexdig_fun>
 800a38e:	2301      	movs	r3, #1
 800a390:	fab0 f480 	clz	r4, r0
 800a394:	0964      	lsrs	r4, r4, #5
 800a396:	4635      	mov	r5, r6
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	463a      	mov	r2, r7
 800a39c:	4616      	mov	r6, r2
 800a39e:	3201      	adds	r2, #1
 800a3a0:	7830      	ldrb	r0, [r6, #0]
 800a3a2:	f7ff ff9b 	bl	800a2dc <__hexdig_fun>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d1f8      	bne.n	800a39c <__gethex+0x94>
 800a3aa:	9901      	ldr	r1, [sp, #4]
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f001 f9c6 	bl	800b740 <strncmp>
 800a3b4:	b980      	cbnz	r0, 800a3d8 <__gethex+0xd0>
 800a3b6:	b94d      	cbnz	r5, 800a3cc <__gethex+0xc4>
 800a3b8:	eb06 050a 	add.w	r5, r6, sl
 800a3bc:	462a      	mov	r2, r5
 800a3be:	4616      	mov	r6, r2
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	7830      	ldrb	r0, [r6, #0]
 800a3c4:	f7ff ff8a 	bl	800a2dc <__hexdig_fun>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1f8      	bne.n	800a3be <__gethex+0xb6>
 800a3cc:	1bad      	subs	r5, r5, r6
 800a3ce:	00ad      	lsls	r5, r5, #2
 800a3d0:	e004      	b.n	800a3dc <__gethex+0xd4>
 800a3d2:	2400      	movs	r4, #0
 800a3d4:	4625      	mov	r5, r4
 800a3d6:	e7e0      	b.n	800a39a <__gethex+0x92>
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	d1f7      	bne.n	800a3cc <__gethex+0xc4>
 800a3dc:	7833      	ldrb	r3, [r6, #0]
 800a3de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3e2:	2b50      	cmp	r3, #80	; 0x50
 800a3e4:	d13b      	bne.n	800a45e <__gethex+0x156>
 800a3e6:	7873      	ldrb	r3, [r6, #1]
 800a3e8:	2b2b      	cmp	r3, #43	; 0x2b
 800a3ea:	d02c      	beq.n	800a446 <__gethex+0x13e>
 800a3ec:	2b2d      	cmp	r3, #45	; 0x2d
 800a3ee:	d02e      	beq.n	800a44e <__gethex+0x146>
 800a3f0:	1c71      	adds	r1, r6, #1
 800a3f2:	f04f 0900 	mov.w	r9, #0
 800a3f6:	7808      	ldrb	r0, [r1, #0]
 800a3f8:	f7ff ff70 	bl	800a2dc <__hexdig_fun>
 800a3fc:	1e43      	subs	r3, r0, #1
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b18      	cmp	r3, #24
 800a402:	d82c      	bhi.n	800a45e <__gethex+0x156>
 800a404:	f1a0 0210 	sub.w	r2, r0, #16
 800a408:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a40c:	f7ff ff66 	bl	800a2dc <__hexdig_fun>
 800a410:	1e43      	subs	r3, r0, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b18      	cmp	r3, #24
 800a416:	d91d      	bls.n	800a454 <__gethex+0x14c>
 800a418:	f1b9 0f00 	cmp.w	r9, #0
 800a41c:	d000      	beq.n	800a420 <__gethex+0x118>
 800a41e:	4252      	negs	r2, r2
 800a420:	4415      	add	r5, r2
 800a422:	f8cb 1000 	str.w	r1, [fp]
 800a426:	b1e4      	cbz	r4, 800a462 <__gethex+0x15a>
 800a428:	9b00      	ldr	r3, [sp, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	bf14      	ite	ne
 800a42e:	2700      	movne	r7, #0
 800a430:	2706      	moveq	r7, #6
 800a432:	4638      	mov	r0, r7
 800a434:	b009      	add	sp, #36	; 0x24
 800a436:	ecbd 8b02 	vpop	{d8}
 800a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43e:	463e      	mov	r6, r7
 800a440:	4625      	mov	r5, r4
 800a442:	2401      	movs	r4, #1
 800a444:	e7ca      	b.n	800a3dc <__gethex+0xd4>
 800a446:	f04f 0900 	mov.w	r9, #0
 800a44a:	1cb1      	adds	r1, r6, #2
 800a44c:	e7d3      	b.n	800a3f6 <__gethex+0xee>
 800a44e:	f04f 0901 	mov.w	r9, #1
 800a452:	e7fa      	b.n	800a44a <__gethex+0x142>
 800a454:	230a      	movs	r3, #10
 800a456:	fb03 0202 	mla	r2, r3, r2, r0
 800a45a:	3a10      	subs	r2, #16
 800a45c:	e7d4      	b.n	800a408 <__gethex+0x100>
 800a45e:	4631      	mov	r1, r6
 800a460:	e7df      	b.n	800a422 <__gethex+0x11a>
 800a462:	1bf3      	subs	r3, r6, r7
 800a464:	3b01      	subs	r3, #1
 800a466:	4621      	mov	r1, r4
 800a468:	2b07      	cmp	r3, #7
 800a46a:	dc0b      	bgt.n	800a484 <__gethex+0x17c>
 800a46c:	ee18 0a10 	vmov	r0, s16
 800a470:	f000 fa7e 	bl	800a970 <_Balloc>
 800a474:	4604      	mov	r4, r0
 800a476:	b940      	cbnz	r0, 800a48a <__gethex+0x182>
 800a478:	4b65      	ldr	r3, [pc, #404]	; (800a610 <__gethex+0x308>)
 800a47a:	4602      	mov	r2, r0
 800a47c:	21de      	movs	r1, #222	; 0xde
 800a47e:	4865      	ldr	r0, [pc, #404]	; (800a614 <__gethex+0x30c>)
 800a480:	f001 f97e 	bl	800b780 <__assert_func>
 800a484:	3101      	adds	r1, #1
 800a486:	105b      	asrs	r3, r3, #1
 800a488:	e7ee      	b.n	800a468 <__gethex+0x160>
 800a48a:	f100 0914 	add.w	r9, r0, #20
 800a48e:	f04f 0b00 	mov.w	fp, #0
 800a492:	f1ca 0301 	rsb	r3, sl, #1
 800a496:	f8cd 9008 	str.w	r9, [sp, #8]
 800a49a:	f8cd b000 	str.w	fp, [sp]
 800a49e:	9306      	str	r3, [sp, #24]
 800a4a0:	42b7      	cmp	r7, r6
 800a4a2:	d340      	bcc.n	800a526 <__gethex+0x21e>
 800a4a4:	9802      	ldr	r0, [sp, #8]
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	f840 3b04 	str.w	r3, [r0], #4
 800a4ac:	eba0 0009 	sub.w	r0, r0, r9
 800a4b0:	1080      	asrs	r0, r0, #2
 800a4b2:	0146      	lsls	r6, r0, #5
 800a4b4:	6120      	str	r0, [r4, #16]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fb50 	bl	800ab5c <__hi0bits>
 800a4bc:	1a30      	subs	r0, r6, r0
 800a4be:	f8d8 6000 	ldr.w	r6, [r8]
 800a4c2:	42b0      	cmp	r0, r6
 800a4c4:	dd63      	ble.n	800a58e <__gethex+0x286>
 800a4c6:	1b87      	subs	r7, r0, r6
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 feea 	bl	800b2a4 <__any_on>
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	b1a8      	cbz	r0, 800a500 <__gethex+0x1f8>
 800a4d4:	1e7b      	subs	r3, r7, #1
 800a4d6:	1159      	asrs	r1, r3, #5
 800a4d8:	f003 021f 	and.w	r2, r3, #31
 800a4dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a4e0:	f04f 0a01 	mov.w	sl, #1
 800a4e4:	fa0a f202 	lsl.w	r2, sl, r2
 800a4e8:	420a      	tst	r2, r1
 800a4ea:	d009      	beq.n	800a500 <__gethex+0x1f8>
 800a4ec:	4553      	cmp	r3, sl
 800a4ee:	dd05      	ble.n	800a4fc <__gethex+0x1f4>
 800a4f0:	1eb9      	subs	r1, r7, #2
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fed6 	bl	800b2a4 <__any_on>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d145      	bne.n	800a588 <__gethex+0x280>
 800a4fc:	f04f 0a02 	mov.w	sl, #2
 800a500:	4639      	mov	r1, r7
 800a502:	4620      	mov	r0, r4
 800a504:	f7ff fe98 	bl	800a238 <rshift>
 800a508:	443d      	add	r5, r7
 800a50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a50e:	42ab      	cmp	r3, r5
 800a510:	da4c      	bge.n	800a5ac <__gethex+0x2a4>
 800a512:	ee18 0a10 	vmov	r0, s16
 800a516:	4621      	mov	r1, r4
 800a518:	f000 fa6a 	bl	800a9f0 <_Bfree>
 800a51c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a51e:	2300      	movs	r3, #0
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	27a3      	movs	r7, #163	; 0xa3
 800a524:	e785      	b.n	800a432 <__gethex+0x12a>
 800a526:	1e73      	subs	r3, r6, #1
 800a528:	9a05      	ldr	r2, [sp, #20]
 800a52a:	9303      	str	r3, [sp, #12]
 800a52c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a530:	4293      	cmp	r3, r2
 800a532:	d019      	beq.n	800a568 <__gethex+0x260>
 800a534:	f1bb 0f20 	cmp.w	fp, #32
 800a538:	d107      	bne.n	800a54a <__gethex+0x242>
 800a53a:	9b02      	ldr	r3, [sp, #8]
 800a53c:	9a00      	ldr	r2, [sp, #0]
 800a53e:	f843 2b04 	str.w	r2, [r3], #4
 800a542:	9302      	str	r3, [sp, #8]
 800a544:	2300      	movs	r3, #0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	469b      	mov	fp, r3
 800a54a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a54e:	f7ff fec5 	bl	800a2dc <__hexdig_fun>
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	f000 000f 	and.w	r0, r0, #15
 800a558:	fa00 f00b 	lsl.w	r0, r0, fp
 800a55c:	4303      	orrs	r3, r0
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	f10b 0b04 	add.w	fp, fp, #4
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	e00d      	b.n	800a584 <__gethex+0x27c>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	9a06      	ldr	r2, [sp, #24]
 800a56c:	4413      	add	r3, r2
 800a56e:	42bb      	cmp	r3, r7
 800a570:	d3e0      	bcc.n	800a534 <__gethex+0x22c>
 800a572:	4618      	mov	r0, r3
 800a574:	9901      	ldr	r1, [sp, #4]
 800a576:	9307      	str	r3, [sp, #28]
 800a578:	4652      	mov	r2, sl
 800a57a:	f001 f8e1 	bl	800b740 <strncmp>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	2800      	cmp	r0, #0
 800a582:	d1d7      	bne.n	800a534 <__gethex+0x22c>
 800a584:	461e      	mov	r6, r3
 800a586:	e78b      	b.n	800a4a0 <__gethex+0x198>
 800a588:	f04f 0a03 	mov.w	sl, #3
 800a58c:	e7b8      	b.n	800a500 <__gethex+0x1f8>
 800a58e:	da0a      	bge.n	800a5a6 <__gethex+0x29e>
 800a590:	1a37      	subs	r7, r6, r0
 800a592:	4621      	mov	r1, r4
 800a594:	ee18 0a10 	vmov	r0, s16
 800a598:	463a      	mov	r2, r7
 800a59a:	f000 fc45 	bl	800ae28 <__lshift>
 800a59e:	1bed      	subs	r5, r5, r7
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	f100 0914 	add.w	r9, r0, #20
 800a5a6:	f04f 0a00 	mov.w	sl, #0
 800a5aa:	e7ae      	b.n	800a50a <__gethex+0x202>
 800a5ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5b0:	42a8      	cmp	r0, r5
 800a5b2:	dd72      	ble.n	800a69a <__gethex+0x392>
 800a5b4:	1b45      	subs	r5, r0, r5
 800a5b6:	42ae      	cmp	r6, r5
 800a5b8:	dc36      	bgt.n	800a628 <__gethex+0x320>
 800a5ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d02a      	beq.n	800a618 <__gethex+0x310>
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d02c      	beq.n	800a620 <__gethex+0x318>
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d115      	bne.n	800a5f6 <__gethex+0x2ee>
 800a5ca:	42ae      	cmp	r6, r5
 800a5cc:	d113      	bne.n	800a5f6 <__gethex+0x2ee>
 800a5ce:	2e01      	cmp	r6, #1
 800a5d0:	d10b      	bne.n	800a5ea <__gethex+0x2e2>
 800a5d2:	9a04      	ldr	r2, [sp, #16]
 800a5d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	2301      	movs	r3, #1
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	f8c9 3000 	str.w	r3, [r9]
 800a5e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5e4:	2762      	movs	r7, #98	; 0x62
 800a5e6:	601c      	str	r4, [r3, #0]
 800a5e8:	e723      	b.n	800a432 <__gethex+0x12a>
 800a5ea:	1e71      	subs	r1, r6, #1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fe59 	bl	800b2a4 <__any_on>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d1ed      	bne.n	800a5d2 <__gethex+0x2ca>
 800a5f6:	ee18 0a10 	vmov	r0, s16
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	f000 f9f8 	bl	800a9f0 <_Bfree>
 800a600:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a602:	2300      	movs	r3, #0
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	2750      	movs	r7, #80	; 0x50
 800a608:	e713      	b.n	800a432 <__gethex+0x12a>
 800a60a:	bf00      	nop
 800a60c:	0800c600 	.word	0x0800c600
 800a610:	0800c584 	.word	0x0800c584
 800a614:	0800c595 	.word	0x0800c595
 800a618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1eb      	bne.n	800a5f6 <__gethex+0x2ee>
 800a61e:	e7d8      	b.n	800a5d2 <__gethex+0x2ca>
 800a620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1d5      	bne.n	800a5d2 <__gethex+0x2ca>
 800a626:	e7e6      	b.n	800a5f6 <__gethex+0x2ee>
 800a628:	1e6f      	subs	r7, r5, #1
 800a62a:	f1ba 0f00 	cmp.w	sl, #0
 800a62e:	d131      	bne.n	800a694 <__gethex+0x38c>
 800a630:	b127      	cbz	r7, 800a63c <__gethex+0x334>
 800a632:	4639      	mov	r1, r7
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fe35 	bl	800b2a4 <__any_on>
 800a63a:	4682      	mov	sl, r0
 800a63c:	117b      	asrs	r3, r7, #5
 800a63e:	2101      	movs	r1, #1
 800a640:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a644:	f007 071f 	and.w	r7, r7, #31
 800a648:	fa01 f707 	lsl.w	r7, r1, r7
 800a64c:	421f      	tst	r7, r3
 800a64e:	4629      	mov	r1, r5
 800a650:	4620      	mov	r0, r4
 800a652:	bf18      	it	ne
 800a654:	f04a 0a02 	orrne.w	sl, sl, #2
 800a658:	1b76      	subs	r6, r6, r5
 800a65a:	f7ff fded 	bl	800a238 <rshift>
 800a65e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a662:	2702      	movs	r7, #2
 800a664:	f1ba 0f00 	cmp.w	sl, #0
 800a668:	d048      	beq.n	800a6fc <__gethex+0x3f4>
 800a66a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d015      	beq.n	800a69e <__gethex+0x396>
 800a672:	2b03      	cmp	r3, #3
 800a674:	d017      	beq.n	800a6a6 <__gethex+0x39e>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d109      	bne.n	800a68e <__gethex+0x386>
 800a67a:	f01a 0f02 	tst.w	sl, #2
 800a67e:	d006      	beq.n	800a68e <__gethex+0x386>
 800a680:	f8d9 0000 	ldr.w	r0, [r9]
 800a684:	ea4a 0a00 	orr.w	sl, sl, r0
 800a688:	f01a 0f01 	tst.w	sl, #1
 800a68c:	d10e      	bne.n	800a6ac <__gethex+0x3a4>
 800a68e:	f047 0710 	orr.w	r7, r7, #16
 800a692:	e033      	b.n	800a6fc <__gethex+0x3f4>
 800a694:	f04f 0a01 	mov.w	sl, #1
 800a698:	e7d0      	b.n	800a63c <__gethex+0x334>
 800a69a:	2701      	movs	r7, #1
 800a69c:	e7e2      	b.n	800a664 <__gethex+0x35c>
 800a69e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6a0:	f1c3 0301 	rsb	r3, r3, #1
 800a6a4:	9315      	str	r3, [sp, #84]	; 0x54
 800a6a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0f0      	beq.n	800a68e <__gethex+0x386>
 800a6ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6b0:	f104 0314 	add.w	r3, r4, #20
 800a6b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6bc:	f04f 0c00 	mov.w	ip, #0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6ca:	d01c      	beq.n	800a706 <__gethex+0x3fe>
 800a6cc:	3201      	adds	r2, #1
 800a6ce:	6002      	str	r2, [r0, #0]
 800a6d0:	2f02      	cmp	r7, #2
 800a6d2:	f104 0314 	add.w	r3, r4, #20
 800a6d6:	d13f      	bne.n	800a758 <__gethex+0x450>
 800a6d8:	f8d8 2000 	ldr.w	r2, [r8]
 800a6dc:	3a01      	subs	r2, #1
 800a6de:	42b2      	cmp	r2, r6
 800a6e0:	d10a      	bne.n	800a6f8 <__gethex+0x3f0>
 800a6e2:	1171      	asrs	r1, r6, #5
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6ea:	f006 061f 	and.w	r6, r6, #31
 800a6ee:	fa02 f606 	lsl.w	r6, r2, r6
 800a6f2:	421e      	tst	r6, r3
 800a6f4:	bf18      	it	ne
 800a6f6:	4617      	movne	r7, r2
 800a6f8:	f047 0720 	orr.w	r7, r7, #32
 800a6fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6fe:	601c      	str	r4, [r3, #0]
 800a700:	9b04      	ldr	r3, [sp, #16]
 800a702:	601d      	str	r5, [r3, #0]
 800a704:	e695      	b.n	800a432 <__gethex+0x12a>
 800a706:	4299      	cmp	r1, r3
 800a708:	f843 cc04 	str.w	ip, [r3, #-4]
 800a70c:	d8d8      	bhi.n	800a6c0 <__gethex+0x3b8>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	459b      	cmp	fp, r3
 800a712:	db19      	blt.n	800a748 <__gethex+0x440>
 800a714:	6861      	ldr	r1, [r4, #4]
 800a716:	ee18 0a10 	vmov	r0, s16
 800a71a:	3101      	adds	r1, #1
 800a71c:	f000 f928 	bl	800a970 <_Balloc>
 800a720:	4681      	mov	r9, r0
 800a722:	b918      	cbnz	r0, 800a72c <__gethex+0x424>
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <__gethex+0x488>)
 800a726:	4602      	mov	r2, r0
 800a728:	2184      	movs	r1, #132	; 0x84
 800a72a:	e6a8      	b.n	800a47e <__gethex+0x176>
 800a72c:	6922      	ldr	r2, [r4, #16]
 800a72e:	3202      	adds	r2, #2
 800a730:	f104 010c 	add.w	r1, r4, #12
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	300c      	adds	r0, #12
 800a738:	f000 f90c 	bl	800a954 <memcpy>
 800a73c:	4621      	mov	r1, r4
 800a73e:	ee18 0a10 	vmov	r0, s16
 800a742:	f000 f955 	bl	800a9f0 <_Bfree>
 800a746:	464c      	mov	r4, r9
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a750:	6122      	str	r2, [r4, #16]
 800a752:	2201      	movs	r2, #1
 800a754:	615a      	str	r2, [r3, #20]
 800a756:	e7bb      	b.n	800a6d0 <__gethex+0x3c8>
 800a758:	6922      	ldr	r2, [r4, #16]
 800a75a:	455a      	cmp	r2, fp
 800a75c:	dd0b      	ble.n	800a776 <__gethex+0x46e>
 800a75e:	2101      	movs	r1, #1
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff fd69 	bl	800a238 <rshift>
 800a766:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a76a:	3501      	adds	r5, #1
 800a76c:	42ab      	cmp	r3, r5
 800a76e:	f6ff aed0 	blt.w	800a512 <__gethex+0x20a>
 800a772:	2701      	movs	r7, #1
 800a774:	e7c0      	b.n	800a6f8 <__gethex+0x3f0>
 800a776:	f016 061f 	ands.w	r6, r6, #31
 800a77a:	d0fa      	beq.n	800a772 <__gethex+0x46a>
 800a77c:	449a      	add	sl, r3
 800a77e:	f1c6 0620 	rsb	r6, r6, #32
 800a782:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a786:	f000 f9e9 	bl	800ab5c <__hi0bits>
 800a78a:	42b0      	cmp	r0, r6
 800a78c:	dbe7      	blt.n	800a75e <__gethex+0x456>
 800a78e:	e7f0      	b.n	800a772 <__gethex+0x46a>
 800a790:	0800c584 	.word	0x0800c584

0800a794 <L_shift>:
 800a794:	f1c2 0208 	rsb	r2, r2, #8
 800a798:	0092      	lsls	r2, r2, #2
 800a79a:	b570      	push	{r4, r5, r6, lr}
 800a79c:	f1c2 0620 	rsb	r6, r2, #32
 800a7a0:	6843      	ldr	r3, [r0, #4]
 800a7a2:	6804      	ldr	r4, [r0, #0]
 800a7a4:	fa03 f506 	lsl.w	r5, r3, r6
 800a7a8:	432c      	orrs	r4, r5
 800a7aa:	40d3      	lsrs	r3, r2
 800a7ac:	6004      	str	r4, [r0, #0]
 800a7ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7b2:	4288      	cmp	r0, r1
 800a7b4:	d3f4      	bcc.n	800a7a0 <L_shift+0xc>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <__match>:
 800a7b8:	b530      	push	{r4, r5, lr}
 800a7ba:	6803      	ldr	r3, [r0, #0]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c2:	b914      	cbnz	r4, 800a7ca <__match+0x12>
 800a7c4:	6003      	str	r3, [r0, #0]
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	bd30      	pop	{r4, r5, pc}
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a7d2:	2d19      	cmp	r5, #25
 800a7d4:	bf98      	it	ls
 800a7d6:	3220      	addls	r2, #32
 800a7d8:	42a2      	cmp	r2, r4
 800a7da:	d0f0      	beq.n	800a7be <__match+0x6>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e7f3      	b.n	800a7c8 <__match+0x10>

0800a7e0 <__hexnan>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	6801      	ldr	r1, [r0, #0]
 800a7e8:	115e      	asrs	r6, r3, #5
 800a7ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7ee:	f013 031f 	ands.w	r3, r3, #31
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	bf18      	it	ne
 800a7f6:	3604      	addne	r6, #4
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	1f37      	subs	r7, r6, #4
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	4690      	mov	r8, r2
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f846 5c04 	str.w	r5, [r6, #-4]
 800a806:	46b9      	mov	r9, r7
 800a808:	463c      	mov	r4, r7
 800a80a:	9502      	str	r5, [sp, #8]
 800a80c:	46ab      	mov	fp, r5
 800a80e:	784a      	ldrb	r2, [r1, #1]
 800a810:	1c4b      	adds	r3, r1, #1
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	b342      	cbz	r2, 800a868 <__hexnan+0x88>
 800a816:	4610      	mov	r0, r2
 800a818:	9105      	str	r1, [sp, #20]
 800a81a:	9204      	str	r2, [sp, #16]
 800a81c:	f7ff fd5e 	bl	800a2dc <__hexdig_fun>
 800a820:	2800      	cmp	r0, #0
 800a822:	d14f      	bne.n	800a8c4 <__hexnan+0xe4>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	9905      	ldr	r1, [sp, #20]
 800a828:	2a20      	cmp	r2, #32
 800a82a:	d818      	bhi.n	800a85e <__hexnan+0x7e>
 800a82c:	9b02      	ldr	r3, [sp, #8]
 800a82e:	459b      	cmp	fp, r3
 800a830:	dd13      	ble.n	800a85a <__hexnan+0x7a>
 800a832:	454c      	cmp	r4, r9
 800a834:	d206      	bcs.n	800a844 <__hexnan+0x64>
 800a836:	2d07      	cmp	r5, #7
 800a838:	dc04      	bgt.n	800a844 <__hexnan+0x64>
 800a83a:	462a      	mov	r2, r5
 800a83c:	4649      	mov	r1, r9
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff ffa8 	bl	800a794 <L_shift>
 800a844:	4544      	cmp	r4, r8
 800a846:	d950      	bls.n	800a8ea <__hexnan+0x10a>
 800a848:	2300      	movs	r3, #0
 800a84a:	f1a4 0904 	sub.w	r9, r4, #4
 800a84e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a852:	f8cd b008 	str.w	fp, [sp, #8]
 800a856:	464c      	mov	r4, r9
 800a858:	461d      	mov	r5, r3
 800a85a:	9903      	ldr	r1, [sp, #12]
 800a85c:	e7d7      	b.n	800a80e <__hexnan+0x2e>
 800a85e:	2a29      	cmp	r2, #41	; 0x29
 800a860:	d156      	bne.n	800a910 <__hexnan+0x130>
 800a862:	3102      	adds	r1, #2
 800a864:	f8ca 1000 	str.w	r1, [sl]
 800a868:	f1bb 0f00 	cmp.w	fp, #0
 800a86c:	d050      	beq.n	800a910 <__hexnan+0x130>
 800a86e:	454c      	cmp	r4, r9
 800a870:	d206      	bcs.n	800a880 <__hexnan+0xa0>
 800a872:	2d07      	cmp	r5, #7
 800a874:	dc04      	bgt.n	800a880 <__hexnan+0xa0>
 800a876:	462a      	mov	r2, r5
 800a878:	4649      	mov	r1, r9
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff ff8a 	bl	800a794 <L_shift>
 800a880:	4544      	cmp	r4, r8
 800a882:	d934      	bls.n	800a8ee <__hexnan+0x10e>
 800a884:	f1a8 0204 	sub.w	r2, r8, #4
 800a888:	4623      	mov	r3, r4
 800a88a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a88e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a892:	429f      	cmp	r7, r3
 800a894:	d2f9      	bcs.n	800a88a <__hexnan+0xaa>
 800a896:	1b3b      	subs	r3, r7, r4
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	3304      	adds	r3, #4
 800a89e:	3401      	adds	r4, #1
 800a8a0:	3e03      	subs	r6, #3
 800a8a2:	42b4      	cmp	r4, r6
 800a8a4:	bf88      	it	hi
 800a8a6:	2304      	movhi	r3, #4
 800a8a8:	4443      	add	r3, r8
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f843 2b04 	str.w	r2, [r3], #4
 800a8b0:	429f      	cmp	r7, r3
 800a8b2:	d2fb      	bcs.n	800a8ac <__hexnan+0xcc>
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	b91b      	cbnz	r3, 800a8c0 <__hexnan+0xe0>
 800a8b8:	4547      	cmp	r7, r8
 800a8ba:	d127      	bne.n	800a90c <__hexnan+0x12c>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	2005      	movs	r0, #5
 800a8c2:	e026      	b.n	800a912 <__hexnan+0x132>
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	2d08      	cmp	r5, #8
 800a8c8:	f10b 0b01 	add.w	fp, fp, #1
 800a8cc:	dd06      	ble.n	800a8dc <__hexnan+0xfc>
 800a8ce:	4544      	cmp	r4, r8
 800a8d0:	d9c3      	bls.n	800a85a <__hexnan+0x7a>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8d8:	2501      	movs	r5, #1
 800a8da:	3c04      	subs	r4, #4
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	f000 000f 	and.w	r0, r0, #15
 800a8e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a8e6:	6022      	str	r2, [r4, #0]
 800a8e8:	e7b7      	b.n	800a85a <__hexnan+0x7a>
 800a8ea:	2508      	movs	r5, #8
 800a8ec:	e7b5      	b.n	800a85a <__hexnan+0x7a>
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0df      	beq.n	800a8b4 <__hexnan+0xd4>
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	f1c3 0320 	rsb	r3, r3, #32
 800a8fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a900:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a904:	401a      	ands	r2, r3
 800a906:	f846 2c04 	str.w	r2, [r6, #-4]
 800a90a:	e7d3      	b.n	800a8b4 <__hexnan+0xd4>
 800a90c:	3f04      	subs	r7, #4
 800a90e:	e7d1      	b.n	800a8b4 <__hexnan+0xd4>
 800a910:	2004      	movs	r0, #4
 800a912:	b007      	add	sp, #28
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a918 <_localeconv_r>:
 800a918:	4800      	ldr	r0, [pc, #0]	; (800a91c <_localeconv_r+0x4>)
 800a91a:	4770      	bx	lr
 800a91c:	20000170 	.word	0x20000170

0800a920 <malloc>:
 800a920:	4b02      	ldr	r3, [pc, #8]	; (800a92c <malloc+0xc>)
 800a922:	4601      	mov	r1, r0
 800a924:	6818      	ldr	r0, [r3, #0]
 800a926:	f000 bd3d 	b.w	800b3a4 <_malloc_r>
 800a92a:	bf00      	nop
 800a92c:	20000018 	.word	0x20000018

0800a930 <__ascii_mbtowc>:
 800a930:	b082      	sub	sp, #8
 800a932:	b901      	cbnz	r1, 800a936 <__ascii_mbtowc+0x6>
 800a934:	a901      	add	r1, sp, #4
 800a936:	b142      	cbz	r2, 800a94a <__ascii_mbtowc+0x1a>
 800a938:	b14b      	cbz	r3, 800a94e <__ascii_mbtowc+0x1e>
 800a93a:	7813      	ldrb	r3, [r2, #0]
 800a93c:	600b      	str	r3, [r1, #0]
 800a93e:	7812      	ldrb	r2, [r2, #0]
 800a940:	1e10      	subs	r0, r2, #0
 800a942:	bf18      	it	ne
 800a944:	2001      	movne	r0, #1
 800a946:	b002      	add	sp, #8
 800a948:	4770      	bx	lr
 800a94a:	4610      	mov	r0, r2
 800a94c:	e7fb      	b.n	800a946 <__ascii_mbtowc+0x16>
 800a94e:	f06f 0001 	mvn.w	r0, #1
 800a952:	e7f8      	b.n	800a946 <__ascii_mbtowc+0x16>

0800a954 <memcpy>:
 800a954:	440a      	add	r2, r1
 800a956:	4291      	cmp	r1, r2
 800a958:	f100 33ff 	add.w	r3, r0, #4294967295
 800a95c:	d100      	bne.n	800a960 <memcpy+0xc>
 800a95e:	4770      	bx	lr
 800a960:	b510      	push	{r4, lr}
 800a962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a96a:	4291      	cmp	r1, r2
 800a96c:	d1f9      	bne.n	800a962 <memcpy+0xe>
 800a96e:	bd10      	pop	{r4, pc}

0800a970 <_Balloc>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	b976      	cbnz	r6, 800a998 <_Balloc+0x28>
 800a97a:	2010      	movs	r0, #16
 800a97c:	f7ff ffd0 	bl	800a920 <malloc>
 800a980:	4602      	mov	r2, r0
 800a982:	6260      	str	r0, [r4, #36]	; 0x24
 800a984:	b920      	cbnz	r0, 800a990 <_Balloc+0x20>
 800a986:	4b18      	ldr	r3, [pc, #96]	; (800a9e8 <_Balloc+0x78>)
 800a988:	4818      	ldr	r0, [pc, #96]	; (800a9ec <_Balloc+0x7c>)
 800a98a:	2166      	movs	r1, #102	; 0x66
 800a98c:	f000 fef8 	bl	800b780 <__assert_func>
 800a990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a994:	6006      	str	r6, [r0, #0]
 800a996:	60c6      	str	r6, [r0, #12]
 800a998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a99a:	68f3      	ldr	r3, [r6, #12]
 800a99c:	b183      	cbz	r3, 800a9c0 <_Balloc+0x50>
 800a99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9a6:	b9b8      	cbnz	r0, 800a9d8 <_Balloc+0x68>
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a9ae:	1d72      	adds	r2, r6, #5
 800a9b0:	0092      	lsls	r2, r2, #2
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 fc97 	bl	800b2e6 <_calloc_r>
 800a9b8:	b160      	cbz	r0, 800a9d4 <_Balloc+0x64>
 800a9ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9be:	e00e      	b.n	800a9de <_Balloc+0x6e>
 800a9c0:	2221      	movs	r2, #33	; 0x21
 800a9c2:	2104      	movs	r1, #4
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fc8e 	bl	800b2e6 <_calloc_r>
 800a9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9cc:	60f0      	str	r0, [r6, #12]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e4      	bne.n	800a99e <_Balloc+0x2e>
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	6802      	ldr	r2, [r0, #0]
 800a9da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9e4:	e7f7      	b.n	800a9d6 <_Balloc+0x66>
 800a9e6:	bf00      	nop
 800a9e8:	0800c50e 	.word	0x0800c50e
 800a9ec:	0800c614 	.word	0x0800c614

0800a9f0 <_Bfree>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	b976      	cbnz	r6, 800aa18 <_Bfree+0x28>
 800a9fa:	2010      	movs	r0, #16
 800a9fc:	f7ff ff90 	bl	800a920 <malloc>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6268      	str	r0, [r5, #36]	; 0x24
 800aa04:	b920      	cbnz	r0, 800aa10 <_Bfree+0x20>
 800aa06:	4b09      	ldr	r3, [pc, #36]	; (800aa2c <_Bfree+0x3c>)
 800aa08:	4809      	ldr	r0, [pc, #36]	; (800aa30 <_Bfree+0x40>)
 800aa0a:	218a      	movs	r1, #138	; 0x8a
 800aa0c:	f000 feb8 	bl	800b780 <__assert_func>
 800aa10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa14:	6006      	str	r6, [r0, #0]
 800aa16:	60c6      	str	r6, [r0, #12]
 800aa18:	b13c      	cbz	r4, 800aa2a <_Bfree+0x3a>
 800aa1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa1c:	6862      	ldr	r2, [r4, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa24:	6021      	str	r1, [r4, #0]
 800aa26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	0800c50e 	.word	0x0800c50e
 800aa30:	0800c614 	.word	0x0800c614

0800aa34 <__multadd>:
 800aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa38:	690e      	ldr	r6, [r1, #16]
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	4698      	mov	r8, r3
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f101 0014 	add.w	r0, r1, #20
 800aa44:	2300      	movs	r3, #0
 800aa46:	6805      	ldr	r5, [r0, #0]
 800aa48:	b2a9      	uxth	r1, r5
 800aa4a:	fb02 8101 	mla	r1, r2, r1, r8
 800aa4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aa52:	0c2d      	lsrs	r5, r5, #16
 800aa54:	fb02 c505 	mla	r5, r2, r5, ip
 800aa58:	b289      	uxth	r1, r1
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aa60:	429e      	cmp	r6, r3
 800aa62:	f840 1b04 	str.w	r1, [r0], #4
 800aa66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aa6a:	dcec      	bgt.n	800aa46 <__multadd+0x12>
 800aa6c:	f1b8 0f00 	cmp.w	r8, #0
 800aa70:	d022      	beq.n	800aab8 <__multadd+0x84>
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	42b3      	cmp	r3, r6
 800aa76:	dc19      	bgt.n	800aaac <__multadd+0x78>
 800aa78:	6861      	ldr	r1, [r4, #4]
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	f7ff ff77 	bl	800a970 <_Balloc>
 800aa82:	4605      	mov	r5, r0
 800aa84:	b928      	cbnz	r0, 800aa92 <__multadd+0x5e>
 800aa86:	4602      	mov	r2, r0
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <__multadd+0x8c>)
 800aa8a:	480e      	ldr	r0, [pc, #56]	; (800aac4 <__multadd+0x90>)
 800aa8c:	21b5      	movs	r1, #181	; 0xb5
 800aa8e:	f000 fe77 	bl	800b780 <__assert_func>
 800aa92:	6922      	ldr	r2, [r4, #16]
 800aa94:	3202      	adds	r2, #2
 800aa96:	f104 010c 	add.w	r1, r4, #12
 800aa9a:	0092      	lsls	r2, r2, #2
 800aa9c:	300c      	adds	r0, #12
 800aa9e:	f7ff ff59 	bl	800a954 <memcpy>
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff ffa3 	bl	800a9f0 <_Bfree>
 800aaaa:	462c      	mov	r4, r5
 800aaac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aab0:	3601      	adds	r6, #1
 800aab2:	f8c3 8014 	str.w	r8, [r3, #20]
 800aab6:	6126      	str	r6, [r4, #16]
 800aab8:	4620      	mov	r0, r4
 800aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabe:	bf00      	nop
 800aac0:	0800c584 	.word	0x0800c584
 800aac4:	0800c614 	.word	0x0800c614

0800aac8 <__s2b>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	4615      	mov	r5, r2
 800aad0:	461f      	mov	r7, r3
 800aad2:	2209      	movs	r2, #9
 800aad4:	3308      	adds	r3, #8
 800aad6:	4606      	mov	r6, r0
 800aad8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aadc:	2100      	movs	r1, #0
 800aade:	2201      	movs	r2, #1
 800aae0:	429a      	cmp	r2, r3
 800aae2:	db09      	blt.n	800aaf8 <__s2b+0x30>
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff ff43 	bl	800a970 <_Balloc>
 800aaea:	b940      	cbnz	r0, 800aafe <__s2b+0x36>
 800aaec:	4602      	mov	r2, r0
 800aaee:	4b19      	ldr	r3, [pc, #100]	; (800ab54 <__s2b+0x8c>)
 800aaf0:	4819      	ldr	r0, [pc, #100]	; (800ab58 <__s2b+0x90>)
 800aaf2:	21ce      	movs	r1, #206	; 0xce
 800aaf4:	f000 fe44 	bl	800b780 <__assert_func>
 800aaf8:	0052      	lsls	r2, r2, #1
 800aafa:	3101      	adds	r1, #1
 800aafc:	e7f0      	b.n	800aae0 <__s2b+0x18>
 800aafe:	9b08      	ldr	r3, [sp, #32]
 800ab00:	6143      	str	r3, [r0, #20]
 800ab02:	2d09      	cmp	r5, #9
 800ab04:	f04f 0301 	mov.w	r3, #1
 800ab08:	6103      	str	r3, [r0, #16]
 800ab0a:	dd16      	ble.n	800ab3a <__s2b+0x72>
 800ab0c:	f104 0909 	add.w	r9, r4, #9
 800ab10:	46c8      	mov	r8, r9
 800ab12:	442c      	add	r4, r5
 800ab14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab18:	4601      	mov	r1, r0
 800ab1a:	3b30      	subs	r3, #48	; 0x30
 800ab1c:	220a      	movs	r2, #10
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff ff88 	bl	800aa34 <__multadd>
 800ab24:	45a0      	cmp	r8, r4
 800ab26:	d1f5      	bne.n	800ab14 <__s2b+0x4c>
 800ab28:	f1a5 0408 	sub.w	r4, r5, #8
 800ab2c:	444c      	add	r4, r9
 800ab2e:	1b2d      	subs	r5, r5, r4
 800ab30:	1963      	adds	r3, r4, r5
 800ab32:	42bb      	cmp	r3, r7
 800ab34:	db04      	blt.n	800ab40 <__s2b+0x78>
 800ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	340a      	adds	r4, #10
 800ab3c:	2509      	movs	r5, #9
 800ab3e:	e7f6      	b.n	800ab2e <__s2b+0x66>
 800ab40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab44:	4601      	mov	r1, r0
 800ab46:	3b30      	subs	r3, #48	; 0x30
 800ab48:	220a      	movs	r2, #10
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ff72 	bl	800aa34 <__multadd>
 800ab50:	e7ee      	b.n	800ab30 <__s2b+0x68>
 800ab52:	bf00      	nop
 800ab54:	0800c584 	.word	0x0800c584
 800ab58:	0800c614 	.word	0x0800c614

0800ab5c <__hi0bits>:
 800ab5c:	0c03      	lsrs	r3, r0, #16
 800ab5e:	041b      	lsls	r3, r3, #16
 800ab60:	b9d3      	cbnz	r3, 800ab98 <__hi0bits+0x3c>
 800ab62:	0400      	lsls	r0, r0, #16
 800ab64:	2310      	movs	r3, #16
 800ab66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab6a:	bf04      	itt	eq
 800ab6c:	0200      	lsleq	r0, r0, #8
 800ab6e:	3308      	addeq	r3, #8
 800ab70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab74:	bf04      	itt	eq
 800ab76:	0100      	lsleq	r0, r0, #4
 800ab78:	3304      	addeq	r3, #4
 800ab7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab7e:	bf04      	itt	eq
 800ab80:	0080      	lsleq	r0, r0, #2
 800ab82:	3302      	addeq	r3, #2
 800ab84:	2800      	cmp	r0, #0
 800ab86:	db05      	blt.n	800ab94 <__hi0bits+0x38>
 800ab88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab8c:	f103 0301 	add.w	r3, r3, #1
 800ab90:	bf08      	it	eq
 800ab92:	2320      	moveq	r3, #32
 800ab94:	4618      	mov	r0, r3
 800ab96:	4770      	bx	lr
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e7e4      	b.n	800ab66 <__hi0bits+0xa>

0800ab9c <__lo0bits>:
 800ab9c:	6803      	ldr	r3, [r0, #0]
 800ab9e:	f013 0207 	ands.w	r2, r3, #7
 800aba2:	4601      	mov	r1, r0
 800aba4:	d00b      	beq.n	800abbe <__lo0bits+0x22>
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d424      	bmi.n	800abf4 <__lo0bits+0x58>
 800abaa:	0798      	lsls	r0, r3, #30
 800abac:	bf49      	itett	mi
 800abae:	085b      	lsrmi	r3, r3, #1
 800abb0:	089b      	lsrpl	r3, r3, #2
 800abb2:	2001      	movmi	r0, #1
 800abb4:	600b      	strmi	r3, [r1, #0]
 800abb6:	bf5c      	itt	pl
 800abb8:	600b      	strpl	r3, [r1, #0]
 800abba:	2002      	movpl	r0, #2
 800abbc:	4770      	bx	lr
 800abbe:	b298      	uxth	r0, r3
 800abc0:	b9b0      	cbnz	r0, 800abf0 <__lo0bits+0x54>
 800abc2:	0c1b      	lsrs	r3, r3, #16
 800abc4:	2010      	movs	r0, #16
 800abc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800abca:	bf04      	itt	eq
 800abcc:	0a1b      	lsreq	r3, r3, #8
 800abce:	3008      	addeq	r0, #8
 800abd0:	071a      	lsls	r2, r3, #28
 800abd2:	bf04      	itt	eq
 800abd4:	091b      	lsreq	r3, r3, #4
 800abd6:	3004      	addeq	r0, #4
 800abd8:	079a      	lsls	r2, r3, #30
 800abda:	bf04      	itt	eq
 800abdc:	089b      	lsreq	r3, r3, #2
 800abde:	3002      	addeq	r0, #2
 800abe0:	07da      	lsls	r2, r3, #31
 800abe2:	d403      	bmi.n	800abec <__lo0bits+0x50>
 800abe4:	085b      	lsrs	r3, r3, #1
 800abe6:	f100 0001 	add.w	r0, r0, #1
 800abea:	d005      	beq.n	800abf8 <__lo0bits+0x5c>
 800abec:	600b      	str	r3, [r1, #0]
 800abee:	4770      	bx	lr
 800abf0:	4610      	mov	r0, r2
 800abf2:	e7e8      	b.n	800abc6 <__lo0bits+0x2a>
 800abf4:	2000      	movs	r0, #0
 800abf6:	4770      	bx	lr
 800abf8:	2020      	movs	r0, #32
 800abfa:	4770      	bx	lr

0800abfc <__i2b>:
 800abfc:	b510      	push	{r4, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	2101      	movs	r1, #1
 800ac02:	f7ff feb5 	bl	800a970 <_Balloc>
 800ac06:	4602      	mov	r2, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <__i2b+0x1a>
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <__i2b+0x24>)
 800ac0c:	4805      	ldr	r0, [pc, #20]	; (800ac24 <__i2b+0x28>)
 800ac0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac12:	f000 fdb5 	bl	800b780 <__assert_func>
 800ac16:	2301      	movs	r3, #1
 800ac18:	6144      	str	r4, [r0, #20]
 800ac1a:	6103      	str	r3, [r0, #16]
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800c584 	.word	0x0800c584
 800ac24:	0800c614 	.word	0x0800c614

0800ac28 <__multiply>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	4614      	mov	r4, r2
 800ac2e:	690a      	ldr	r2, [r1, #16]
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	bfb8      	it	lt
 800ac36:	460b      	movlt	r3, r1
 800ac38:	460d      	mov	r5, r1
 800ac3a:	bfbc      	itt	lt
 800ac3c:	4625      	movlt	r5, r4
 800ac3e:	461c      	movlt	r4, r3
 800ac40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ac44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac48:	68ab      	ldr	r3, [r5, #8]
 800ac4a:	6869      	ldr	r1, [r5, #4]
 800ac4c:	eb0a 0709 	add.w	r7, sl, r9
 800ac50:	42bb      	cmp	r3, r7
 800ac52:	b085      	sub	sp, #20
 800ac54:	bfb8      	it	lt
 800ac56:	3101      	addlt	r1, #1
 800ac58:	f7ff fe8a 	bl	800a970 <_Balloc>
 800ac5c:	b930      	cbnz	r0, 800ac6c <__multiply+0x44>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b42      	ldr	r3, [pc, #264]	; (800ad6c <__multiply+0x144>)
 800ac62:	4843      	ldr	r0, [pc, #268]	; (800ad70 <__multiply+0x148>)
 800ac64:	f240 115d 	movw	r1, #349	; 0x15d
 800ac68:	f000 fd8a 	bl	800b780 <__assert_func>
 800ac6c:	f100 0614 	add.w	r6, r0, #20
 800ac70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ac74:	4633      	mov	r3, r6
 800ac76:	2200      	movs	r2, #0
 800ac78:	4543      	cmp	r3, r8
 800ac7a:	d31e      	bcc.n	800acba <__multiply+0x92>
 800ac7c:	f105 0c14 	add.w	ip, r5, #20
 800ac80:	f104 0314 	add.w	r3, r4, #20
 800ac84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ac88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	ebac 0205 	sub.w	r2, ip, r5
 800ac92:	3a15      	subs	r2, #21
 800ac94:	f022 0203 	bic.w	r2, r2, #3
 800ac98:	3204      	adds	r2, #4
 800ac9a:	f105 0115 	add.w	r1, r5, #21
 800ac9e:	458c      	cmp	ip, r1
 800aca0:	bf38      	it	cc
 800aca2:	2204      	movcc	r2, #4
 800aca4:	9201      	str	r2, [sp, #4]
 800aca6:	9a02      	ldr	r2, [sp, #8]
 800aca8:	9303      	str	r3, [sp, #12]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d808      	bhi.n	800acc0 <__multiply+0x98>
 800acae:	2f00      	cmp	r7, #0
 800acb0:	dc55      	bgt.n	800ad5e <__multiply+0x136>
 800acb2:	6107      	str	r7, [r0, #16]
 800acb4:	b005      	add	sp, #20
 800acb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acba:	f843 2b04 	str.w	r2, [r3], #4
 800acbe:	e7db      	b.n	800ac78 <__multiply+0x50>
 800acc0:	f8b3 a000 	ldrh.w	sl, [r3]
 800acc4:	f1ba 0f00 	cmp.w	sl, #0
 800acc8:	d020      	beq.n	800ad0c <__multiply+0xe4>
 800acca:	f105 0e14 	add.w	lr, r5, #20
 800acce:	46b1      	mov	r9, r6
 800acd0:	2200      	movs	r2, #0
 800acd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800acd6:	f8d9 b000 	ldr.w	fp, [r9]
 800acda:	b2a1      	uxth	r1, r4
 800acdc:	fa1f fb8b 	uxth.w	fp, fp
 800ace0:	fb0a b101 	mla	r1, sl, r1, fp
 800ace4:	4411      	add	r1, r2
 800ace6:	f8d9 2000 	ldr.w	r2, [r9]
 800acea:	0c24      	lsrs	r4, r4, #16
 800acec:	0c12      	lsrs	r2, r2, #16
 800acee:	fb0a 2404 	mla	r4, sl, r4, r2
 800acf2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800acf6:	b289      	uxth	r1, r1
 800acf8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800acfc:	45f4      	cmp	ip, lr
 800acfe:	f849 1b04 	str.w	r1, [r9], #4
 800ad02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ad06:	d8e4      	bhi.n	800acd2 <__multiply+0xaa>
 800ad08:	9901      	ldr	r1, [sp, #4]
 800ad0a:	5072      	str	r2, [r6, r1]
 800ad0c:	9a03      	ldr	r2, [sp, #12]
 800ad0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad12:	3304      	adds	r3, #4
 800ad14:	f1b9 0f00 	cmp.w	r9, #0
 800ad18:	d01f      	beq.n	800ad5a <__multiply+0x132>
 800ad1a:	6834      	ldr	r4, [r6, #0]
 800ad1c:	f105 0114 	add.w	r1, r5, #20
 800ad20:	46b6      	mov	lr, r6
 800ad22:	f04f 0a00 	mov.w	sl, #0
 800ad26:	880a      	ldrh	r2, [r1, #0]
 800ad28:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ad2c:	fb09 b202 	mla	r2, r9, r2, fp
 800ad30:	4492      	add	sl, r2
 800ad32:	b2a4      	uxth	r4, r4
 800ad34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ad38:	f84e 4b04 	str.w	r4, [lr], #4
 800ad3c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ad40:	f8be 2000 	ldrh.w	r2, [lr]
 800ad44:	0c24      	lsrs	r4, r4, #16
 800ad46:	fb09 2404 	mla	r4, r9, r4, r2
 800ad4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ad4e:	458c      	cmp	ip, r1
 800ad50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad54:	d8e7      	bhi.n	800ad26 <__multiply+0xfe>
 800ad56:	9a01      	ldr	r2, [sp, #4]
 800ad58:	50b4      	str	r4, [r6, r2]
 800ad5a:	3604      	adds	r6, #4
 800ad5c:	e7a3      	b.n	800aca6 <__multiply+0x7e>
 800ad5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1a5      	bne.n	800acb2 <__multiply+0x8a>
 800ad66:	3f01      	subs	r7, #1
 800ad68:	e7a1      	b.n	800acae <__multiply+0x86>
 800ad6a:	bf00      	nop
 800ad6c:	0800c584 	.word	0x0800c584
 800ad70:	0800c614 	.word	0x0800c614

0800ad74 <__pow5mult>:
 800ad74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad78:	4615      	mov	r5, r2
 800ad7a:	f012 0203 	ands.w	r2, r2, #3
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	d007      	beq.n	800ad94 <__pow5mult+0x20>
 800ad84:	4c25      	ldr	r4, [pc, #148]	; (800ae1c <__pow5mult+0xa8>)
 800ad86:	3a01      	subs	r2, #1
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad8e:	f7ff fe51 	bl	800aa34 <__multadd>
 800ad92:	4607      	mov	r7, r0
 800ad94:	10ad      	asrs	r5, r5, #2
 800ad96:	d03d      	beq.n	800ae14 <__pow5mult+0xa0>
 800ad98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad9a:	b97c      	cbnz	r4, 800adbc <__pow5mult+0x48>
 800ad9c:	2010      	movs	r0, #16
 800ad9e:	f7ff fdbf 	bl	800a920 <malloc>
 800ada2:	4602      	mov	r2, r0
 800ada4:	6270      	str	r0, [r6, #36]	; 0x24
 800ada6:	b928      	cbnz	r0, 800adb4 <__pow5mult+0x40>
 800ada8:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <__pow5mult+0xac>)
 800adaa:	481e      	ldr	r0, [pc, #120]	; (800ae24 <__pow5mult+0xb0>)
 800adac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800adb0:	f000 fce6 	bl	800b780 <__assert_func>
 800adb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb8:	6004      	str	r4, [r0, #0]
 800adba:	60c4      	str	r4, [r0, #12]
 800adbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adc4:	b94c      	cbnz	r4, 800adda <__pow5mult+0x66>
 800adc6:	f240 2171 	movw	r1, #625	; 0x271
 800adca:	4630      	mov	r0, r6
 800adcc:	f7ff ff16 	bl	800abfc <__i2b>
 800add0:	2300      	movs	r3, #0
 800add2:	f8c8 0008 	str.w	r0, [r8, #8]
 800add6:	4604      	mov	r4, r0
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	f04f 0900 	mov.w	r9, #0
 800adde:	07eb      	lsls	r3, r5, #31
 800ade0:	d50a      	bpl.n	800adf8 <__pow5mult+0x84>
 800ade2:	4639      	mov	r1, r7
 800ade4:	4622      	mov	r2, r4
 800ade6:	4630      	mov	r0, r6
 800ade8:	f7ff ff1e 	bl	800ac28 <__multiply>
 800adec:	4639      	mov	r1, r7
 800adee:	4680      	mov	r8, r0
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7ff fdfd 	bl	800a9f0 <_Bfree>
 800adf6:	4647      	mov	r7, r8
 800adf8:	106d      	asrs	r5, r5, #1
 800adfa:	d00b      	beq.n	800ae14 <__pow5mult+0xa0>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	b938      	cbnz	r0, 800ae10 <__pow5mult+0x9c>
 800ae00:	4622      	mov	r2, r4
 800ae02:	4621      	mov	r1, r4
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff ff0f 	bl	800ac28 <__multiply>
 800ae0a:	6020      	str	r0, [r4, #0]
 800ae0c:	f8c0 9000 	str.w	r9, [r0]
 800ae10:	4604      	mov	r4, r0
 800ae12:	e7e4      	b.n	800adde <__pow5mult+0x6a>
 800ae14:	4638      	mov	r0, r7
 800ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800c768 	.word	0x0800c768
 800ae20:	0800c50e 	.word	0x0800c50e
 800ae24:	0800c614 	.word	0x0800c614

0800ae28 <__lshift>:
 800ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	6849      	ldr	r1, [r1, #4]
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae36:	68a3      	ldr	r3, [r4, #8]
 800ae38:	4607      	mov	r7, r0
 800ae3a:	4691      	mov	r9, r2
 800ae3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae40:	f108 0601 	add.w	r6, r8, #1
 800ae44:	42b3      	cmp	r3, r6
 800ae46:	db0b      	blt.n	800ae60 <__lshift+0x38>
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff fd91 	bl	800a970 <_Balloc>
 800ae4e:	4605      	mov	r5, r0
 800ae50:	b948      	cbnz	r0, 800ae66 <__lshift+0x3e>
 800ae52:	4602      	mov	r2, r0
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <__lshift+0xd0>)
 800ae56:	4829      	ldr	r0, [pc, #164]	; (800aefc <__lshift+0xd4>)
 800ae58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae5c:	f000 fc90 	bl	800b780 <__assert_func>
 800ae60:	3101      	adds	r1, #1
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	e7ee      	b.n	800ae44 <__lshift+0x1c>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f100 0114 	add.w	r1, r0, #20
 800ae6c:	f100 0210 	add.w	r2, r0, #16
 800ae70:	4618      	mov	r0, r3
 800ae72:	4553      	cmp	r3, sl
 800ae74:	db33      	blt.n	800aede <__lshift+0xb6>
 800ae76:	6920      	ldr	r0, [r4, #16]
 800ae78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae7c:	f104 0314 	add.w	r3, r4, #20
 800ae80:	f019 091f 	ands.w	r9, r9, #31
 800ae84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae8c:	d02b      	beq.n	800aee6 <__lshift+0xbe>
 800ae8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ae92:	468a      	mov	sl, r1
 800ae94:	2200      	movs	r2, #0
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	fa00 f009 	lsl.w	r0, r0, r9
 800ae9c:	4302      	orrs	r2, r0
 800ae9e:	f84a 2b04 	str.w	r2, [sl], #4
 800aea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea6:	459c      	cmp	ip, r3
 800aea8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aeac:	d8f3      	bhi.n	800ae96 <__lshift+0x6e>
 800aeae:	ebac 0304 	sub.w	r3, ip, r4
 800aeb2:	3b15      	subs	r3, #21
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	3304      	adds	r3, #4
 800aeba:	f104 0015 	add.w	r0, r4, #21
 800aebe:	4584      	cmp	ip, r0
 800aec0:	bf38      	it	cc
 800aec2:	2304      	movcc	r3, #4
 800aec4:	50ca      	str	r2, [r1, r3]
 800aec6:	b10a      	cbz	r2, 800aecc <__lshift+0xa4>
 800aec8:	f108 0602 	add.w	r6, r8, #2
 800aecc:	3e01      	subs	r6, #1
 800aece:	4638      	mov	r0, r7
 800aed0:	612e      	str	r6, [r5, #16]
 800aed2:	4621      	mov	r1, r4
 800aed4:	f7ff fd8c 	bl	800a9f0 <_Bfree>
 800aed8:	4628      	mov	r0, r5
 800aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aede:	f842 0f04 	str.w	r0, [r2, #4]!
 800aee2:	3301      	adds	r3, #1
 800aee4:	e7c5      	b.n	800ae72 <__lshift+0x4a>
 800aee6:	3904      	subs	r1, #4
 800aee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeec:	f841 2f04 	str.w	r2, [r1, #4]!
 800aef0:	459c      	cmp	ip, r3
 800aef2:	d8f9      	bhi.n	800aee8 <__lshift+0xc0>
 800aef4:	e7ea      	b.n	800aecc <__lshift+0xa4>
 800aef6:	bf00      	nop
 800aef8:	0800c584 	.word	0x0800c584
 800aefc:	0800c614 	.word	0x0800c614

0800af00 <__mcmp>:
 800af00:	b530      	push	{r4, r5, lr}
 800af02:	6902      	ldr	r2, [r0, #16]
 800af04:	690c      	ldr	r4, [r1, #16]
 800af06:	1b12      	subs	r2, r2, r4
 800af08:	d10e      	bne.n	800af28 <__mcmp+0x28>
 800af0a:	f100 0314 	add.w	r3, r0, #20
 800af0e:	3114      	adds	r1, #20
 800af10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af20:	42a5      	cmp	r5, r4
 800af22:	d003      	beq.n	800af2c <__mcmp+0x2c>
 800af24:	d305      	bcc.n	800af32 <__mcmp+0x32>
 800af26:	2201      	movs	r2, #1
 800af28:	4610      	mov	r0, r2
 800af2a:	bd30      	pop	{r4, r5, pc}
 800af2c:	4283      	cmp	r3, r0
 800af2e:	d3f3      	bcc.n	800af18 <__mcmp+0x18>
 800af30:	e7fa      	b.n	800af28 <__mcmp+0x28>
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	e7f7      	b.n	800af28 <__mcmp+0x28>

0800af38 <__mdiff>:
 800af38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	460c      	mov	r4, r1
 800af3e:	4606      	mov	r6, r0
 800af40:	4611      	mov	r1, r2
 800af42:	4620      	mov	r0, r4
 800af44:	4617      	mov	r7, r2
 800af46:	f7ff ffdb 	bl	800af00 <__mcmp>
 800af4a:	1e05      	subs	r5, r0, #0
 800af4c:	d110      	bne.n	800af70 <__mdiff+0x38>
 800af4e:	4629      	mov	r1, r5
 800af50:	4630      	mov	r0, r6
 800af52:	f7ff fd0d 	bl	800a970 <_Balloc>
 800af56:	b930      	cbnz	r0, 800af66 <__mdiff+0x2e>
 800af58:	4b39      	ldr	r3, [pc, #228]	; (800b040 <__mdiff+0x108>)
 800af5a:	4602      	mov	r2, r0
 800af5c:	f240 2132 	movw	r1, #562	; 0x232
 800af60:	4838      	ldr	r0, [pc, #224]	; (800b044 <__mdiff+0x10c>)
 800af62:	f000 fc0d 	bl	800b780 <__assert_func>
 800af66:	2301      	movs	r3, #1
 800af68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	bfa4      	itt	ge
 800af72:	463b      	movge	r3, r7
 800af74:	4627      	movge	r7, r4
 800af76:	4630      	mov	r0, r6
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	bfa6      	itte	ge
 800af7c:	461c      	movge	r4, r3
 800af7e:	2500      	movge	r5, #0
 800af80:	2501      	movlt	r5, #1
 800af82:	f7ff fcf5 	bl	800a970 <_Balloc>
 800af86:	b920      	cbnz	r0, 800af92 <__mdiff+0x5a>
 800af88:	4b2d      	ldr	r3, [pc, #180]	; (800b040 <__mdiff+0x108>)
 800af8a:	4602      	mov	r2, r0
 800af8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af90:	e7e6      	b.n	800af60 <__mdiff+0x28>
 800af92:	693e      	ldr	r6, [r7, #16]
 800af94:	60c5      	str	r5, [r0, #12]
 800af96:	6925      	ldr	r5, [r4, #16]
 800af98:	f107 0114 	add.w	r1, r7, #20
 800af9c:	f104 0914 	add.w	r9, r4, #20
 800afa0:	f100 0e14 	add.w	lr, r0, #20
 800afa4:	f107 0210 	add.w	r2, r7, #16
 800afa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800afac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800afb0:	46f2      	mov	sl, lr
 800afb2:	2700      	movs	r7, #0
 800afb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800afb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afbc:	fa1f f883 	uxth.w	r8, r3
 800afc0:	fa17 f78b 	uxtah	r7, r7, fp
 800afc4:	0c1b      	lsrs	r3, r3, #16
 800afc6:	eba7 0808 	sub.w	r8, r7, r8
 800afca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afd2:	fa1f f888 	uxth.w	r8, r8
 800afd6:	141f      	asrs	r7, r3, #16
 800afd8:	454d      	cmp	r5, r9
 800afda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afde:	f84a 3b04 	str.w	r3, [sl], #4
 800afe2:	d8e7      	bhi.n	800afb4 <__mdiff+0x7c>
 800afe4:	1b2b      	subs	r3, r5, r4
 800afe6:	3b15      	subs	r3, #21
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	3304      	adds	r3, #4
 800afee:	3415      	adds	r4, #21
 800aff0:	42a5      	cmp	r5, r4
 800aff2:	bf38      	it	cc
 800aff4:	2304      	movcc	r3, #4
 800aff6:	4419      	add	r1, r3
 800aff8:	4473      	add	r3, lr
 800affa:	469e      	mov	lr, r3
 800affc:	460d      	mov	r5, r1
 800affe:	4565      	cmp	r5, ip
 800b000:	d30e      	bcc.n	800b020 <__mdiff+0xe8>
 800b002:	f10c 0203 	add.w	r2, ip, #3
 800b006:	1a52      	subs	r2, r2, r1
 800b008:	f022 0203 	bic.w	r2, r2, #3
 800b00c:	3903      	subs	r1, #3
 800b00e:	458c      	cmp	ip, r1
 800b010:	bf38      	it	cc
 800b012:	2200      	movcc	r2, #0
 800b014:	441a      	add	r2, r3
 800b016:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b01a:	b17b      	cbz	r3, 800b03c <__mdiff+0x104>
 800b01c:	6106      	str	r6, [r0, #16]
 800b01e:	e7a5      	b.n	800af6c <__mdiff+0x34>
 800b020:	f855 8b04 	ldr.w	r8, [r5], #4
 800b024:	fa17 f488 	uxtah	r4, r7, r8
 800b028:	1422      	asrs	r2, r4, #16
 800b02a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b02e:	b2a4      	uxth	r4, r4
 800b030:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b034:	f84e 4b04 	str.w	r4, [lr], #4
 800b038:	1417      	asrs	r7, r2, #16
 800b03a:	e7e0      	b.n	800affe <__mdiff+0xc6>
 800b03c:	3e01      	subs	r6, #1
 800b03e:	e7ea      	b.n	800b016 <__mdiff+0xde>
 800b040:	0800c584 	.word	0x0800c584
 800b044:	0800c614 	.word	0x0800c614

0800b048 <__ulp>:
 800b048:	b082      	sub	sp, #8
 800b04a:	ed8d 0b00 	vstr	d0, [sp]
 800b04e:	9b01      	ldr	r3, [sp, #4]
 800b050:	4912      	ldr	r1, [pc, #72]	; (800b09c <__ulp+0x54>)
 800b052:	4019      	ands	r1, r3
 800b054:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b058:	2900      	cmp	r1, #0
 800b05a:	dd05      	ble.n	800b068 <__ulp+0x20>
 800b05c:	2200      	movs	r2, #0
 800b05e:	460b      	mov	r3, r1
 800b060:	ec43 2b10 	vmov	d0, r2, r3
 800b064:	b002      	add	sp, #8
 800b066:	4770      	bx	lr
 800b068:	4249      	negs	r1, r1
 800b06a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b06e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b072:	f04f 0200 	mov.w	r2, #0
 800b076:	f04f 0300 	mov.w	r3, #0
 800b07a:	da04      	bge.n	800b086 <__ulp+0x3e>
 800b07c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b080:	fa41 f300 	asr.w	r3, r1, r0
 800b084:	e7ec      	b.n	800b060 <__ulp+0x18>
 800b086:	f1a0 0114 	sub.w	r1, r0, #20
 800b08a:	291e      	cmp	r1, #30
 800b08c:	bfda      	itte	le
 800b08e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b092:	fa20 f101 	lsrle.w	r1, r0, r1
 800b096:	2101      	movgt	r1, #1
 800b098:	460a      	mov	r2, r1
 800b09a:	e7e1      	b.n	800b060 <__ulp+0x18>
 800b09c:	7ff00000 	.word	0x7ff00000

0800b0a0 <__b2d>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	6905      	ldr	r5, [r0, #16]
 800b0a4:	f100 0714 	add.w	r7, r0, #20
 800b0a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b0ac:	1f2e      	subs	r6, r5, #4
 800b0ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff fd52 	bl	800ab5c <__hi0bits>
 800b0b8:	f1c0 0320 	rsb	r3, r0, #32
 800b0bc:	280a      	cmp	r0, #10
 800b0be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b13c <__b2d+0x9c>
 800b0c2:	600b      	str	r3, [r1, #0]
 800b0c4:	dc14      	bgt.n	800b0f0 <__b2d+0x50>
 800b0c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b0ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800b0ce:	42b7      	cmp	r7, r6
 800b0d0:	ea41 030c 	orr.w	r3, r1, ip
 800b0d4:	bf34      	ite	cc
 800b0d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0da:	2100      	movcs	r1, #0
 800b0dc:	3015      	adds	r0, #21
 800b0de:	fa04 f000 	lsl.w	r0, r4, r0
 800b0e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0e6:	ea40 0201 	orr.w	r2, r0, r1
 800b0ea:	ec43 2b10 	vmov	d0, r2, r3
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f0:	42b7      	cmp	r7, r6
 800b0f2:	bf3a      	itte	cc
 800b0f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0fc:	2100      	movcs	r1, #0
 800b0fe:	380b      	subs	r0, #11
 800b100:	d017      	beq.n	800b132 <__b2d+0x92>
 800b102:	f1c0 0c20 	rsb	ip, r0, #32
 800b106:	fa04 f500 	lsl.w	r5, r4, r0
 800b10a:	42be      	cmp	r6, r7
 800b10c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b110:	ea45 0504 	orr.w	r5, r5, r4
 800b114:	bf8c      	ite	hi
 800b116:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b11a:	2400      	movls	r4, #0
 800b11c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b120:	fa01 f000 	lsl.w	r0, r1, r0
 800b124:	fa24 f40c 	lsr.w	r4, r4, ip
 800b128:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b12c:	ea40 0204 	orr.w	r2, r0, r4
 800b130:	e7db      	b.n	800b0ea <__b2d+0x4a>
 800b132:	ea44 030c 	orr.w	r3, r4, ip
 800b136:	460a      	mov	r2, r1
 800b138:	e7d7      	b.n	800b0ea <__b2d+0x4a>
 800b13a:	bf00      	nop
 800b13c:	3ff00000 	.word	0x3ff00000

0800b140 <__d2b>:
 800b140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b144:	4689      	mov	r9, r1
 800b146:	2101      	movs	r1, #1
 800b148:	ec57 6b10 	vmov	r6, r7, d0
 800b14c:	4690      	mov	r8, r2
 800b14e:	f7ff fc0f 	bl	800a970 <_Balloc>
 800b152:	4604      	mov	r4, r0
 800b154:	b930      	cbnz	r0, 800b164 <__d2b+0x24>
 800b156:	4602      	mov	r2, r0
 800b158:	4b25      	ldr	r3, [pc, #148]	; (800b1f0 <__d2b+0xb0>)
 800b15a:	4826      	ldr	r0, [pc, #152]	; (800b1f4 <__d2b+0xb4>)
 800b15c:	f240 310a 	movw	r1, #778	; 0x30a
 800b160:	f000 fb0e 	bl	800b780 <__assert_func>
 800b164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b16c:	bb35      	cbnz	r5, 800b1bc <__d2b+0x7c>
 800b16e:	2e00      	cmp	r6, #0
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	d028      	beq.n	800b1c6 <__d2b+0x86>
 800b174:	4668      	mov	r0, sp
 800b176:	9600      	str	r6, [sp, #0]
 800b178:	f7ff fd10 	bl	800ab9c <__lo0bits>
 800b17c:	9900      	ldr	r1, [sp, #0]
 800b17e:	b300      	cbz	r0, 800b1c2 <__d2b+0x82>
 800b180:	9a01      	ldr	r2, [sp, #4]
 800b182:	f1c0 0320 	rsb	r3, r0, #32
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	430b      	orrs	r3, r1
 800b18c:	40c2      	lsrs	r2, r0
 800b18e:	6163      	str	r3, [r4, #20]
 800b190:	9201      	str	r2, [sp, #4]
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	61a3      	str	r3, [r4, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	bf14      	ite	ne
 800b19a:	2202      	movne	r2, #2
 800b19c:	2201      	moveq	r2, #1
 800b19e:	6122      	str	r2, [r4, #16]
 800b1a0:	b1d5      	cbz	r5, 800b1d8 <__d2b+0x98>
 800b1a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1a6:	4405      	add	r5, r0
 800b1a8:	f8c9 5000 	str.w	r5, [r9]
 800b1ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1b0:	f8c8 0000 	str.w	r0, [r8]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	b003      	add	sp, #12
 800b1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1c0:	e7d5      	b.n	800b16e <__d2b+0x2e>
 800b1c2:	6161      	str	r1, [r4, #20]
 800b1c4:	e7e5      	b.n	800b192 <__d2b+0x52>
 800b1c6:	a801      	add	r0, sp, #4
 800b1c8:	f7ff fce8 	bl	800ab9c <__lo0bits>
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	6163      	str	r3, [r4, #20]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	6122      	str	r2, [r4, #16]
 800b1d4:	3020      	adds	r0, #32
 800b1d6:	e7e3      	b.n	800b1a0 <__d2b+0x60>
 800b1d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1e0:	f8c9 0000 	str.w	r0, [r9]
 800b1e4:	6918      	ldr	r0, [r3, #16]
 800b1e6:	f7ff fcb9 	bl	800ab5c <__hi0bits>
 800b1ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1ee:	e7df      	b.n	800b1b0 <__d2b+0x70>
 800b1f0:	0800c584 	.word	0x0800c584
 800b1f4:	0800c614 	.word	0x0800c614

0800b1f8 <__ratio>:
 800b1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4688      	mov	r8, r1
 800b1fe:	4669      	mov	r1, sp
 800b200:	4681      	mov	r9, r0
 800b202:	f7ff ff4d 	bl	800b0a0 <__b2d>
 800b206:	a901      	add	r1, sp, #4
 800b208:	4640      	mov	r0, r8
 800b20a:	ec55 4b10 	vmov	r4, r5, d0
 800b20e:	f7ff ff47 	bl	800b0a0 <__b2d>
 800b212:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b216:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b21a:	eba3 0c02 	sub.w	ip, r3, r2
 800b21e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b228:	ec51 0b10 	vmov	r0, r1, d0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bfd6      	itet	le
 800b230:	460a      	movle	r2, r1
 800b232:	462a      	movgt	r2, r5
 800b234:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b238:	468b      	mov	fp, r1
 800b23a:	462f      	mov	r7, r5
 800b23c:	bfd4      	ite	le
 800b23e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b242:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b246:	4620      	mov	r0, r4
 800b248:	ee10 2a10 	vmov	r2, s0
 800b24c:	465b      	mov	r3, fp
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 fb1c 	bl	800088c <__aeabi_ddiv>
 800b254:	ec41 0b10 	vmov	d0, r0, r1
 800b258:	b003      	add	sp, #12
 800b25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b25e <__copybits>:
 800b25e:	3901      	subs	r1, #1
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	1149      	asrs	r1, r1, #5
 800b264:	6914      	ldr	r4, [r2, #16]
 800b266:	3101      	adds	r1, #1
 800b268:	f102 0314 	add.w	r3, r2, #20
 800b26c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b270:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b274:	1f05      	subs	r5, r0, #4
 800b276:	42a3      	cmp	r3, r4
 800b278:	d30c      	bcc.n	800b294 <__copybits+0x36>
 800b27a:	1aa3      	subs	r3, r4, r2
 800b27c:	3b11      	subs	r3, #17
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	3211      	adds	r2, #17
 800b284:	42a2      	cmp	r2, r4
 800b286:	bf88      	it	hi
 800b288:	2300      	movhi	r3, #0
 800b28a:	4418      	add	r0, r3
 800b28c:	2300      	movs	r3, #0
 800b28e:	4288      	cmp	r0, r1
 800b290:	d305      	bcc.n	800b29e <__copybits+0x40>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f853 6b04 	ldr.w	r6, [r3], #4
 800b298:	f845 6f04 	str.w	r6, [r5, #4]!
 800b29c:	e7eb      	b.n	800b276 <__copybits+0x18>
 800b29e:	f840 3b04 	str.w	r3, [r0], #4
 800b2a2:	e7f4      	b.n	800b28e <__copybits+0x30>

0800b2a4 <__any_on>:
 800b2a4:	f100 0214 	add.w	r2, r0, #20
 800b2a8:	6900      	ldr	r0, [r0, #16]
 800b2aa:	114b      	asrs	r3, r1, #5
 800b2ac:	4298      	cmp	r0, r3
 800b2ae:	b510      	push	{r4, lr}
 800b2b0:	db11      	blt.n	800b2d6 <__any_on+0x32>
 800b2b2:	dd0a      	ble.n	800b2ca <__any_on+0x26>
 800b2b4:	f011 011f 	ands.w	r1, r1, #31
 800b2b8:	d007      	beq.n	800b2ca <__any_on+0x26>
 800b2ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2be:	fa24 f001 	lsr.w	r0, r4, r1
 800b2c2:	fa00 f101 	lsl.w	r1, r0, r1
 800b2c6:	428c      	cmp	r4, r1
 800b2c8:	d10b      	bne.n	800b2e2 <__any_on+0x3e>
 800b2ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d803      	bhi.n	800b2da <__any_on+0x36>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	e7f7      	b.n	800b2ca <__any_on+0x26>
 800b2da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d0f5      	beq.n	800b2ce <__any_on+0x2a>
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	e7f6      	b.n	800b2d4 <__any_on+0x30>

0800b2e6 <_calloc_r>:
 800b2e6:	b513      	push	{r0, r1, r4, lr}
 800b2e8:	434a      	muls	r2, r1
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	9201      	str	r2, [sp, #4]
 800b2ee:	f000 f859 	bl	800b3a4 <_malloc_r>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b118      	cbz	r0, 800b2fe <_calloc_r+0x18>
 800b2f6:	9a01      	ldr	r2, [sp, #4]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	f7fc fbc9 	bl	8007a90 <memset>
 800b2fe:	4620      	mov	r0, r4
 800b300:	b002      	add	sp, #8
 800b302:	bd10      	pop	{r4, pc}

0800b304 <_free_r>:
 800b304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b306:	2900      	cmp	r1, #0
 800b308:	d048      	beq.n	800b39c <_free_r+0x98>
 800b30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b30e:	9001      	str	r0, [sp, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f1a1 0404 	sub.w	r4, r1, #4
 800b316:	bfb8      	it	lt
 800b318:	18e4      	addlt	r4, r4, r3
 800b31a:	f000 fa7b 	bl	800b814 <__malloc_lock>
 800b31e:	4a20      	ldr	r2, [pc, #128]	; (800b3a0 <_free_r+0x9c>)
 800b320:	9801      	ldr	r0, [sp, #4]
 800b322:	6813      	ldr	r3, [r2, #0]
 800b324:	4615      	mov	r5, r2
 800b326:	b933      	cbnz	r3, 800b336 <_free_r+0x32>
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	6014      	str	r4, [r2, #0]
 800b32c:	b003      	add	sp, #12
 800b32e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b332:	f000 ba75 	b.w	800b820 <__malloc_unlock>
 800b336:	42a3      	cmp	r3, r4
 800b338:	d90b      	bls.n	800b352 <_free_r+0x4e>
 800b33a:	6821      	ldr	r1, [r4, #0]
 800b33c:	1862      	adds	r2, r4, r1
 800b33e:	4293      	cmp	r3, r2
 800b340:	bf04      	itt	eq
 800b342:	681a      	ldreq	r2, [r3, #0]
 800b344:	685b      	ldreq	r3, [r3, #4]
 800b346:	6063      	str	r3, [r4, #4]
 800b348:	bf04      	itt	eq
 800b34a:	1852      	addeq	r2, r2, r1
 800b34c:	6022      	streq	r2, [r4, #0]
 800b34e:	602c      	str	r4, [r5, #0]
 800b350:	e7ec      	b.n	800b32c <_free_r+0x28>
 800b352:	461a      	mov	r2, r3
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	b10b      	cbz	r3, 800b35c <_free_r+0x58>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d9fa      	bls.n	800b352 <_free_r+0x4e>
 800b35c:	6811      	ldr	r1, [r2, #0]
 800b35e:	1855      	adds	r5, r2, r1
 800b360:	42a5      	cmp	r5, r4
 800b362:	d10b      	bne.n	800b37c <_free_r+0x78>
 800b364:	6824      	ldr	r4, [r4, #0]
 800b366:	4421      	add	r1, r4
 800b368:	1854      	adds	r4, r2, r1
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	6011      	str	r1, [r2, #0]
 800b36e:	d1dd      	bne.n	800b32c <_free_r+0x28>
 800b370:	681c      	ldr	r4, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	6053      	str	r3, [r2, #4]
 800b376:	4421      	add	r1, r4
 800b378:	6011      	str	r1, [r2, #0]
 800b37a:	e7d7      	b.n	800b32c <_free_r+0x28>
 800b37c:	d902      	bls.n	800b384 <_free_r+0x80>
 800b37e:	230c      	movs	r3, #12
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	e7d3      	b.n	800b32c <_free_r+0x28>
 800b384:	6825      	ldr	r5, [r4, #0]
 800b386:	1961      	adds	r1, r4, r5
 800b388:	428b      	cmp	r3, r1
 800b38a:	bf04      	itt	eq
 800b38c:	6819      	ldreq	r1, [r3, #0]
 800b38e:	685b      	ldreq	r3, [r3, #4]
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	bf04      	itt	eq
 800b394:	1949      	addeq	r1, r1, r5
 800b396:	6021      	streq	r1, [r4, #0]
 800b398:	6054      	str	r4, [r2, #4]
 800b39a:	e7c7      	b.n	800b32c <_free_r+0x28>
 800b39c:	b003      	add	sp, #12
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	20000224 	.word	0x20000224

0800b3a4 <_malloc_r>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	1ccd      	adds	r5, r1, #3
 800b3a8:	f025 0503 	bic.w	r5, r5, #3
 800b3ac:	3508      	adds	r5, #8
 800b3ae:	2d0c      	cmp	r5, #12
 800b3b0:	bf38      	it	cc
 800b3b2:	250c      	movcc	r5, #12
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	db01      	blt.n	800b3be <_malloc_r+0x1a>
 800b3ba:	42a9      	cmp	r1, r5
 800b3bc:	d903      	bls.n	800b3c6 <_malloc_r+0x22>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c6:	f000 fa25 	bl	800b814 <__malloc_lock>
 800b3ca:	4921      	ldr	r1, [pc, #132]	; (800b450 <_malloc_r+0xac>)
 800b3cc:	680a      	ldr	r2, [r1, #0]
 800b3ce:	4614      	mov	r4, r2
 800b3d0:	b99c      	cbnz	r4, 800b3fa <_malloc_r+0x56>
 800b3d2:	4f20      	ldr	r7, [pc, #128]	; (800b454 <_malloc_r+0xb0>)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	b923      	cbnz	r3, 800b3e2 <_malloc_r+0x3e>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f000 f9a0 	bl	800b720 <_sbrk_r>
 800b3e0:	6038      	str	r0, [r7, #0]
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f000 f99b 	bl	800b720 <_sbrk_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d123      	bne.n	800b436 <_malloc_r+0x92>
 800b3ee:	230c      	movs	r3, #12
 800b3f0:	6033      	str	r3, [r6, #0]
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 fa14 	bl	800b820 <__malloc_unlock>
 800b3f8:	e7e3      	b.n	800b3c2 <_malloc_r+0x1e>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	1b5b      	subs	r3, r3, r5
 800b3fe:	d417      	bmi.n	800b430 <_malloc_r+0x8c>
 800b400:	2b0b      	cmp	r3, #11
 800b402:	d903      	bls.n	800b40c <_malloc_r+0x68>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	441c      	add	r4, r3
 800b408:	6025      	str	r5, [r4, #0]
 800b40a:	e004      	b.n	800b416 <_malloc_r+0x72>
 800b40c:	6863      	ldr	r3, [r4, #4]
 800b40e:	42a2      	cmp	r2, r4
 800b410:	bf0c      	ite	eq
 800b412:	600b      	streq	r3, [r1, #0]
 800b414:	6053      	strne	r3, [r2, #4]
 800b416:	4630      	mov	r0, r6
 800b418:	f000 fa02 	bl	800b820 <__malloc_unlock>
 800b41c:	f104 000b 	add.w	r0, r4, #11
 800b420:	1d23      	adds	r3, r4, #4
 800b422:	f020 0007 	bic.w	r0, r0, #7
 800b426:	1ac2      	subs	r2, r0, r3
 800b428:	d0cc      	beq.n	800b3c4 <_malloc_r+0x20>
 800b42a:	1a1b      	subs	r3, r3, r0
 800b42c:	50a3      	str	r3, [r4, r2]
 800b42e:	e7c9      	b.n	800b3c4 <_malloc_r+0x20>
 800b430:	4622      	mov	r2, r4
 800b432:	6864      	ldr	r4, [r4, #4]
 800b434:	e7cc      	b.n	800b3d0 <_malloc_r+0x2c>
 800b436:	1cc4      	adds	r4, r0, #3
 800b438:	f024 0403 	bic.w	r4, r4, #3
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	d0e3      	beq.n	800b408 <_malloc_r+0x64>
 800b440:	1a21      	subs	r1, r4, r0
 800b442:	4630      	mov	r0, r6
 800b444:	f000 f96c 	bl	800b720 <_sbrk_r>
 800b448:	3001      	adds	r0, #1
 800b44a:	d1dd      	bne.n	800b408 <_malloc_r+0x64>
 800b44c:	e7cf      	b.n	800b3ee <_malloc_r+0x4a>
 800b44e:	bf00      	nop
 800b450:	20000224 	.word	0x20000224
 800b454:	20000228 	.word	0x20000228

0800b458 <__ssputs_r>:
 800b458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	688e      	ldr	r6, [r1, #8]
 800b45e:	429e      	cmp	r6, r3
 800b460:	4682      	mov	sl, r0
 800b462:	460c      	mov	r4, r1
 800b464:	4690      	mov	r8, r2
 800b466:	461f      	mov	r7, r3
 800b468:	d838      	bhi.n	800b4dc <__ssputs_r+0x84>
 800b46a:	898a      	ldrh	r2, [r1, #12]
 800b46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b470:	d032      	beq.n	800b4d8 <__ssputs_r+0x80>
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	6909      	ldr	r1, [r1, #16]
 800b476:	eba5 0901 	sub.w	r9, r5, r1
 800b47a:	6965      	ldr	r5, [r4, #20]
 800b47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b484:	3301      	adds	r3, #1
 800b486:	444b      	add	r3, r9
 800b488:	106d      	asrs	r5, r5, #1
 800b48a:	429d      	cmp	r5, r3
 800b48c:	bf38      	it	cc
 800b48e:	461d      	movcc	r5, r3
 800b490:	0553      	lsls	r3, r2, #21
 800b492:	d531      	bpl.n	800b4f8 <__ssputs_r+0xa0>
 800b494:	4629      	mov	r1, r5
 800b496:	f7ff ff85 	bl	800b3a4 <_malloc_r>
 800b49a:	4606      	mov	r6, r0
 800b49c:	b950      	cbnz	r0, 800b4b4 <__ssputs_r+0x5c>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	f8ca 3000 	str.w	r3, [sl]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b4:	6921      	ldr	r1, [r4, #16]
 800b4b6:	464a      	mov	r2, r9
 800b4b8:	f7ff fa4c 	bl	800a954 <memcpy>
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	6126      	str	r6, [r4, #16]
 800b4ca:	6165      	str	r5, [r4, #20]
 800b4cc:	444e      	add	r6, r9
 800b4ce:	eba5 0509 	sub.w	r5, r5, r9
 800b4d2:	6026      	str	r6, [r4, #0]
 800b4d4:	60a5      	str	r5, [r4, #8]
 800b4d6:	463e      	mov	r6, r7
 800b4d8:	42be      	cmp	r6, r7
 800b4da:	d900      	bls.n	800b4de <__ssputs_r+0x86>
 800b4dc:	463e      	mov	r6, r7
 800b4de:	4632      	mov	r2, r6
 800b4e0:	6820      	ldr	r0, [r4, #0]
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	f000 f97c 	bl	800b7e0 <memmove>
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	6822      	ldr	r2, [r4, #0]
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	4432      	add	r2, r6
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	6022      	str	r2, [r4, #0]
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e7db      	b.n	800b4b0 <__ssputs_r+0x58>
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	f000 f997 	bl	800b82c <_realloc_r>
 800b4fe:	4606      	mov	r6, r0
 800b500:	2800      	cmp	r0, #0
 800b502:	d1e1      	bne.n	800b4c8 <__ssputs_r+0x70>
 800b504:	6921      	ldr	r1, [r4, #16]
 800b506:	4650      	mov	r0, sl
 800b508:	f7ff fefc 	bl	800b304 <_free_r>
 800b50c:	e7c7      	b.n	800b49e <__ssputs_r+0x46>
	...

0800b510 <_svfiprintf_r>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	4698      	mov	r8, r3
 800b516:	898b      	ldrh	r3, [r1, #12]
 800b518:	061b      	lsls	r3, r3, #24
 800b51a:	b09d      	sub	sp, #116	; 0x74
 800b51c:	4607      	mov	r7, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	4614      	mov	r4, r2
 800b522:	d50e      	bpl.n	800b542 <_svfiprintf_r+0x32>
 800b524:	690b      	ldr	r3, [r1, #16]
 800b526:	b963      	cbnz	r3, 800b542 <_svfiprintf_r+0x32>
 800b528:	2140      	movs	r1, #64	; 0x40
 800b52a:	f7ff ff3b 	bl	800b3a4 <_malloc_r>
 800b52e:	6028      	str	r0, [r5, #0]
 800b530:	6128      	str	r0, [r5, #16]
 800b532:	b920      	cbnz	r0, 800b53e <_svfiprintf_r+0x2e>
 800b534:	230c      	movs	r3, #12
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	f04f 30ff 	mov.w	r0, #4294967295
 800b53c:	e0d1      	b.n	800b6e2 <_svfiprintf_r+0x1d2>
 800b53e:	2340      	movs	r3, #64	; 0x40
 800b540:	616b      	str	r3, [r5, #20]
 800b542:	2300      	movs	r3, #0
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
 800b546:	2320      	movs	r3, #32
 800b548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b550:	2330      	movs	r3, #48	; 0x30
 800b552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6fc <_svfiprintf_r+0x1ec>
 800b556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55a:	f04f 0901 	mov.w	r9, #1
 800b55e:	4623      	mov	r3, r4
 800b560:	469a      	mov	sl, r3
 800b562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b566:	b10a      	cbz	r2, 800b56c <_svfiprintf_r+0x5c>
 800b568:	2a25      	cmp	r2, #37	; 0x25
 800b56a:	d1f9      	bne.n	800b560 <_svfiprintf_r+0x50>
 800b56c:	ebba 0b04 	subs.w	fp, sl, r4
 800b570:	d00b      	beq.n	800b58a <_svfiprintf_r+0x7a>
 800b572:	465b      	mov	r3, fp
 800b574:	4622      	mov	r2, r4
 800b576:	4629      	mov	r1, r5
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff ff6d 	bl	800b458 <__ssputs_r>
 800b57e:	3001      	adds	r0, #1
 800b580:	f000 80aa 	beq.w	800b6d8 <_svfiprintf_r+0x1c8>
 800b584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b586:	445a      	add	r2, fp
 800b588:	9209      	str	r2, [sp, #36]	; 0x24
 800b58a:	f89a 3000 	ldrb.w	r3, [sl]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 80a2 	beq.w	800b6d8 <_svfiprintf_r+0x1c8>
 800b594:	2300      	movs	r3, #0
 800b596:	f04f 32ff 	mov.w	r2, #4294967295
 800b59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b59e:	f10a 0a01 	add.w	sl, sl, #1
 800b5a2:	9304      	str	r3, [sp, #16]
 800b5a4:	9307      	str	r3, [sp, #28]
 800b5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ac:	4654      	mov	r4, sl
 800b5ae:	2205      	movs	r2, #5
 800b5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b4:	4851      	ldr	r0, [pc, #324]	; (800b6fc <_svfiprintf_r+0x1ec>)
 800b5b6:	f7f4 fe33 	bl	8000220 <memchr>
 800b5ba:	9a04      	ldr	r2, [sp, #16]
 800b5bc:	b9d8      	cbnz	r0, 800b5f6 <_svfiprintf_r+0xe6>
 800b5be:	06d0      	lsls	r0, r2, #27
 800b5c0:	bf44      	itt	mi
 800b5c2:	2320      	movmi	r3, #32
 800b5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c8:	0711      	lsls	r1, r2, #28
 800b5ca:	bf44      	itt	mi
 800b5cc:	232b      	movmi	r3, #43	; 0x2b
 800b5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d8:	d015      	beq.n	800b606 <_svfiprintf_r+0xf6>
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	4654      	mov	r4, sl
 800b5de:	2000      	movs	r0, #0
 800b5e0:	f04f 0c0a 	mov.w	ip, #10
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ea:	3b30      	subs	r3, #48	; 0x30
 800b5ec:	2b09      	cmp	r3, #9
 800b5ee:	d94e      	bls.n	800b68e <_svfiprintf_r+0x17e>
 800b5f0:	b1b0      	cbz	r0, 800b620 <_svfiprintf_r+0x110>
 800b5f2:	9207      	str	r2, [sp, #28]
 800b5f4:	e014      	b.n	800b620 <_svfiprintf_r+0x110>
 800b5f6:	eba0 0308 	sub.w	r3, r0, r8
 800b5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b5fe:	4313      	orrs	r3, r2
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	46a2      	mov	sl, r4
 800b604:	e7d2      	b.n	800b5ac <_svfiprintf_r+0x9c>
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	1d19      	adds	r1, r3, #4
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	9103      	str	r1, [sp, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	bfbb      	ittet	lt
 800b612:	425b      	neglt	r3, r3
 800b614:	f042 0202 	orrlt.w	r2, r2, #2
 800b618:	9307      	strge	r3, [sp, #28]
 800b61a:	9307      	strlt	r3, [sp, #28]
 800b61c:	bfb8      	it	lt
 800b61e:	9204      	strlt	r2, [sp, #16]
 800b620:	7823      	ldrb	r3, [r4, #0]
 800b622:	2b2e      	cmp	r3, #46	; 0x2e
 800b624:	d10c      	bne.n	800b640 <_svfiprintf_r+0x130>
 800b626:	7863      	ldrb	r3, [r4, #1]
 800b628:	2b2a      	cmp	r3, #42	; 0x2a
 800b62a:	d135      	bne.n	800b698 <_svfiprintf_r+0x188>
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	1d1a      	adds	r2, r3, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	9203      	str	r2, [sp, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	bfb8      	it	lt
 800b638:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63c:	3402      	adds	r4, #2
 800b63e:	9305      	str	r3, [sp, #20]
 800b640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b70c <_svfiprintf_r+0x1fc>
 800b644:	7821      	ldrb	r1, [r4, #0]
 800b646:	2203      	movs	r2, #3
 800b648:	4650      	mov	r0, sl
 800b64a:	f7f4 fde9 	bl	8000220 <memchr>
 800b64e:	b140      	cbz	r0, 800b662 <_svfiprintf_r+0x152>
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	eba0 000a 	sub.w	r0, r0, sl
 800b656:	fa03 f000 	lsl.w	r0, r3, r0
 800b65a:	9b04      	ldr	r3, [sp, #16]
 800b65c:	4303      	orrs	r3, r0
 800b65e:	3401      	adds	r4, #1
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b666:	4826      	ldr	r0, [pc, #152]	; (800b700 <_svfiprintf_r+0x1f0>)
 800b668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66c:	2206      	movs	r2, #6
 800b66e:	f7f4 fdd7 	bl	8000220 <memchr>
 800b672:	2800      	cmp	r0, #0
 800b674:	d038      	beq.n	800b6e8 <_svfiprintf_r+0x1d8>
 800b676:	4b23      	ldr	r3, [pc, #140]	; (800b704 <_svfiprintf_r+0x1f4>)
 800b678:	bb1b      	cbnz	r3, 800b6c2 <_svfiprintf_r+0x1b2>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3307      	adds	r3, #7
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	3308      	adds	r3, #8
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	4433      	add	r3, r6
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	e767      	b.n	800b55e <_svfiprintf_r+0x4e>
 800b68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b692:	460c      	mov	r4, r1
 800b694:	2001      	movs	r0, #1
 800b696:	e7a5      	b.n	800b5e4 <_svfiprintf_r+0xd4>
 800b698:	2300      	movs	r3, #0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6aa:	3a30      	subs	r2, #48	; 0x30
 800b6ac:	2a09      	cmp	r2, #9
 800b6ae:	d903      	bls.n	800b6b8 <_svfiprintf_r+0x1a8>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0c5      	beq.n	800b640 <_svfiprintf_r+0x130>
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	e7c3      	b.n	800b640 <_svfiprintf_r+0x130>
 800b6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6bc:	4604      	mov	r4, r0
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e7f0      	b.n	800b6a4 <_svfiprintf_r+0x194>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <_svfiprintf_r+0x1f8>)
 800b6ca:	a904      	add	r1, sp, #16
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7fc fa87 	bl	8007be0 <_printf_float>
 800b6d2:	1c42      	adds	r2, r0, #1
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	d1d6      	bne.n	800b686 <_svfiprintf_r+0x176>
 800b6d8:	89ab      	ldrh	r3, [r5, #12]
 800b6da:	065b      	lsls	r3, r3, #25
 800b6dc:	f53f af2c 	bmi.w	800b538 <_svfiprintf_r+0x28>
 800b6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6e2:	b01d      	add	sp, #116	; 0x74
 800b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	ab03      	add	r3, sp, #12
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4b06      	ldr	r3, [pc, #24]	; (800b708 <_svfiprintf_r+0x1f8>)
 800b6f0:	a904      	add	r1, sp, #16
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	f7fc fd18 	bl	8008128 <_printf_i>
 800b6f8:	e7eb      	b.n	800b6d2 <_svfiprintf_r+0x1c2>
 800b6fa:	bf00      	nop
 800b6fc:	0800c774 	.word	0x0800c774
 800b700:	0800c77e 	.word	0x0800c77e
 800b704:	08007be1 	.word	0x08007be1
 800b708:	0800b459 	.word	0x0800b459
 800b70c:	0800c77a 	.word	0x0800c77a

0800b710 <nan>:
 800b710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b718 <nan+0x8>
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	00000000 	.word	0x00000000
 800b71c:	7ff80000 	.word	0x7ff80000

0800b720 <_sbrk_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_sbrk_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f6 fbb6 	bl	8001e9c <_sbrk>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_sbrk_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_sbrk_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20000528 	.word	0x20000528

0800b740 <strncmp>:
 800b740:	b510      	push	{r4, lr}
 800b742:	b16a      	cbz	r2, 800b760 <strncmp+0x20>
 800b744:	3901      	subs	r1, #1
 800b746:	1884      	adds	r4, r0, r2
 800b748:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b74c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b750:	4293      	cmp	r3, r2
 800b752:	d103      	bne.n	800b75c <strncmp+0x1c>
 800b754:	42a0      	cmp	r0, r4
 800b756:	d001      	beq.n	800b75c <strncmp+0x1c>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f5      	bne.n	800b748 <strncmp+0x8>
 800b75c:	1a98      	subs	r0, r3, r2
 800b75e:	bd10      	pop	{r4, pc}
 800b760:	4610      	mov	r0, r2
 800b762:	e7fc      	b.n	800b75e <strncmp+0x1e>

0800b764 <__ascii_wctomb>:
 800b764:	b149      	cbz	r1, 800b77a <__ascii_wctomb+0x16>
 800b766:	2aff      	cmp	r2, #255	; 0xff
 800b768:	bf85      	ittet	hi
 800b76a:	238a      	movhi	r3, #138	; 0x8a
 800b76c:	6003      	strhi	r3, [r0, #0]
 800b76e:	700a      	strbls	r2, [r1, #0]
 800b770:	f04f 30ff 	movhi.w	r0, #4294967295
 800b774:	bf98      	it	ls
 800b776:	2001      	movls	r0, #1
 800b778:	4770      	bx	lr
 800b77a:	4608      	mov	r0, r1
 800b77c:	4770      	bx	lr
	...

0800b780 <__assert_func>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	4614      	mov	r4, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__assert_func+0x2c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	68d8      	ldr	r0, [r3, #12]
 800b78e:	b14c      	cbz	r4, 800b7a4 <__assert_func+0x24>
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <__assert_func+0x30>)
 800b792:	9100      	str	r1, [sp, #0]
 800b794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <__assert_func+0x34>)
 800b79a:	462b      	mov	r3, r5
 800b79c:	f000 f80e 	bl	800b7bc <fiprintf>
 800b7a0:	f000 fa84 	bl	800bcac <abort>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <__assert_func+0x38>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e7f3      	b.n	800b792 <__assert_func+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	20000018 	.word	0x20000018
 800b7b0:	0800c785 	.word	0x0800c785
 800b7b4:	0800c792 	.word	0x0800c792
 800b7b8:	0800c7c0 	.word	0x0800c7c0

0800b7bc <fiprintf>:
 800b7bc:	b40e      	push	{r1, r2, r3}
 800b7be:	b503      	push	{r0, r1, lr}
 800b7c0:	4601      	mov	r1, r0
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	4805      	ldr	r0, [pc, #20]	; (800b7dc <fiprintf+0x20>)
 800b7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ca:	6800      	ldr	r0, [r0, #0]
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	f000 f87d 	bl	800b8cc <_vfiprintf_r>
 800b7d2:	b002      	add	sp, #8
 800b7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d8:	b003      	add	sp, #12
 800b7da:	4770      	bx	lr
 800b7dc:	20000018 	.word	0x20000018

0800b7e0 <memmove>:
 800b7e0:	4288      	cmp	r0, r1
 800b7e2:	b510      	push	{r4, lr}
 800b7e4:	eb01 0402 	add.w	r4, r1, r2
 800b7e8:	d902      	bls.n	800b7f0 <memmove+0x10>
 800b7ea:	4284      	cmp	r4, r0
 800b7ec:	4623      	mov	r3, r4
 800b7ee:	d807      	bhi.n	800b800 <memmove+0x20>
 800b7f0:	1e43      	subs	r3, r0, #1
 800b7f2:	42a1      	cmp	r1, r4
 800b7f4:	d008      	beq.n	800b808 <memmove+0x28>
 800b7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7fe:	e7f8      	b.n	800b7f2 <memmove+0x12>
 800b800:	4402      	add	r2, r0
 800b802:	4601      	mov	r1, r0
 800b804:	428a      	cmp	r2, r1
 800b806:	d100      	bne.n	800b80a <memmove+0x2a>
 800b808:	bd10      	pop	{r4, pc}
 800b80a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b80e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b812:	e7f7      	b.n	800b804 <memmove+0x24>

0800b814 <__malloc_lock>:
 800b814:	4801      	ldr	r0, [pc, #4]	; (800b81c <__malloc_lock+0x8>)
 800b816:	f000 bc09 	b.w	800c02c <__retarget_lock_acquire_recursive>
 800b81a:	bf00      	nop
 800b81c:	20000530 	.word	0x20000530

0800b820 <__malloc_unlock>:
 800b820:	4801      	ldr	r0, [pc, #4]	; (800b828 <__malloc_unlock+0x8>)
 800b822:	f000 bc04 	b.w	800c02e <__retarget_lock_release_recursive>
 800b826:	bf00      	nop
 800b828:	20000530 	.word	0x20000530

0800b82c <_realloc_r>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	4607      	mov	r7, r0
 800b830:	4614      	mov	r4, r2
 800b832:	460e      	mov	r6, r1
 800b834:	b921      	cbnz	r1, 800b840 <_realloc_r+0x14>
 800b836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b83a:	4611      	mov	r1, r2
 800b83c:	f7ff bdb2 	b.w	800b3a4 <_malloc_r>
 800b840:	b922      	cbnz	r2, 800b84c <_realloc_r+0x20>
 800b842:	f7ff fd5f 	bl	800b304 <_free_r>
 800b846:	4625      	mov	r5, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b84c:	f000 fc54 	bl	800c0f8 <_malloc_usable_size_r>
 800b850:	42a0      	cmp	r0, r4
 800b852:	d20f      	bcs.n	800b874 <_realloc_r+0x48>
 800b854:	4621      	mov	r1, r4
 800b856:	4638      	mov	r0, r7
 800b858:	f7ff fda4 	bl	800b3a4 <_malloc_r>
 800b85c:	4605      	mov	r5, r0
 800b85e:	2800      	cmp	r0, #0
 800b860:	d0f2      	beq.n	800b848 <_realloc_r+0x1c>
 800b862:	4631      	mov	r1, r6
 800b864:	4622      	mov	r2, r4
 800b866:	f7ff f875 	bl	800a954 <memcpy>
 800b86a:	4631      	mov	r1, r6
 800b86c:	4638      	mov	r0, r7
 800b86e:	f7ff fd49 	bl	800b304 <_free_r>
 800b872:	e7e9      	b.n	800b848 <_realloc_r+0x1c>
 800b874:	4635      	mov	r5, r6
 800b876:	e7e7      	b.n	800b848 <_realloc_r+0x1c>

0800b878 <__sfputc_r>:
 800b878:	6893      	ldr	r3, [r2, #8]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	b410      	push	{r4}
 800b880:	6093      	str	r3, [r2, #8]
 800b882:	da08      	bge.n	800b896 <__sfputc_r+0x1e>
 800b884:	6994      	ldr	r4, [r2, #24]
 800b886:	42a3      	cmp	r3, r4
 800b888:	db01      	blt.n	800b88e <__sfputc_r+0x16>
 800b88a:	290a      	cmp	r1, #10
 800b88c:	d103      	bne.n	800b896 <__sfputc_r+0x1e>
 800b88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b892:	f000 b94b 	b.w	800bb2c <__swbuf_r>
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	1c58      	adds	r0, r3, #1
 800b89a:	6010      	str	r0, [r2, #0]
 800b89c:	7019      	strb	r1, [r3, #0]
 800b89e:	4608      	mov	r0, r1
 800b8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <__sfputs_r>:
 800b8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	18d5      	adds	r5, r2, r3
 800b8b0:	42ac      	cmp	r4, r5
 800b8b2:	d101      	bne.n	800b8b8 <__sfputs_r+0x12>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e007      	b.n	800b8c8 <__sfputs_r+0x22>
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	463a      	mov	r2, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff ffda 	bl	800b878 <__sfputc_r>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d1f3      	bne.n	800b8b0 <__sfputs_r+0xa>
 800b8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8cc <_vfiprintf_r>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	b09d      	sub	sp, #116	; 0x74
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	4698      	mov	r8, r3
 800b8d8:	4606      	mov	r6, r0
 800b8da:	b118      	cbz	r0, 800b8e4 <_vfiprintf_r+0x18>
 800b8dc:	6983      	ldr	r3, [r0, #24]
 800b8de:	b90b      	cbnz	r3, 800b8e4 <_vfiprintf_r+0x18>
 800b8e0:	f000 fb06 	bl	800bef0 <__sinit>
 800b8e4:	4b89      	ldr	r3, [pc, #548]	; (800bb0c <_vfiprintf_r+0x240>)
 800b8e6:	429d      	cmp	r5, r3
 800b8e8:	d11b      	bne.n	800b922 <_vfiprintf_r+0x56>
 800b8ea:	6875      	ldr	r5, [r6, #4]
 800b8ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ee:	07d9      	lsls	r1, r3, #31
 800b8f0:	d405      	bmi.n	800b8fe <_vfiprintf_r+0x32>
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	059a      	lsls	r2, r3, #22
 800b8f6:	d402      	bmi.n	800b8fe <_vfiprintf_r+0x32>
 800b8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fa:	f000 fb97 	bl	800c02c <__retarget_lock_acquire_recursive>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	071b      	lsls	r3, r3, #28
 800b902:	d501      	bpl.n	800b908 <_vfiprintf_r+0x3c>
 800b904:	692b      	ldr	r3, [r5, #16]
 800b906:	b9eb      	cbnz	r3, 800b944 <_vfiprintf_r+0x78>
 800b908:	4629      	mov	r1, r5
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 f960 	bl	800bbd0 <__swsetup_r>
 800b910:	b1c0      	cbz	r0, 800b944 <_vfiprintf_r+0x78>
 800b912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b914:	07dc      	lsls	r4, r3, #31
 800b916:	d50e      	bpl.n	800b936 <_vfiprintf_r+0x6a>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	b01d      	add	sp, #116	; 0x74
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	4b7b      	ldr	r3, [pc, #492]	; (800bb10 <_vfiprintf_r+0x244>)
 800b924:	429d      	cmp	r5, r3
 800b926:	d101      	bne.n	800b92c <_vfiprintf_r+0x60>
 800b928:	68b5      	ldr	r5, [r6, #8]
 800b92a:	e7df      	b.n	800b8ec <_vfiprintf_r+0x20>
 800b92c:	4b79      	ldr	r3, [pc, #484]	; (800bb14 <_vfiprintf_r+0x248>)
 800b92e:	429d      	cmp	r5, r3
 800b930:	bf08      	it	eq
 800b932:	68f5      	ldreq	r5, [r6, #12]
 800b934:	e7da      	b.n	800b8ec <_vfiprintf_r+0x20>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	0598      	lsls	r0, r3, #22
 800b93a:	d4ed      	bmi.n	800b918 <_vfiprintf_r+0x4c>
 800b93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b93e:	f000 fb76 	bl	800c02e <__retarget_lock_release_recursive>
 800b942:	e7e9      	b.n	800b918 <_vfiprintf_r+0x4c>
 800b944:	2300      	movs	r3, #0
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	2320      	movs	r3, #32
 800b94a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b94e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b952:	2330      	movs	r3, #48	; 0x30
 800b954:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb18 <_vfiprintf_r+0x24c>
 800b958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95c:	f04f 0901 	mov.w	r9, #1
 800b960:	4623      	mov	r3, r4
 800b962:	469a      	mov	sl, r3
 800b964:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b968:	b10a      	cbz	r2, 800b96e <_vfiprintf_r+0xa2>
 800b96a:	2a25      	cmp	r2, #37	; 0x25
 800b96c:	d1f9      	bne.n	800b962 <_vfiprintf_r+0x96>
 800b96e:	ebba 0b04 	subs.w	fp, sl, r4
 800b972:	d00b      	beq.n	800b98c <_vfiprintf_r+0xc0>
 800b974:	465b      	mov	r3, fp
 800b976:	4622      	mov	r2, r4
 800b978:	4629      	mov	r1, r5
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7ff ff93 	bl	800b8a6 <__sfputs_r>
 800b980:	3001      	adds	r0, #1
 800b982:	f000 80aa 	beq.w	800bada <_vfiprintf_r+0x20e>
 800b986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b988:	445a      	add	r2, fp
 800b98a:	9209      	str	r2, [sp, #36]	; 0x24
 800b98c:	f89a 3000 	ldrb.w	r3, [sl]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 80a2 	beq.w	800bada <_vfiprintf_r+0x20e>
 800b996:	2300      	movs	r3, #0
 800b998:	f04f 32ff 	mov.w	r2, #4294967295
 800b99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a0:	f10a 0a01 	add.w	sl, sl, #1
 800b9a4:	9304      	str	r3, [sp, #16]
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ae:	4654      	mov	r4, sl
 800b9b0:	2205      	movs	r2, #5
 800b9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b6:	4858      	ldr	r0, [pc, #352]	; (800bb18 <_vfiprintf_r+0x24c>)
 800b9b8:	f7f4 fc32 	bl	8000220 <memchr>
 800b9bc:	9a04      	ldr	r2, [sp, #16]
 800b9be:	b9d8      	cbnz	r0, 800b9f8 <_vfiprintf_r+0x12c>
 800b9c0:	06d1      	lsls	r1, r2, #27
 800b9c2:	bf44      	itt	mi
 800b9c4:	2320      	movmi	r3, #32
 800b9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ca:	0713      	lsls	r3, r2, #28
 800b9cc:	bf44      	itt	mi
 800b9ce:	232b      	movmi	r3, #43	; 0x2b
 800b9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9da:	d015      	beq.n	800ba08 <_vfiprintf_r+0x13c>
 800b9dc:	9a07      	ldr	r2, [sp, #28]
 800b9de:	4654      	mov	r4, sl
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f04f 0c0a 	mov.w	ip, #10
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ec:	3b30      	subs	r3, #48	; 0x30
 800b9ee:	2b09      	cmp	r3, #9
 800b9f0:	d94e      	bls.n	800ba90 <_vfiprintf_r+0x1c4>
 800b9f2:	b1b0      	cbz	r0, 800ba22 <_vfiprintf_r+0x156>
 800b9f4:	9207      	str	r2, [sp, #28]
 800b9f6:	e014      	b.n	800ba22 <_vfiprintf_r+0x156>
 800b9f8:	eba0 0308 	sub.w	r3, r0, r8
 800b9fc:	fa09 f303 	lsl.w	r3, r9, r3
 800ba00:	4313      	orrs	r3, r2
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	46a2      	mov	sl, r4
 800ba06:	e7d2      	b.n	800b9ae <_vfiprintf_r+0xe2>
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	1d19      	adds	r1, r3, #4
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	9103      	str	r1, [sp, #12]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfbb      	ittet	lt
 800ba14:	425b      	neglt	r3, r3
 800ba16:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1a:	9307      	strge	r3, [sp, #28]
 800ba1c:	9307      	strlt	r3, [sp, #28]
 800ba1e:	bfb8      	it	lt
 800ba20:	9204      	strlt	r2, [sp, #16]
 800ba22:	7823      	ldrb	r3, [r4, #0]
 800ba24:	2b2e      	cmp	r3, #46	; 0x2e
 800ba26:	d10c      	bne.n	800ba42 <_vfiprintf_r+0x176>
 800ba28:	7863      	ldrb	r3, [r4, #1]
 800ba2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2c:	d135      	bne.n	800ba9a <_vfiprintf_r+0x1ce>
 800ba2e:	9b03      	ldr	r3, [sp, #12]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	9203      	str	r2, [sp, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	bfb8      	it	lt
 800ba3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba3e:	3402      	adds	r4, #2
 800ba40:	9305      	str	r3, [sp, #20]
 800ba42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb28 <_vfiprintf_r+0x25c>
 800ba46:	7821      	ldrb	r1, [r4, #0]
 800ba48:	2203      	movs	r2, #3
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	f7f4 fbe8 	bl	8000220 <memchr>
 800ba50:	b140      	cbz	r0, 800ba64 <_vfiprintf_r+0x198>
 800ba52:	2340      	movs	r3, #64	; 0x40
 800ba54:	eba0 000a 	sub.w	r0, r0, sl
 800ba58:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5c:	9b04      	ldr	r3, [sp, #16]
 800ba5e:	4303      	orrs	r3, r0
 800ba60:	3401      	adds	r4, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba68:	482c      	ldr	r0, [pc, #176]	; (800bb1c <_vfiprintf_r+0x250>)
 800ba6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba6e:	2206      	movs	r2, #6
 800ba70:	f7f4 fbd6 	bl	8000220 <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d03f      	beq.n	800baf8 <_vfiprintf_r+0x22c>
 800ba78:	4b29      	ldr	r3, [pc, #164]	; (800bb20 <_vfiprintf_r+0x254>)
 800ba7a:	bb1b      	cbnz	r3, 800bac4 <_vfiprintf_r+0x1f8>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	3308      	adds	r3, #8
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	443b      	add	r3, r7
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8e:	e767      	b.n	800b960 <_vfiprintf_r+0x94>
 800ba90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7a5      	b.n	800b9e6 <_vfiprintf_r+0x11a>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9305      	str	r3, [sp, #20]
 800baa0:	4619      	mov	r1, r3
 800baa2:	f04f 0c0a 	mov.w	ip, #10
 800baa6:	4620      	mov	r0, r4
 800baa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baac:	3a30      	subs	r2, #48	; 0x30
 800baae:	2a09      	cmp	r2, #9
 800bab0:	d903      	bls.n	800baba <_vfiprintf_r+0x1ee>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d0c5      	beq.n	800ba42 <_vfiprintf_r+0x176>
 800bab6:	9105      	str	r1, [sp, #20]
 800bab8:	e7c3      	b.n	800ba42 <_vfiprintf_r+0x176>
 800baba:	fb0c 2101 	mla	r1, ip, r1, r2
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	e7f0      	b.n	800baa6 <_vfiprintf_r+0x1da>
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	462a      	mov	r2, r5
 800baca:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <_vfiprintf_r+0x258>)
 800bacc:	a904      	add	r1, sp, #16
 800bace:	4630      	mov	r0, r6
 800bad0:	f7fc f886 	bl	8007be0 <_printf_float>
 800bad4:	4607      	mov	r7, r0
 800bad6:	1c78      	adds	r0, r7, #1
 800bad8:	d1d6      	bne.n	800ba88 <_vfiprintf_r+0x1bc>
 800bada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800badc:	07d9      	lsls	r1, r3, #31
 800bade:	d405      	bmi.n	800baec <_vfiprintf_r+0x220>
 800bae0:	89ab      	ldrh	r3, [r5, #12]
 800bae2:	059a      	lsls	r2, r3, #22
 800bae4:	d402      	bmi.n	800baec <_vfiprintf_r+0x220>
 800bae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bae8:	f000 faa1 	bl	800c02e <__retarget_lock_release_recursive>
 800baec:	89ab      	ldrh	r3, [r5, #12]
 800baee:	065b      	lsls	r3, r3, #25
 800baf0:	f53f af12 	bmi.w	800b918 <_vfiprintf_r+0x4c>
 800baf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baf6:	e711      	b.n	800b91c <_vfiprintf_r+0x50>
 800baf8:	ab03      	add	r3, sp, #12
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	462a      	mov	r2, r5
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <_vfiprintf_r+0x258>)
 800bb00:	a904      	add	r1, sp, #16
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7fc fb10 	bl	8008128 <_printf_i>
 800bb08:	e7e4      	b.n	800bad4 <_vfiprintf_r+0x208>
 800bb0a:	bf00      	nop
 800bb0c:	0800c7e4 	.word	0x0800c7e4
 800bb10:	0800c804 	.word	0x0800c804
 800bb14:	0800c7c4 	.word	0x0800c7c4
 800bb18:	0800c774 	.word	0x0800c774
 800bb1c:	0800c77e 	.word	0x0800c77e
 800bb20:	08007be1 	.word	0x08007be1
 800bb24:	0800b8a7 	.word	0x0800b8a7
 800bb28:	0800c77a 	.word	0x0800c77a

0800bb2c <__swbuf_r>:
 800bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2e:	460e      	mov	r6, r1
 800bb30:	4614      	mov	r4, r2
 800bb32:	4605      	mov	r5, r0
 800bb34:	b118      	cbz	r0, 800bb3e <__swbuf_r+0x12>
 800bb36:	6983      	ldr	r3, [r0, #24]
 800bb38:	b90b      	cbnz	r3, 800bb3e <__swbuf_r+0x12>
 800bb3a:	f000 f9d9 	bl	800bef0 <__sinit>
 800bb3e:	4b21      	ldr	r3, [pc, #132]	; (800bbc4 <__swbuf_r+0x98>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	d12b      	bne.n	800bb9c <__swbuf_r+0x70>
 800bb44:	686c      	ldr	r4, [r5, #4]
 800bb46:	69a3      	ldr	r3, [r4, #24]
 800bb48:	60a3      	str	r3, [r4, #8]
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	071a      	lsls	r2, r3, #28
 800bb4e:	d52f      	bpl.n	800bbb0 <__swbuf_r+0x84>
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	b36b      	cbz	r3, 800bbb0 <__swbuf_r+0x84>
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	6820      	ldr	r0, [r4, #0]
 800bb58:	1ac0      	subs	r0, r0, r3
 800bb5a:	6963      	ldr	r3, [r4, #20]
 800bb5c:	b2f6      	uxtb	r6, r6
 800bb5e:	4283      	cmp	r3, r0
 800bb60:	4637      	mov	r7, r6
 800bb62:	dc04      	bgt.n	800bb6e <__swbuf_r+0x42>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 f92e 	bl	800bdc8 <_fflush_r>
 800bb6c:	bb30      	cbnz	r0, 800bbbc <__swbuf_r+0x90>
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	60a3      	str	r3, [r4, #8]
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	6022      	str	r2, [r4, #0]
 800bb7a:	701e      	strb	r6, [r3, #0]
 800bb7c:	6963      	ldr	r3, [r4, #20]
 800bb7e:	3001      	adds	r0, #1
 800bb80:	4283      	cmp	r3, r0
 800bb82:	d004      	beq.n	800bb8e <__swbuf_r+0x62>
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	07db      	lsls	r3, r3, #31
 800bb88:	d506      	bpl.n	800bb98 <__swbuf_r+0x6c>
 800bb8a:	2e0a      	cmp	r6, #10
 800bb8c:	d104      	bne.n	800bb98 <__swbuf_r+0x6c>
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4628      	mov	r0, r5
 800bb92:	f000 f919 	bl	800bdc8 <_fflush_r>
 800bb96:	b988      	cbnz	r0, 800bbbc <__swbuf_r+0x90>
 800bb98:	4638      	mov	r0, r7
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <__swbuf_r+0x9c>)
 800bb9e:	429c      	cmp	r4, r3
 800bba0:	d101      	bne.n	800bba6 <__swbuf_r+0x7a>
 800bba2:	68ac      	ldr	r4, [r5, #8]
 800bba4:	e7cf      	b.n	800bb46 <__swbuf_r+0x1a>
 800bba6:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <__swbuf_r+0xa0>)
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	bf08      	it	eq
 800bbac:	68ec      	ldreq	r4, [r5, #12]
 800bbae:	e7ca      	b.n	800bb46 <__swbuf_r+0x1a>
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f80c 	bl	800bbd0 <__swsetup_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d0cb      	beq.n	800bb54 <__swbuf_r+0x28>
 800bbbc:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc0:	e7ea      	b.n	800bb98 <__swbuf_r+0x6c>
 800bbc2:	bf00      	nop
 800bbc4:	0800c7e4 	.word	0x0800c7e4
 800bbc8:	0800c804 	.word	0x0800c804
 800bbcc:	0800c7c4 	.word	0x0800c7c4

0800bbd0 <__swsetup_r>:
 800bbd0:	4b32      	ldr	r3, [pc, #200]	; (800bc9c <__swsetup_r+0xcc>)
 800bbd2:	b570      	push	{r4, r5, r6, lr}
 800bbd4:	681d      	ldr	r5, [r3, #0]
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	460c      	mov	r4, r1
 800bbda:	b125      	cbz	r5, 800bbe6 <__swsetup_r+0x16>
 800bbdc:	69ab      	ldr	r3, [r5, #24]
 800bbde:	b913      	cbnz	r3, 800bbe6 <__swsetup_r+0x16>
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f000 f985 	bl	800bef0 <__sinit>
 800bbe6:	4b2e      	ldr	r3, [pc, #184]	; (800bca0 <__swsetup_r+0xd0>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	d10f      	bne.n	800bc0c <__swsetup_r+0x3c>
 800bbec:	686c      	ldr	r4, [r5, #4]
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf4:	0719      	lsls	r1, r3, #28
 800bbf6:	d42c      	bmi.n	800bc52 <__swsetup_r+0x82>
 800bbf8:	06dd      	lsls	r5, r3, #27
 800bbfa:	d411      	bmi.n	800bc20 <__swsetup_r+0x50>
 800bbfc:	2309      	movs	r3, #9
 800bbfe:	6033      	str	r3, [r6, #0]
 800bc00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	e03e      	b.n	800bc8a <__swsetup_r+0xba>
 800bc0c:	4b25      	ldr	r3, [pc, #148]	; (800bca4 <__swsetup_r+0xd4>)
 800bc0e:	429c      	cmp	r4, r3
 800bc10:	d101      	bne.n	800bc16 <__swsetup_r+0x46>
 800bc12:	68ac      	ldr	r4, [r5, #8]
 800bc14:	e7eb      	b.n	800bbee <__swsetup_r+0x1e>
 800bc16:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <__swsetup_r+0xd8>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	bf08      	it	eq
 800bc1c:	68ec      	ldreq	r4, [r5, #12]
 800bc1e:	e7e6      	b.n	800bbee <__swsetup_r+0x1e>
 800bc20:	0758      	lsls	r0, r3, #29
 800bc22:	d512      	bpl.n	800bc4a <__swsetup_r+0x7a>
 800bc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc26:	b141      	cbz	r1, 800bc3a <__swsetup_r+0x6a>
 800bc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc2c:	4299      	cmp	r1, r3
 800bc2e:	d002      	beq.n	800bc36 <__swsetup_r+0x66>
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7ff fb67 	bl	800b304 <_free_r>
 800bc36:	2300      	movs	r3, #0
 800bc38:	6363      	str	r3, [r4, #52]	; 0x34
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	2300      	movs	r3, #0
 800bc44:	6063      	str	r3, [r4, #4]
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f043 0308 	orr.w	r3, r3, #8
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	b94b      	cbnz	r3, 800bc6a <__swsetup_r+0x9a>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc60:	d003      	beq.n	800bc6a <__swsetup_r+0x9a>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4630      	mov	r0, r6
 800bc66:	f000 fa07 	bl	800c078 <__smakebuf_r>
 800bc6a:	89a0      	ldrh	r0, [r4, #12]
 800bc6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc70:	f010 0301 	ands.w	r3, r0, #1
 800bc74:	d00a      	beq.n	800bc8c <__swsetup_r+0xbc>
 800bc76:	2300      	movs	r3, #0
 800bc78:	60a3      	str	r3, [r4, #8]
 800bc7a:	6963      	ldr	r3, [r4, #20]
 800bc7c:	425b      	negs	r3, r3
 800bc7e:	61a3      	str	r3, [r4, #24]
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	b943      	cbnz	r3, 800bc96 <__swsetup_r+0xc6>
 800bc84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc88:	d1ba      	bne.n	800bc00 <__swsetup_r+0x30>
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}
 800bc8c:	0781      	lsls	r1, r0, #30
 800bc8e:	bf58      	it	pl
 800bc90:	6963      	ldrpl	r3, [r4, #20]
 800bc92:	60a3      	str	r3, [r4, #8]
 800bc94:	e7f4      	b.n	800bc80 <__swsetup_r+0xb0>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7f7      	b.n	800bc8a <__swsetup_r+0xba>
 800bc9a:	bf00      	nop
 800bc9c:	20000018 	.word	0x20000018
 800bca0:	0800c7e4 	.word	0x0800c7e4
 800bca4:	0800c804 	.word	0x0800c804
 800bca8:	0800c7c4 	.word	0x0800c7c4

0800bcac <abort>:
 800bcac:	b508      	push	{r3, lr}
 800bcae:	2006      	movs	r0, #6
 800bcb0:	f000 fa52 	bl	800c158 <raise>
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7f6 f879 	bl	8001dac <_exit>
	...

0800bcbc <__sflush_r>:
 800bcbc:	898a      	ldrh	r2, [r1, #12]
 800bcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	0710      	lsls	r0, r2, #28
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	d458      	bmi.n	800bd7c <__sflush_r+0xc0>
 800bcca:	684b      	ldr	r3, [r1, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dc05      	bgt.n	800bcdc <__sflush_r+0x20>
 800bcd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dc02      	bgt.n	800bcdc <__sflush_r+0x20>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	d0f9      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bce8:	682f      	ldr	r7, [r5, #0]
 800bcea:	602b      	str	r3, [r5, #0]
 800bcec:	d032      	beq.n	800bd54 <__sflush_r+0x98>
 800bcee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	075a      	lsls	r2, r3, #29
 800bcf4:	d505      	bpl.n	800bd02 <__sflush_r+0x46>
 800bcf6:	6863      	ldr	r3, [r4, #4]
 800bcf8:	1ac0      	subs	r0, r0, r3
 800bcfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcfc:	b10b      	cbz	r3, 800bd02 <__sflush_r+0x46>
 800bcfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd00:	1ac0      	subs	r0, r0, r3
 800bd02:	2300      	movs	r3, #0
 800bd04:	4602      	mov	r2, r0
 800bd06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd08:	6a21      	ldr	r1, [r4, #32]
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b0      	blx	r6
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	d106      	bne.n	800bd22 <__sflush_r+0x66>
 800bd14:	6829      	ldr	r1, [r5, #0]
 800bd16:	291d      	cmp	r1, #29
 800bd18:	d82c      	bhi.n	800bd74 <__sflush_r+0xb8>
 800bd1a:	4a2a      	ldr	r2, [pc, #168]	; (800bdc4 <__sflush_r+0x108>)
 800bd1c:	40ca      	lsrs	r2, r1
 800bd1e:	07d6      	lsls	r6, r2, #31
 800bd20:	d528      	bpl.n	800bd74 <__sflush_r+0xb8>
 800bd22:	2200      	movs	r2, #0
 800bd24:	6062      	str	r2, [r4, #4]
 800bd26:	04d9      	lsls	r1, r3, #19
 800bd28:	6922      	ldr	r2, [r4, #16]
 800bd2a:	6022      	str	r2, [r4, #0]
 800bd2c:	d504      	bpl.n	800bd38 <__sflush_r+0x7c>
 800bd2e:	1c42      	adds	r2, r0, #1
 800bd30:	d101      	bne.n	800bd36 <__sflush_r+0x7a>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b903      	cbnz	r3, 800bd38 <__sflush_r+0x7c>
 800bd36:	6560      	str	r0, [r4, #84]	; 0x54
 800bd38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3a:	602f      	str	r7, [r5, #0]
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	d0ca      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__sflush_r+0x92>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7ff fadb 	bl	800b304 <_free_r>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	6360      	str	r0, [r4, #52]	; 0x34
 800bd52:	e7c1      	b.n	800bcd8 <__sflush_r+0x1c>
 800bd54:	6a21      	ldr	r1, [r4, #32]
 800bd56:	2301      	movs	r3, #1
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b0      	blx	r6
 800bd5c:	1c41      	adds	r1, r0, #1
 800bd5e:	d1c7      	bne.n	800bcf0 <__sflush_r+0x34>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0c4      	beq.n	800bcf0 <__sflush_r+0x34>
 800bd66:	2b1d      	cmp	r3, #29
 800bd68:	d001      	beq.n	800bd6e <__sflush_r+0xb2>
 800bd6a:	2b16      	cmp	r3, #22
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0xb6>
 800bd6e:	602f      	str	r7, [r5, #0]
 800bd70:	e7b1      	b.n	800bcd6 <__sflush_r+0x1a>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	e7ad      	b.n	800bcd8 <__sflush_r+0x1c>
 800bd7c:	690f      	ldr	r7, [r1, #16]
 800bd7e:	2f00      	cmp	r7, #0
 800bd80:	d0a9      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bd82:	0793      	lsls	r3, r2, #30
 800bd84:	680e      	ldr	r6, [r1, #0]
 800bd86:	bf08      	it	eq
 800bd88:	694b      	ldreq	r3, [r1, #20]
 800bd8a:	600f      	str	r7, [r1, #0]
 800bd8c:	bf18      	it	ne
 800bd8e:	2300      	movne	r3, #0
 800bd90:	eba6 0807 	sub.w	r8, r6, r7
 800bd94:	608b      	str	r3, [r1, #8]
 800bd96:	f1b8 0f00 	cmp.w	r8, #0
 800bd9a:	dd9c      	ble.n	800bcd6 <__sflush_r+0x1a>
 800bd9c:	6a21      	ldr	r1, [r4, #32]
 800bd9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bda0:	4643      	mov	r3, r8
 800bda2:	463a      	mov	r2, r7
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b0      	blx	r6
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dc06      	bgt.n	800bdba <__sflush_r+0xfe>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	e78e      	b.n	800bcd8 <__sflush_r+0x1c>
 800bdba:	4407      	add	r7, r0
 800bdbc:	eba8 0800 	sub.w	r8, r8, r0
 800bdc0:	e7e9      	b.n	800bd96 <__sflush_r+0xda>
 800bdc2:	bf00      	nop
 800bdc4:	20400001 	.word	0x20400001

0800bdc8 <_fflush_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	690b      	ldr	r3, [r1, #16]
 800bdcc:	4605      	mov	r5, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	b913      	cbnz	r3, 800bdd8 <_fflush_r+0x10>
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	b118      	cbz	r0, 800bde2 <_fflush_r+0x1a>
 800bdda:	6983      	ldr	r3, [r0, #24]
 800bddc:	b90b      	cbnz	r3, 800bde2 <_fflush_r+0x1a>
 800bdde:	f000 f887 	bl	800bef0 <__sinit>
 800bde2:	4b14      	ldr	r3, [pc, #80]	; (800be34 <_fflush_r+0x6c>)
 800bde4:	429c      	cmp	r4, r3
 800bde6:	d11b      	bne.n	800be20 <_fflush_r+0x58>
 800bde8:	686c      	ldr	r4, [r5, #4]
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0ef      	beq.n	800bdd2 <_fflush_r+0xa>
 800bdf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d404      	bmi.n	800be02 <_fflush_r+0x3a>
 800bdf8:	0599      	lsls	r1, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_fflush_r+0x3a>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfe:	f000 f915 	bl	800c02c <__retarget_lock_acquire_recursive>
 800be02:	4628      	mov	r0, r5
 800be04:	4621      	mov	r1, r4
 800be06:	f7ff ff59 	bl	800bcbc <__sflush_r>
 800be0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	4605      	mov	r5, r0
 800be10:	d4e0      	bmi.n	800bdd4 <_fflush_r+0xc>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	059b      	lsls	r3, r3, #22
 800be16:	d4dd      	bmi.n	800bdd4 <_fflush_r+0xc>
 800be18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1a:	f000 f908 	bl	800c02e <__retarget_lock_release_recursive>
 800be1e:	e7d9      	b.n	800bdd4 <_fflush_r+0xc>
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <_fflush_r+0x70>)
 800be22:	429c      	cmp	r4, r3
 800be24:	d101      	bne.n	800be2a <_fflush_r+0x62>
 800be26:	68ac      	ldr	r4, [r5, #8]
 800be28:	e7df      	b.n	800bdea <_fflush_r+0x22>
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <_fflush_r+0x74>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	bf08      	it	eq
 800be30:	68ec      	ldreq	r4, [r5, #12]
 800be32:	e7da      	b.n	800bdea <_fflush_r+0x22>
 800be34:	0800c7e4 	.word	0x0800c7e4
 800be38:	0800c804 	.word	0x0800c804
 800be3c:	0800c7c4 	.word	0x0800c7c4

0800be40 <std>:
 800be40:	2300      	movs	r3, #0
 800be42:	b510      	push	{r4, lr}
 800be44:	4604      	mov	r4, r0
 800be46:	e9c0 3300 	strd	r3, r3, [r0]
 800be4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be4e:	6083      	str	r3, [r0, #8]
 800be50:	8181      	strh	r1, [r0, #12]
 800be52:	6643      	str	r3, [r0, #100]	; 0x64
 800be54:	81c2      	strh	r2, [r0, #14]
 800be56:	6183      	str	r3, [r0, #24]
 800be58:	4619      	mov	r1, r3
 800be5a:	2208      	movs	r2, #8
 800be5c:	305c      	adds	r0, #92	; 0x5c
 800be5e:	f7fb fe17 	bl	8007a90 <memset>
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <std+0x38>)
 800be64:	6263      	str	r3, [r4, #36]	; 0x24
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std+0x3c>)
 800be68:	62a3      	str	r3, [r4, #40]	; 0x28
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <std+0x40>)
 800be6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <std+0x44>)
 800be70:	6224      	str	r4, [r4, #32]
 800be72:	6323      	str	r3, [r4, #48]	; 0x30
 800be74:	bd10      	pop	{r4, pc}
 800be76:	bf00      	nop
 800be78:	0800c191 	.word	0x0800c191
 800be7c:	0800c1b3 	.word	0x0800c1b3
 800be80:	0800c1eb 	.word	0x0800c1eb
 800be84:	0800c20f 	.word	0x0800c20f

0800be88 <_cleanup_r>:
 800be88:	4901      	ldr	r1, [pc, #4]	; (800be90 <_cleanup_r+0x8>)
 800be8a:	f000 b8af 	b.w	800bfec <_fwalk_reent>
 800be8e:	bf00      	nop
 800be90:	0800bdc9 	.word	0x0800bdc9

0800be94 <__sfmoreglue>:
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	1e4a      	subs	r2, r1, #1
 800be98:	2568      	movs	r5, #104	; 0x68
 800be9a:	4355      	muls	r5, r2
 800be9c:	460e      	mov	r6, r1
 800be9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bea2:	f7ff fa7f 	bl	800b3a4 <_malloc_r>
 800bea6:	4604      	mov	r4, r0
 800bea8:	b140      	cbz	r0, 800bebc <__sfmoreglue+0x28>
 800beaa:	2100      	movs	r1, #0
 800beac:	e9c0 1600 	strd	r1, r6, [r0]
 800beb0:	300c      	adds	r0, #12
 800beb2:	60a0      	str	r0, [r4, #8]
 800beb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800beb8:	f7fb fdea 	bl	8007a90 <memset>
 800bebc:	4620      	mov	r0, r4
 800bebe:	bd70      	pop	{r4, r5, r6, pc}

0800bec0 <__sfp_lock_acquire>:
 800bec0:	4801      	ldr	r0, [pc, #4]	; (800bec8 <__sfp_lock_acquire+0x8>)
 800bec2:	f000 b8b3 	b.w	800c02c <__retarget_lock_acquire_recursive>
 800bec6:	bf00      	nop
 800bec8:	20000534 	.word	0x20000534

0800becc <__sfp_lock_release>:
 800becc:	4801      	ldr	r0, [pc, #4]	; (800bed4 <__sfp_lock_release+0x8>)
 800bece:	f000 b8ae 	b.w	800c02e <__retarget_lock_release_recursive>
 800bed2:	bf00      	nop
 800bed4:	20000534 	.word	0x20000534

0800bed8 <__sinit_lock_acquire>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__sinit_lock_acquire+0x8>)
 800beda:	f000 b8a7 	b.w	800c02c <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	2000052f 	.word	0x2000052f

0800bee4 <__sinit_lock_release>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__sinit_lock_release+0x8>)
 800bee6:	f000 b8a2 	b.w	800c02e <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	2000052f 	.word	0x2000052f

0800bef0 <__sinit>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	4604      	mov	r4, r0
 800bef4:	f7ff fff0 	bl	800bed8 <__sinit_lock_acquire>
 800bef8:	69a3      	ldr	r3, [r4, #24]
 800befa:	b11b      	cbz	r3, 800bf04 <__sinit+0x14>
 800befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf00:	f7ff bff0 	b.w	800bee4 <__sinit_lock_release>
 800bf04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf08:	6523      	str	r3, [r4, #80]	; 0x50
 800bf0a:	4b13      	ldr	r3, [pc, #76]	; (800bf58 <__sinit+0x68>)
 800bf0c:	4a13      	ldr	r2, [pc, #76]	; (800bf5c <__sinit+0x6c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf12:	42a3      	cmp	r3, r4
 800bf14:	bf04      	itt	eq
 800bf16:	2301      	moveq	r3, #1
 800bf18:	61a3      	streq	r3, [r4, #24]
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 f820 	bl	800bf60 <__sfp>
 800bf20:	6060      	str	r0, [r4, #4]
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f81c 	bl	800bf60 <__sfp>
 800bf28:	60a0      	str	r0, [r4, #8]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 f818 	bl	800bf60 <__sfp>
 800bf30:	2200      	movs	r2, #0
 800bf32:	60e0      	str	r0, [r4, #12]
 800bf34:	2104      	movs	r1, #4
 800bf36:	6860      	ldr	r0, [r4, #4]
 800bf38:	f7ff ff82 	bl	800be40 <std>
 800bf3c:	68a0      	ldr	r0, [r4, #8]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	2109      	movs	r1, #9
 800bf42:	f7ff ff7d 	bl	800be40 <std>
 800bf46:	68e0      	ldr	r0, [r4, #12]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	2112      	movs	r1, #18
 800bf4c:	f7ff ff78 	bl	800be40 <std>
 800bf50:	2301      	movs	r3, #1
 800bf52:	61a3      	str	r3, [r4, #24]
 800bf54:	e7d2      	b.n	800befc <__sinit+0xc>
 800bf56:	bf00      	nop
 800bf58:	0800c370 	.word	0x0800c370
 800bf5c:	0800be89 	.word	0x0800be89

0800bf60 <__sfp>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	4607      	mov	r7, r0
 800bf64:	f7ff ffac 	bl	800bec0 <__sfp_lock_acquire>
 800bf68:	4b1e      	ldr	r3, [pc, #120]	; (800bfe4 <__sfp+0x84>)
 800bf6a:	681e      	ldr	r6, [r3, #0]
 800bf6c:	69b3      	ldr	r3, [r6, #24]
 800bf6e:	b913      	cbnz	r3, 800bf76 <__sfp+0x16>
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7ff ffbd 	bl	800bef0 <__sinit>
 800bf76:	3648      	adds	r6, #72	; 0x48
 800bf78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	d503      	bpl.n	800bf88 <__sfp+0x28>
 800bf80:	6833      	ldr	r3, [r6, #0]
 800bf82:	b30b      	cbz	r3, 800bfc8 <__sfp+0x68>
 800bf84:	6836      	ldr	r6, [r6, #0]
 800bf86:	e7f7      	b.n	800bf78 <__sfp+0x18>
 800bf88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf8c:	b9d5      	cbnz	r5, 800bfc4 <__sfp+0x64>
 800bf8e:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <__sfp+0x88>)
 800bf90:	60e3      	str	r3, [r4, #12]
 800bf92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf96:	6665      	str	r5, [r4, #100]	; 0x64
 800bf98:	f000 f847 	bl	800c02a <__retarget_lock_init_recursive>
 800bf9c:	f7ff ff96 	bl	800becc <__sfp_lock_release>
 800bfa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfa8:	6025      	str	r5, [r4, #0]
 800bfaa:	61a5      	str	r5, [r4, #24]
 800bfac:	2208      	movs	r2, #8
 800bfae:	4629      	mov	r1, r5
 800bfb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfb4:	f7fb fd6c 	bl	8007a90 <memset>
 800bfb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc4:	3468      	adds	r4, #104	; 0x68
 800bfc6:	e7d9      	b.n	800bf7c <__sfp+0x1c>
 800bfc8:	2104      	movs	r1, #4
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f7ff ff62 	bl	800be94 <__sfmoreglue>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	6030      	str	r0, [r6, #0]
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d1d5      	bne.n	800bf84 <__sfp+0x24>
 800bfd8:	f7ff ff78 	bl	800becc <__sfp_lock_release>
 800bfdc:	230c      	movs	r3, #12
 800bfde:	603b      	str	r3, [r7, #0]
 800bfe0:	e7ee      	b.n	800bfc0 <__sfp+0x60>
 800bfe2:	bf00      	nop
 800bfe4:	0800c370 	.word	0x0800c370
 800bfe8:	ffff0001 	.word	0xffff0001

0800bfec <_fwalk_reent>:
 800bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	4606      	mov	r6, r0
 800bff2:	4688      	mov	r8, r1
 800bff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bff8:	2700      	movs	r7, #0
 800bffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bffe:	f1b9 0901 	subs.w	r9, r9, #1
 800c002:	d505      	bpl.n	800c010 <_fwalk_reent+0x24>
 800c004:	6824      	ldr	r4, [r4, #0]
 800c006:	2c00      	cmp	r4, #0
 800c008:	d1f7      	bne.n	800bffa <_fwalk_reent+0xe>
 800c00a:	4638      	mov	r0, r7
 800c00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c010:	89ab      	ldrh	r3, [r5, #12]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d907      	bls.n	800c026 <_fwalk_reent+0x3a>
 800c016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c01a:	3301      	adds	r3, #1
 800c01c:	d003      	beq.n	800c026 <_fwalk_reent+0x3a>
 800c01e:	4629      	mov	r1, r5
 800c020:	4630      	mov	r0, r6
 800c022:	47c0      	blx	r8
 800c024:	4307      	orrs	r7, r0
 800c026:	3568      	adds	r5, #104	; 0x68
 800c028:	e7e9      	b.n	800bffe <_fwalk_reent+0x12>

0800c02a <__retarget_lock_init_recursive>:
 800c02a:	4770      	bx	lr

0800c02c <__retarget_lock_acquire_recursive>:
 800c02c:	4770      	bx	lr

0800c02e <__retarget_lock_release_recursive>:
 800c02e:	4770      	bx	lr

0800c030 <__swhatbuf_r>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	460e      	mov	r6, r1
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	2900      	cmp	r1, #0
 800c03a:	b096      	sub	sp, #88	; 0x58
 800c03c:	4614      	mov	r4, r2
 800c03e:	461d      	mov	r5, r3
 800c040:	da07      	bge.n	800c052 <__swhatbuf_r+0x22>
 800c042:	2300      	movs	r3, #0
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	89b3      	ldrh	r3, [r6, #12]
 800c048:	061a      	lsls	r2, r3, #24
 800c04a:	d410      	bmi.n	800c06e <__swhatbuf_r+0x3e>
 800c04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c050:	e00e      	b.n	800c070 <__swhatbuf_r+0x40>
 800c052:	466a      	mov	r2, sp
 800c054:	f000 f902 	bl	800c25c <_fstat_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	dbf2      	blt.n	800c042 <__swhatbuf_r+0x12>
 800c05c:	9a01      	ldr	r2, [sp, #4]
 800c05e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c066:	425a      	negs	r2, r3
 800c068:	415a      	adcs	r2, r3
 800c06a:	602a      	str	r2, [r5, #0]
 800c06c:	e7ee      	b.n	800c04c <__swhatbuf_r+0x1c>
 800c06e:	2340      	movs	r3, #64	; 0x40
 800c070:	2000      	movs	r0, #0
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	b016      	add	sp, #88	; 0x58
 800c076:	bd70      	pop	{r4, r5, r6, pc}

0800c078 <__smakebuf_r>:
 800c078:	898b      	ldrh	r3, [r1, #12]
 800c07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c07c:	079d      	lsls	r5, r3, #30
 800c07e:	4606      	mov	r6, r0
 800c080:	460c      	mov	r4, r1
 800c082:	d507      	bpl.n	800c094 <__smakebuf_r+0x1c>
 800c084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	6123      	str	r3, [r4, #16]
 800c08c:	2301      	movs	r3, #1
 800c08e:	6163      	str	r3, [r4, #20]
 800c090:	b002      	add	sp, #8
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	ab01      	add	r3, sp, #4
 800c096:	466a      	mov	r2, sp
 800c098:	f7ff ffca 	bl	800c030 <__swhatbuf_r>
 800c09c:	9900      	ldr	r1, [sp, #0]
 800c09e:	4605      	mov	r5, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7ff f97f 	bl	800b3a4 <_malloc_r>
 800c0a6:	b948      	cbnz	r0, 800c0bc <__smakebuf_r+0x44>
 800c0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ac:	059a      	lsls	r2, r3, #22
 800c0ae:	d4ef      	bmi.n	800c090 <__smakebuf_r+0x18>
 800c0b0:	f023 0303 	bic.w	r3, r3, #3
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	e7e3      	b.n	800c084 <__smakebuf_r+0xc>
 800c0bc:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <__smakebuf_r+0x7c>)
 800c0be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	6020      	str	r0, [r4, #0]
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	6120      	str	r0, [r4, #16]
 800c0d2:	b15b      	cbz	r3, 800c0ec <__smakebuf_r+0x74>
 800c0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f8d1 	bl	800c280 <_isatty_r>
 800c0de:	b128      	cbz	r0, 800c0ec <__smakebuf_r+0x74>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	89a0      	ldrh	r0, [r4, #12]
 800c0ee:	4305      	orrs	r5, r0
 800c0f0:	81a5      	strh	r5, [r4, #12]
 800c0f2:	e7cd      	b.n	800c090 <__smakebuf_r+0x18>
 800c0f4:	0800be89 	.word	0x0800be89

0800c0f8 <_malloc_usable_size_r>:
 800c0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0fc:	1f18      	subs	r0, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfbc      	itt	lt
 800c102:	580b      	ldrlt	r3, [r1, r0]
 800c104:	18c0      	addlt	r0, r0, r3
 800c106:	4770      	bx	lr

0800c108 <_raise_r>:
 800c108:	291f      	cmp	r1, #31
 800c10a:	b538      	push	{r3, r4, r5, lr}
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	d904      	bls.n	800c11c <_raise_r+0x14>
 800c112:	2316      	movs	r3, #22
 800c114:	6003      	str	r3, [r0, #0]
 800c116:	f04f 30ff 	mov.w	r0, #4294967295
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c11e:	b112      	cbz	r2, 800c126 <_raise_r+0x1e>
 800c120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c124:	b94b      	cbnz	r3, 800c13a <_raise_r+0x32>
 800c126:	4620      	mov	r0, r4
 800c128:	f000 f830 	bl	800c18c <_getpid_r>
 800c12c:	462a      	mov	r2, r5
 800c12e:	4601      	mov	r1, r0
 800c130:	4620      	mov	r0, r4
 800c132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c136:	f000 b817 	b.w	800c168 <_kill_r>
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d00a      	beq.n	800c154 <_raise_r+0x4c>
 800c13e:	1c59      	adds	r1, r3, #1
 800c140:	d103      	bne.n	800c14a <_raise_r+0x42>
 800c142:	2316      	movs	r3, #22
 800c144:	6003      	str	r3, [r0, #0]
 800c146:	2001      	movs	r0, #1
 800c148:	e7e7      	b.n	800c11a <_raise_r+0x12>
 800c14a:	2400      	movs	r4, #0
 800c14c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c150:	4628      	mov	r0, r5
 800c152:	4798      	blx	r3
 800c154:	2000      	movs	r0, #0
 800c156:	e7e0      	b.n	800c11a <_raise_r+0x12>

0800c158 <raise>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <raise+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f7ff bfd3 	b.w	800c108 <_raise_r>
 800c162:	bf00      	nop
 800c164:	20000018 	.word	0x20000018

0800c168 <_kill_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	; (800c188 <_kill_r+0x20>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	4608      	mov	r0, r1
 800c172:	4611      	mov	r1, r2
 800c174:	602b      	str	r3, [r5, #0]
 800c176:	f7f5 fe09 	bl	8001d8c <_kill>
 800c17a:	1c43      	adds	r3, r0, #1
 800c17c:	d102      	bne.n	800c184 <_kill_r+0x1c>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	b103      	cbz	r3, 800c184 <_kill_r+0x1c>
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	bd38      	pop	{r3, r4, r5, pc}
 800c186:	bf00      	nop
 800c188:	20000528 	.word	0x20000528

0800c18c <_getpid_r>:
 800c18c:	f7f5 bdf6 	b.w	8001d7c <_getpid>

0800c190 <__sread>:
 800c190:	b510      	push	{r4, lr}
 800c192:	460c      	mov	r4, r1
 800c194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c198:	f000 f894 	bl	800c2c4 <_read_r>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	bfab      	itete	ge
 800c1a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1a4:	181b      	addge	r3, r3, r0
 800c1a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1aa:	bfac      	ite	ge
 800c1ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1ae:	81a3      	strhlt	r3, [r4, #12]
 800c1b0:	bd10      	pop	{r4, pc}

0800c1b2 <__swrite>:
 800c1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b6:	461f      	mov	r7, r3
 800c1b8:	898b      	ldrh	r3, [r1, #12]
 800c1ba:	05db      	lsls	r3, r3, #23
 800c1bc:	4605      	mov	r5, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	4616      	mov	r6, r2
 800c1c2:	d505      	bpl.n	800c1d0 <__swrite+0x1e>
 800c1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f000 f868 	bl	800c2a0 <_lseek_r>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	4632      	mov	r2, r6
 800c1de:	463b      	mov	r3, r7
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e6:	f000 b817 	b.w	800c218 <_write_r>

0800c1ea <__sseek>:
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f2:	f000 f855 	bl	800c2a0 <_lseek_r>
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	bf15      	itete	ne
 800c1fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c206:	81a3      	strheq	r3, [r4, #12]
 800c208:	bf18      	it	ne
 800c20a:	81a3      	strhne	r3, [r4, #12]
 800c20c:	bd10      	pop	{r4, pc}

0800c20e <__sclose>:
 800c20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c212:	f000 b813 	b.w	800c23c <_close_r>
	...

0800c218 <_write_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	; (800c238 <_write_r+0x20>)
 800c21c:	4604      	mov	r4, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	4611      	mov	r1, r2
 800c222:	2200      	movs	r2, #0
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7f5 fde7 	bl	8001dfa <_write>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_write_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_write_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20000528 	.word	0x20000528

0800c23c <_close_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d06      	ldr	r5, [pc, #24]	; (800c258 <_close_r+0x1c>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	f7f5 fdf3 	bl	8001e32 <_close>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_close_r+0x1a>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_close_r+0x1a>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	20000528 	.word	0x20000528

0800c25c <_fstat_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d07      	ldr	r5, [pc, #28]	; (800c27c <_fstat_r+0x20>)
 800c260:	2300      	movs	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	4611      	mov	r1, r2
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	f7f5 fdee 	bl	8001e4a <_fstat>
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	d102      	bne.n	800c278 <_fstat_r+0x1c>
 800c272:	682b      	ldr	r3, [r5, #0]
 800c274:	b103      	cbz	r3, 800c278 <_fstat_r+0x1c>
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	bd38      	pop	{r3, r4, r5, pc}
 800c27a:	bf00      	nop
 800c27c:	20000528 	.word	0x20000528

0800c280 <_isatty_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d06      	ldr	r5, [pc, #24]	; (800c29c <_isatty_r+0x1c>)
 800c284:	2300      	movs	r3, #0
 800c286:	4604      	mov	r4, r0
 800c288:	4608      	mov	r0, r1
 800c28a:	602b      	str	r3, [r5, #0]
 800c28c:	f7f5 fded 	bl	8001e6a <_isatty>
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	d102      	bne.n	800c29a <_isatty_r+0x1a>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	b103      	cbz	r3, 800c29a <_isatty_r+0x1a>
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	bd38      	pop	{r3, r4, r5, pc}
 800c29c:	20000528 	.word	0x20000528

0800c2a0 <_lseek_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d07      	ldr	r5, [pc, #28]	; (800c2c0 <_lseek_r+0x20>)
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	602a      	str	r2, [r5, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	f7f5 fde6 	bl	8001e80 <_lseek>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_lseek_r+0x1e>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_lseek_r+0x1e>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20000528 	.word	0x20000528

0800c2c4 <_read_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	; (800c2e4 <_read_r+0x20>)
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	602a      	str	r2, [r5, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f7f5 fd74 	bl	8001dc0 <_read>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_read_r+0x1e>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_read_r+0x1e>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	20000528 	.word	0x20000528

0800c2e8 <_init>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	bf00      	nop
 800c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ee:	bc08      	pop	{r3}
 800c2f0:	469e      	mov	lr, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_fini>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr
