
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b590  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800b760  0800b760  0001b760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc64  0800bc64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc64  0800bc64  0001bc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc6c  0800bc6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc6c  0800bc6c  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bc74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001e0  0800be54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800be54  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001756f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303d  00000000  00000000  0003777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0003a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289b9  00000000  00000000  0003c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155ec  00000000  00000000  00065141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8a9d  00000000  00000000  0007a72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001731ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  00173294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b748 	.word	0x0800b748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b748 	.word	0x0800b748

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001078:	2201      	movs	r2, #1
 800107a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108c:	f001 f90a 	bl	80022a4 <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 fc35 	bl	8001904 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800109a:	230c      	movs	r3, #12
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	2301      	movs	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ac:	f001 fbd2 	bl	8002854 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010b6:	f000 fc25 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000220 	.word	0x20000220
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_ADC_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_ADC_MspInit+0x88>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_ADC_MspInit+0x88>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_ADC_MspInit+0x88>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_ADC_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_ADC_MspInit+0x88>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_ADC_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001122:	2304      	movs	r3, #4
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <HAL_ADC_MspInit+0x8c>)
 8001136:	f001 ff8b 	bl	8003050 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2012      	movs	r0, #18
 8001140:	f001 febd 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001144:	2012      	movs	r0, #18
 8001146:	f001 fed6 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40012000 	.word	0x40012000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020800 	.word	0x40020800

08001160 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b77      	ldr	r3, [pc, #476]	; (8001354 <MX_GPIO_Init+0x1f4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a76      	ldr	r2, [pc, #472]	; (8001354 <MX_GPIO_Init+0x1f4>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b74      	ldr	r3, [pc, #464]	; (8001354 <MX_GPIO_Init+0x1f4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	4b71      	ldr	r3, [pc, #452]	; (8001354 <MX_GPIO_Init+0x1f4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a70      	ldr	r2, [pc, #448]	; (8001354 <MX_GPIO_Init+0x1f4>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b6e      	ldr	r3, [pc, #440]	; (8001354 <MX_GPIO_Init+0x1f4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b68      	ldr	r3, [pc, #416]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b65      	ldr	r3, [pc, #404]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a64      	ldr	r2, [pc, #400]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	4b59      	ldr	r3, [pc, #356]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a58      	ldr	r2, [pc, #352]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <MX_GPIO_Init+0x1f4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f244 0181 	movw	r1, #16513	; 0x4081
 800120c:	4852      	ldr	r0, [pc, #328]	; (8001358 <MX_GPIO_Init+0x1f8>)
 800120e:	f002 f8cb 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	4851      	ldr	r0, [pc, #324]	; (800135c <MX_GPIO_Init+0x1fc>)
 8001218:	f002 f8c6 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800121c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	484b      	ldr	r0, [pc, #300]	; (8001360 <MX_GPIO_Init+0x200>)
 8001234:	f001 ff0c 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001238:	2332      	movs	r3, #50	; 0x32
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4843      	ldr	r0, [pc, #268]	; (8001360 <MX_GPIO_Init+0x200>)
 8001254:	f001 fefc 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001258:	2386      	movs	r3, #134	; 0x86
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001268:	230b      	movs	r3, #11
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	483c      	ldr	r0, [pc, #240]	; (8001364 <MX_GPIO_Init+0x204>)
 8001274:	f001 feec 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001278:	f244 0381 	movw	r3, #16513	; 0x4081
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4831      	ldr	r0, [pc, #196]	; (8001358 <MX_GPIO_Init+0x1f8>)
 8001292:	f001 fedd 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <MX_GPIO_Init+0x1f8>)
 80012b4:	f001 fecc 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_GPIO_Init+0x1fc>)
 80012d0:	f001 febe 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <MX_GPIO_Init+0x1fc>)
 80012e8:	f001 feb2 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012ec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012fe:	230a      	movs	r3, #10
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <MX_GPIO_Init+0x204>)
 800130a:	f001 fea1 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <MX_GPIO_Init+0x204>)
 8001324:	f001 fe94 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001328:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133a:	230b      	movs	r3, #11
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0x1fc>)
 8001346:	f001 fe83 	bl	8003050 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	40021800 	.word	0x40021800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020000 	.word	0x40020000

08001368 <TIM_ResetCounter>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a76      	ldr	r2, [pc, #472]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	f040 80d9 	bne.w	800154a <HAL_TIM_PeriodElapsedCallback+0x1c6>
	{
		if(!LCD_update)
 8001398:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d038      	beq.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			HAL_ADC_Start(&hadc1);
 80013a6:	4873      	ldr	r0, [pc, #460]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013a8:	f000 ffc0 	bl	800232c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	4619      	mov	r1, r3
 80013b0:	4870      	ldr	r0, [pc, #448]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013b2:	f001 f889 	bl	80024c8 <HAL_ADC_PollForConversion>
			ADC_measure = HAL_ADC_GetValue(&hadc1);
 80013b6:	486f      	ldr	r0, [pc, #444]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013b8:	f001 fa21 	bl	80027fe <HAL_ADC_GetValue>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013c0:	6013      	str	r3, [r2, #0]
			ADC_measure_V = ((float)ADC_measure/(float)ADC_REG_MAX) * ADC_VOLTAGE_MAX;
 80013c2:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ce:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800157c <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80013d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013da:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001580 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
			ADC_measure_mV = (uint32_t)(1000.0 * ADC_measure_V);
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8cb 	bl	8000588 <__aeabi_f2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80013f8:	f7ff f91e 	bl	8000638 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbf0 	bl	8000be8 <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	4a60      	ldr	r2, [pc, #384]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800140c:	6013      	str	r3, [r2, #0]
			sygnal_pomiarowy = (uint16_t)ADC_measure_mV;
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001416:	801a      	strh	r2, [r3, #0]
		}

		uchyb = (int16_t)(sygnal_sterujacy - sygnal_pomiarowy);
 8001418:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21a      	sxth	r2, r3
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800142c:	801a      	strh	r2, [r3, #0]

		PWM_float = arm_pid_f32(&PID_regulator, uchyb);
 800142e:	4b5a      	ldr	r3, [pc, #360]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	edd7 7a04 	vldr	s15, [r7, #16]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	edd3 6a01 	vldr	s13, [r3, #4]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	edd3 7a03 	vldr	s15, [r3, #12]
 800145e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001462:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	edd3 6a02 	vldr	s13, [r3, #8]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014a0:	6013      	str	r3, [r2, #0]
		PWM = (uint16_t)(PWM_float);
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ac:	ee17 3a90 	vmov	r3, s15
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80014b6:	801a      	strh	r2, [r3, #0]

		if(PWM_float > 2000)
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a8 <HAL_TIM_PeriodElapsedCallback+0x224>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dd11      	ble.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
			PWM = 2000;
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80014ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014d2:	801a      	strh	r2, [r3, #0]
			if(PID_regulator.state[2] > 2000)
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80014d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014da:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80015a8 <HAL_TIM_PeriodElapsedCallback+0x224>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd12      	ble.n	800150e <HAL_TIM_PeriodElapsedCallback+0x18a>
					{
						PID_regulator.state[2] = 2000;
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x228>)
 80014ec:	615a      	str	r2, [r3, #20]
 80014ee:	e00e      	b.n	800150e <HAL_TIM_PeriodElapsedCallback+0x18a>
					}
		}
		else if (PWM_float < 0)
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d506      	bpl.n	800150e <HAL_TIM_PeriodElapsedCallback+0x18a>
		{
			PWM = 0;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001502:	2200      	movs	r2, #0
 8001504:	801a      	strh	r2, [r3, #0]
			PID_regulator.state[2] = 0;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
		}
		if(PWM <= 1000)
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001518:	dc0a      	bgt.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800151c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
 800152e:	e00c      	b.n	800154a <HAL_TIM_PeriodElapsedCallback+0x1c6>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (PWM - 1000));
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800153c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001540:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}



	if (htim->Instance == TIM7)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x1de>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001558:	f001 ff3f 	bl	80033da <HAL_GPIO_TogglePin>
		LCD_update = 1;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
	}
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40001000 	.word	0x40001000
 8001570:	2000020c 	.word	0x2000020c
 8001574:	20000220 	.word	0x20000220
 8001578:	20000204 	.word	0x20000204
 800157c:	00000fff 	.word	0x00000fff
 8001580:	40533333 	.word	0x40533333
 8001584:	200002f0 	.word	0x200002f0
 8001588:	408f4000 	.word	0x408f4000
 800158c:	20000208 	.word	0x20000208
 8001590:	200002f4 	.word	0x200002f4
 8001594:	200002f6 	.word	0x200002f6
 8001598:	200001fe 	.word	0x200001fe
 800159c:	20000268 	.word	0x20000268
 80015a0:	20000200 	.word	0x20000200
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	44fa0000 	.word	0x44fa0000
 80015ac:	44fa0000 	.word	0x44fa0000
 80015b0:	20000348 	.word	0x20000348
 80015b4:	40001400 	.word	0x40001400
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c8:	482d      	ldr	r0, [pc, #180]	; (8001680 <HAL_UART_RxCpltCallback+0xc4>)
 80015ca:	f001 ff06 	bl	80033da <HAL_GPIO_TogglePin>

	if(huart->Instance == USART3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <HAL_UART_RxCpltCallback+0xc8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d14e      	bne.n	8001676 <HAL_UART_RxCpltCallback+0xba>
	{
		sygnal_sterujacy = 1000*((int8_t)sygnal_sterujacy_send[0]-'0')+100*((int8_t)sygnal_sterujacy_send[1]-'0')+10*((int8_t)sygnal_sterujacy_send[2]-'0')+1*((int8_t)sygnal_sterujacy_send[3]-'0');
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_UART_RxCpltCallback+0xcc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	3b30      	subs	r3, #48	; 0x30
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	0152      	lsls	r2, r2, #5
 80015e6:	1ad2      	subs	r2, r2, r3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_RxCpltCallback+0xcc>)
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	3b30      	subs	r3, #48	; 0x30
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	0089      	lsls	r1, r1, #2
 80015fe:	440b      	add	r3, r1
 8001600:	4619      	mov	r1, r3
 8001602:	0088      	lsls	r0, r1, #2
 8001604:	4619      	mov	r1, r3
 8001606:	4603      	mov	r3, r0
 8001608:	440b      	add	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_UART_RxCpltCallback+0xcc>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	3b30      	subs	r3, #48	; 0x30
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	0089      	lsls	r1, r1, #2
 8001620:	440b      	add	r3, r1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_RxCpltCallback+0xcc>)
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b30      	subs	r3, #48	; 0x30
 8001638:	b29b      	uxth	r3, r3
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_UART_RxCpltCallback+0xd0>)
 800163e:	801a      	strh	r2, [r3, #0]

			if(sygnal_sterujacy > 2700)
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_UART_RxCpltCallback+0xd0>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	f640 228c 	movw	r2, #2700	; 0xa8c
 800164a:	4293      	cmp	r3, r2
 800164c:	dd04      	ble.n	8001658 <HAL_UART_RxCpltCallback+0x9c>
			{
				sygnal_sterujacy = 2700;
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_UART_RxCpltCallback+0xd0>)
 8001650:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	e009      	b.n	800166c <HAL_UART_RxCpltCallback+0xb0>
			}
			else if(sygnal_sterujacy < 1600)
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_UART_RxCpltCallback+0xd0>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001662:	da03      	bge.n	800166c <HAL_UART_RxCpltCallback+0xb0>
			{
				sygnal_sterujacy = 1600;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_UART_RxCpltCallback+0xd0>)
 8001666:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800166a:	801a      	strh	r2, [r3, #0]
			}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)sygnal_sterujacy_send, 4);
 800166c:	2204      	movs	r2, #4
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <HAL_UART_RxCpltCallback+0xcc>)
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <HAL_UART_RxCpltCallback+0xd4>)
 8001672:	f004 f9f6 	bl	8005a62 <HAL_UART_Receive_IT>

	}

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40020400 	.word	0x40020400
 8001684:	40004800 	.word	0x40004800
 8001688:	200002f8 	.word	0x200002f8
 800168c:	200002f6 	.word	0x200002f6
 8001690:	2000042c 	.word	0x2000042c

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169a:	f000 fd82 	bl	80021a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f8c9 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f7ff fd5d 	bl	8001160 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016a6:	f000 fcbb 	bl	8002020 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80016aa:	f000 fa89 	bl	8001bc0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80016ae:	f7ff fcbd 	bl	800102c <MX_ADC1_Init>
  MX_TIM4_Init();
 80016b2:	f000 faeb 	bl	8001c8c <MX_TIM4_Init>
  MX_TIM6_Init();
 80016b6:	f000 fb3f 	bl	8001d38 <MX_TIM6_Init>
  MX_TIM7_Init();
 80016ba:	f000 fb75 	bl	8001da8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016be:	2100      	movs	r1, #0
 80016c0:	484c      	ldr	r0, [pc, #304]	; (80017f4 <main+0x160>)
 80016c2:	f003 f873 	bl	80047ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016c6:	2104      	movs	r1, #4
 80016c8:	484a      	ldr	r0, [pc, #296]	; (80017f4 <main+0x160>)
 80016ca:	f003 f86f 	bl	80047ac <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80016ce:	213c      	movs	r1, #60	; 0x3c
 80016d0:	4849      	ldr	r0, [pc, #292]	; (80017f8 <main+0x164>)
 80016d2:	f003 fa0b 	bl	8004aec <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)sygnal_sterujacy_send, 4);
 80016d6:	2204      	movs	r2, #4
 80016d8:	4948      	ldr	r1, [pc, #288]	; (80017fc <main+0x168>)
 80016da:	4849      	ldr	r0, [pc, #292]	; (8001800 <main+0x16c>)
 80016dc:	f004 f9c1 	bl	8005a62 <HAL_UART_Receive_IT>

  HAL_Delay(10);
 80016e0:	200a      	movs	r0, #10
 80016e2:	f000 fdbb 	bl	800225c <HAL_Delay>

  PID_regulator.Kp = PID_KP1;
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <main+0x170>)
 80016e8:	4a47      	ldr	r2, [pc, #284]	; (8001808 <main+0x174>)
 80016ea:	619a      	str	r2, [r3, #24]
  PID_regulator.Ki = PID_KI1 * PID_TS;
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <main+0x170>)
 80016ee:	4a47      	ldr	r2, [pc, #284]	; (800180c <main+0x178>)
 80016f0:	61da      	str	r2, [r3, #28]
  PID_regulator.Kd = PID_KD1 / PID_TS;
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <main+0x170>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]

  arm_pid_init_f32(&PID_regulator, 1);
 80016fa:	2101      	movs	r1, #1
 80016fc:	4841      	ldr	r0, [pc, #260]	; (8001804 <main+0x170>)
 80016fe:	f005 fbaf 	bl	8006e60 <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim6);
 8001702:	4843      	ldr	r0, [pc, #268]	; (8001810 <main+0x17c>)
 8001704:	f002 ff82 	bl	800460c <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  	  enco_abs = __HAL_TIM_GET_COUNTER(&htim4) / 4;
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <main+0x164>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <main+0x180>)
 8001714:	801a      	strh	r2, [r3, #0]
	  	  	  if(enco_abs > 0 && enco_abs < 1000)
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <main+0x180>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00a      	beq.n	8001734 <main+0xa0>
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <main+0x180>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001726:	d205      	bcs.n	8001734 <main+0xa0>
	  	  	  {
	  	  		  enco = enco_abs;
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <main+0x180>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <main+0x184>)
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	e012      	b.n	800175a <main+0xc6>
	  	  	  }
	  	  	  else if(enco_abs <= 16384 && enco_abs > 15000)
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <main+0x180>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800173c:	d80d      	bhi.n	800175a <main+0xc6>
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <main+0x180>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001746:	4293      	cmp	r3, r2
 8001748:	d907      	bls.n	800175a <main+0xc6>
	  	  	  {
	  	  		  enco = -(16384 - enco_abs);
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <main+0x180>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001752:	b29b      	uxth	r3, r3
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <main+0x184>)
 8001758:	801a      	strh	r2, [r3, #0]
	  	  	  }
	  	  	  sygnal_sterujacy = sygnal_sterujacy + enco;
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <main+0x188>)
 800175c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <main+0x184>)
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4413      	add	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <main+0x188>)
 8001772:	801a      	strh	r2, [r3, #0]

	  	  	  if(sygnal_sterujacy > 2700)
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <main+0x188>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	f640 228c 	movw	r2, #2700	; 0xa8c
 800177e:	4293      	cmp	r3, r2
 8001780:	dd04      	ble.n	800178c <main+0xf8>
	  	  				{
	  	  					sygnal_sterujacy = 2700;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <main+0x188>)
 8001784:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	e009      	b.n	80017a0 <main+0x10c>
	  	  				}
	  	  				else if(sygnal_sterujacy < 1600)
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <main+0x188>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001796:	da03      	bge.n	80017a0 <main+0x10c>
	  	  				{
	  	  					sygnal_sterujacy = 1600;
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <main+0x188>)
 800179a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800179e:	801a      	strh	r2, [r3, #0]
	  	  				}

	  	  	  TIM_ResetCounter(TIM4);
 80017a0:	481f      	ldr	r0, [pc, #124]	; (8001820 <main+0x18c>)
 80017a2:	f7ff fde1 	bl	8001368 <TIM_ResetCounter>
	  	  	  enco_abs = 0;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <main+0x180>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]
	  	  	  enco = 0;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <main+0x184>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	801a      	strh	r2, [r3, #0]

	  		  uint8_t n = sprintf(send_line_usart, "Sygnal_sterujacy: %d; Sygnal_pomiarowy: %d; PWM: %d; \n\r", (uint16_t)sygnal_sterujacy, (uint16_t)sygnal_pomiarowy, (uint16_t)PWM);
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <main+0x188>)
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <main+0x190>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <main+0x194>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	460b      	mov	r3, r1
 80017ce:	4917      	ldr	r1, [pc, #92]	; (800182c <main+0x198>)
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <main+0x19c>)
 80017d2:	f006 fa15 	bl	8007c00 <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	  		  HAL_UART_Transmit(&huart3, (uint8_t*)send_line_usart, n, 100);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	2364      	movs	r3, #100	; 0x64
 80017e0:	4913      	ldr	r1, [pc, #76]	; (8001830 <main+0x19c>)
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <main+0x16c>)
 80017e4:	f004 f8aa 	bl	800593c <HAL_UART_Transmit>

	 	  HAL_Delay(1000);
 80017e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ec:	f000 fd36 	bl	800225c <HAL_Delay>
  {
 80017f0:	e78a      	b.n	8001708 <main+0x74>
 80017f2:	bf00      	nop
 80017f4:	20000348 	.word	0x20000348
 80017f8:	200002fc 	.word	0x200002fc
 80017fc:	200002f8 	.word	0x200002f8
 8001800:	2000042c 	.word	0x2000042c
 8001804:	20000268 	.word	0x20000268
 8001808:	3e19999a 	.word	0x3e19999a
 800180c:	3d0f5c29 	.word	0x3d0f5c29
 8001810:	20000394 	.word	0x20000394
 8001814:	2000020e 	.word	0x2000020e
 8001818:	20000210 	.word	0x20000210
 800181c:	200002f6 	.word	0x200002f6
 8001820:	40000800 	.word	0x40000800
 8001824:	200002f4 	.word	0x200002f4
 8001828:	200001fc 	.word	0x200001fc
 800182c:	0800b760 	.word	0x0800b760
 8001830:	2000028c 	.word	0x2000028c

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f005 fb54 	bl	8006ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001858:	f001 fdda 	bl	8003410 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <SystemClock_Config+0xc8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <SystemClock_Config+0xc8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <SystemClock_Config+0xcc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xcc>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <SystemClock_Config+0xcc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018a8:	2348      	movs	r3, #72	; 0x48
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018b0:	2303      	movs	r3, #3
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 fdb9 	bl	8003430 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c4:	f000 f81e 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 f847 	bl	8003978 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f0:	f000 f808 	bl	8001904 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x44>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_MspInit+0x44>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x44>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_MspInit+0x44>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_MspInit+0x44>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_MspInit+0x44>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 fc3a 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <ADC_IRQHandler+0x10>)
 80019b2:	f000 fe14 	bl	80025de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000220 	.word	0x20000220

080019c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM4_IRQHandler+0x10>)
 80019c6:	f003 f93f 	bl	8004c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002fc 	.word	0x200002fc

080019d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <USART3_IRQHandler+0x10>)
 80019da:	f004 f891 	bl	8005b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000042c 	.word	0x2000042c

080019e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM6_DAC_IRQHandler+0x10>)
 80019ee:	f003 f92b 	bl	8004c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000394 	.word	0x20000394

080019fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM7_IRQHandler+0x10>)
 8001a02:	f003 f921 	bl	8004c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200003e0 	.word	0x200003e0

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	f005 fa37 	bl	8006e9c <__errno>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffe7 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a52:	e7fe      	b.n	8001a52 <_exit+0x12>

08001a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
	}

return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
	}
	return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f005 f99c 	bl	8006e9c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20050000 	.word	0x20050000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000214 	.word	0x20000214
 8001b98:	200004c8 	.word	0x200004c8

08001b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001be6:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <MX_TIM3_Init+0xc8>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001bec:	2247      	movs	r2, #71	; 0x47
 8001bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0a:	481e      	ldr	r0, [pc, #120]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c0c:	f002 fd76 	bl	80046fc <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c16:	f7ff fe75 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4816      	ldr	r0, [pc, #88]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c2a:	f003 fd8d 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c34:	f7ff fe66 	bl	8001904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c50:	f003 f91a 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c5a:	f7ff fe53 	bl	8001904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2204      	movs	r2, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c66:	f003 f90f 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c70:	f7ff fe48 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <MX_TIM3_Init+0xc4>)
 8001c76:	f000 f97d 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000348 	.word	0x20000348
 8001c88:	40000400 	.word	0x40000400

08001c8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 f928 	bl	8006ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <MX_TIM4_Init+0xa8>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001cfc:	f002 fe50 	bl	80049a0 <HAL_TIM_Encoder_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d06:	f7ff fdfd 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_TIM4_Init+0xa4>)
 8001d18:	f003 fd16 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d22:	f7ff fdef 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3730      	adds	r7, #48	; 0x30
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200002fc 	.word	0x200002fc
 8001d34:	40000800 	.word	0x40000800

08001d38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <MX_TIM6_Init+0x6c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d50:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d6c:	f002 fbf6 	bl	800455c <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d76:	f7ff fdc5 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_TIM6_Init+0x68>)
 8001d88:	f003 fcde 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d92:	f7ff fdb7 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000394 	.word	0x20000394
 8001da4:	40001000 	.word	0x40001000

08001da8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <MX_TIM7_Init+0x6c>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dc0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001dc4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dce:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dd2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001ddc:	f002 fbbe 	bl	800455c <HAL_TIM_Base_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001de6:	f7ff fd8d 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dea:	2320      	movs	r3, #32
 8001dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001df8:	f003 fca6 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001e02:	f7ff fd7f 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200003e0 	.word	0x200003e0
 8001e14:	40001400 	.word	0x40001400

08001e18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_TIM_PWM_MspInit+0x38>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10b      	bne.n	8001e42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d130      	bne.n	8001edc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001eaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4809      	ldr	r0, [pc, #36]	; (8001eec <HAL_TIM_Encoder_MspInit+0x94>)
 8001ec8:	f001 f8c2 	bl	8003050 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	201e      	movs	r0, #30
 8001ed2:	f000 fff4 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed6:	201e      	movs	r0, #30
 8001ed8:	f001 f80d 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020c00 	.word	0x40020c00

08001ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_TIM_Base_MspInit+0x78>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d114      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2036      	movs	r0, #54	; 0x36
 8001f20:	f000 ffcd 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f24:	2036      	movs	r0, #54	; 0x36
 8001f26:	f000 ffe6 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f2a:	e018      	b.n	8001f5e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_Base_MspInit+0x80>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f3c:	f043 0320 	orr.w	r3, r3, #32
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x7c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2037      	movs	r0, #55	; 0x37
 8001f54:	f000 ffb3 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f58:	2037      	movs	r0, #55	; 0x37
 8001f5a:	f000 ffcc 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40001000 	.word	0x40001000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40001400 	.word	0x40001400

08001f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_TIM_MspPostInit+0x9c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d137      	bne.n	8002006 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_TIM_MspPostInit+0xa0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <HAL_TIM_MspPostInit+0xa4>)
 8001fe2:	f001 f835 	bl	8003050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <HAL_TIM_MspPostInit+0xa8>)
 8002002:	f001 f825 	bl	8003050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40000400 	.word	0x40000400
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020800 	.word	0x40020800

08002020 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART3_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART3_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART3_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART3_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART3_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART3_UART_Init+0x58>)
 8002064:	f003 fc1c 	bl	80058a0 <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f7ff fc49 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000042c 	.word	0x2000042c
 800207c:	40004800 	.word	0x40004800

08002080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0aa      	sub	sp, #168	; 0xa8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2284      	movs	r2, #132	; 0x84
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 ff25 	bl	8006ef0 <memset>
  if(uartHandle->Instance==USART3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_UART_MspInit+0xc4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d144      	bne.n	800213a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fe5c 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020ca:	f7ff fc1b 	bl	8001904 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_MspInit+0xc8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002118:	2307      	movs	r3, #7
 800211a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002122:	4619      	mov	r1, r3
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_UART_MspInit+0xcc>)
 8002126:	f000 ff93 	bl	8003050 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2027      	movs	r0, #39	; 0x27
 8002130:	f000 fec5 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002134:	2027      	movs	r0, #39	; 0x27
 8002136:	f000 fede 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800213a:	bf00      	nop
 800213c:	37a8      	adds	r7, #168	; 0xa8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004800 	.word	0x40004800
 8002148:	40023800 	.word	0x40023800
 800214c:	40020c00 	.word	0x40020c00

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002156:	490e      	ldr	r1, [pc, #56]	; (8002190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800216c:	4c0b      	ldr	r4, [pc, #44]	; (800219c <LoopFillZerobss+0x26>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217a:	f7ff fd0f 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f004 fe93 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7ff fa87 	bl	8001694 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002194:	0800bc74 	.word	0x0800bc74
  ldr r2, =_sbss
 8002198:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800219c:	200004c4 	.word	0x200004c4

080021a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <CAN1_RX0_IRQHandler>

080021a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 fe7e 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 f805 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b2:	f7ff fbad 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fe99 	bl	8002f12 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 fe61 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	20000008 	.word	0x20000008
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	200004b0 	.word	0x200004b0

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	200004b0 	.word	0x200004b0

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e031      	b.n	800231e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe ff04 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_ADC_Init+0x84>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fc04 	bl	8002b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	ffffeefd 	.word	0xffffeefd

0800232c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Start+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e0ad      	b.n	80024a2 <HAL_ADC_Start+0x176>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_ADC_Start+0x184>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_ADC_Start+0x188>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d175      	bne.n	8002488 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a0:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <HAL_ADC_Start+0x18c>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f023 0206 	bic.w	r2, r3, #6
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
 80023e4:	e002      	b.n	80023ec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_ADC_Start+0x190>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d143      	bne.n	80024a0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e03a      	b.n	80024a0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_ADC_Start+0x194>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10e      	bne.n	8002452 <HAL_ADC_Start+0x126>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002450:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_ADC_Start+0x190>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d120      	bne.n	80024a0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_ADC_Start+0x198>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d11b      	bne.n	80024a0 <HAL_ADC_Start+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d114      	bne.n	80024a0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	e00b      	b.n	80024a0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0210 	orr.w	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	fffff8fe 	.word	0xfffff8fe
 80024bc:	40012300 	.word	0x40012300
 80024c0:	40012000 	.word	0x40012000
 80024c4:	40012200 	.word	0x40012200

080024c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d113      	bne.n	800250e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e063      	b.n	80025d6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800250e:	f7ff fe99 	bl	8002244 <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002514:	e021      	b.n	800255a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d01d      	beq.n	800255a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_ADC_PollForConversion+0x6c>
 8002524:	f7ff fe8e 	bl	8002244 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d212      	bcs.n	800255a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d00b      	beq.n	800255a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0204 	orr.w	r2, r3, #4
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e03d      	b.n	80025d6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d1d6      	bne.n	8002516 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0212 	mvn.w	r2, #18
 8002570:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d123      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11f      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d049      	beq.n	80026a8 <HAL_ADC_IRQHandler+0xca>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d046      	beq.n	80026a8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d12b      	bne.n	8002698 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002644:	2b00      	cmp	r3, #0
 8002646:	d127      	bne.n	8002698 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002660:	2b00      	cmp	r3, #0
 8002662:	d119      	bne.n	8002698 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0220 	bic.w	r2, r2, #32
 8002672:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8bd 	bl	8002818 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0212 	mvn.w	r2, #18
 80026a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d057      	beq.n	800276e <HAL_ADC_IRQHandler+0x190>
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d054      	beq.n	800276e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d139      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d12b      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d124      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11d      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002738:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fac8 	bl	8002cf4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 020c 	mvn.w	r2, #12
 800276c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d017      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x1d6>
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d014      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d10d      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f841 	bl	800282c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f06f 0201 	mvn.w	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x218>
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0220 	mvn.w	r2, #32
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f82a 	bl	8002840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0220 	mvn.w	r2, #32
 80027f4:	601a      	str	r2, [r3, #0]
  }
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e136      	b.n	8002ade <HAL_ADC_ConfigChannel+0x28a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d93a      	bls.n	80028f6 <HAL_ADC_ConfigChannel+0xa2>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002888:	d035      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68d9      	ldr	r1, [r3, #12]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	3b1e      	subs	r3, #30
 80028a0:	2207      	movs	r2, #7
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	400a      	ands	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a8d      	ldr	r2, [pc, #564]	; (8002aec <HAL_ADC_ConfigChannel+0x298>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10a      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68d9      	ldr	r1, [r3, #12]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	061a      	lsls	r2, r3, #24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ce:	e035      	b.n	800293c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68d9      	ldr	r1, [r3, #12]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4403      	add	r3, r0
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	409a      	lsls	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028f4:	e022      	b.n	800293c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6919      	ldr	r1, [r3, #16]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	2207      	movs	r2, #7
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43da      	mvns	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	400a      	ands	r2, r1
 8002918:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6919      	ldr	r1, [r3, #16]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	4603      	mov	r3, r0
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4403      	add	r3, r0
 8002932:	409a      	lsls	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b06      	cmp	r3, #6
 8002942:	d824      	bhi.n	800298e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b05      	subs	r3, #5
 8002956:	221f      	movs	r2, #31
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43da      	mvns	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	400a      	ands	r2, r1
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b05      	subs	r3, #5
 8002980:	fa00 f203 	lsl.w	r2, r0, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	635a      	str	r2, [r3, #52]	; 0x34
 800298c:	e04c      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d824      	bhi.n	80029e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b23      	subs	r3, #35	; 0x23
 80029a8:	221f      	movs	r2, #31
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b23      	subs	r3, #35	; 0x23
 80029d2:	fa00 f203 	lsl.w	r2, r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
 80029de:	e023      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3b41      	subs	r3, #65	; 0x41
 80029f2:	221f      	movs	r2, #31
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43da      	mvns	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	400a      	ands	r2, r1
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1f4>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a46:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10f      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x21e>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d10b      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a64:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a66:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a70:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_ADC_ConfigChannel+0x29c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d12b      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x280>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_ADC_ConfigChannel+0x298>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x23a>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	d122      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a94:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a98:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aa4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_ADC_ConfigChannel+0x298>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a11      	ldr	r2, [pc, #68]	; (8002afc <HAL_ADC_ConfigChannel+0x2a8>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9a      	lsrs	r2, r3, #18
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f9      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	10000012 	.word	0x10000012
 8002af0:	40012000 	.word	0x40012000
 8002af4:	40012300 	.word	0x40012300
 8002af8:	20000000 	.word	0x20000000
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b08:	4b78      	ldr	r3, [pc, #480]	; (8002cec <ADC_Init+0x1ec>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a77      	ldr	r2, [pc, #476]	; (8002cec <ADC_Init+0x1ec>)
 8002b0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <ADC_Init+0x1ec>)
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4973      	ldr	r1, [pc, #460]	; (8002cec <ADC_Init+0x1ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	021a      	lsls	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <ADC_Init+0x1f0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6899      	ldr	r1, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e00f      	b.n	8002bfa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0202 	bic.w	r2, r2, #2
 8002c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	005a      	lsls	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	3b01      	subs	r3, #1
 8002c54:	035a      	lsls	r2, r3, #13
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	e007      	b.n	8002c70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	051a      	lsls	r2, r3, #20
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cb2:	025a      	lsls	r2, r3, #9
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	029a      	lsls	r2, r3, #10
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40012300 	.word	0x40012300
 8002cf0:	0f000001 	.word	0x0f000001

08002cf4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <__NVIC_SetPriorityGrouping+0x40>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x40>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00
 8002d4c:	05fa0000 	.word	0x05fa0000

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff3e 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff31 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa2 	bl	8002e64 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff f984 	bl	8002244 <HAL_GetTick>
 8002f3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d008      	beq.n	8002f5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e052      	b.n	8003002 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0216 	bic.w	r2, r2, #22
 8002f6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <HAL_DMA_Abort+0x62>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0208 	bic.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	e013      	b.n	8002fd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fae:	f7ff f949 	bl	8002244 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d90c      	bls.n	8002fd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e015      	b.n	8003002 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e4      	bne.n	8002fae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	223f      	movs	r2, #63	; 0x3f
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e00c      	b.n	8003042 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e175      	b.n	800335c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 8164 	bne.w	8003356 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d005      	beq.n	80030a6 <HAL_GPIO_Init+0x56>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d130      	bne.n	8003108 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0201 	and.w	r2, r3, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d017      	beq.n	8003144 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80be 	beq.w	8003356 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_GPIO_Init+0x324>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_GPIO_Init+0x324>)
 80031e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e4:	6453      	str	r3, [r2, #68]	; 0x44
 80031e6:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_GPIO_Init+0x324>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031f2:	4a61      	ldr	r2, [pc, #388]	; (8003378 <HAL_GPIO_Init+0x328>)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_GPIO_Init+0x32c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d037      	beq.n	800328e <HAL_GPIO_Init+0x23e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a57      	ldr	r2, [pc, #348]	; (8003380 <HAL_GPIO_Init+0x330>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d031      	beq.n	800328a <HAL_GPIO_Init+0x23a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a56      	ldr	r2, [pc, #344]	; (8003384 <HAL_GPIO_Init+0x334>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02b      	beq.n	8003286 <HAL_GPIO_Init+0x236>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_GPIO_Init+0x338>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d025      	beq.n	8003282 <HAL_GPIO_Init+0x232>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a54      	ldr	r2, [pc, #336]	; (800338c <HAL_GPIO_Init+0x33c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01f      	beq.n	800327e <HAL_GPIO_Init+0x22e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a53      	ldr	r2, [pc, #332]	; (8003390 <HAL_GPIO_Init+0x340>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d019      	beq.n	800327a <HAL_GPIO_Init+0x22a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a52      	ldr	r2, [pc, #328]	; (8003394 <HAL_GPIO_Init+0x344>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0x226>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_GPIO_Init+0x348>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00d      	beq.n	8003272 <HAL_GPIO_Init+0x222>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_GPIO_Init+0x34c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <HAL_GPIO_Init+0x21e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4f      	ldr	r2, [pc, #316]	; (80033a0 <HAL_GPIO_Init+0x350>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_GPIO_Init+0x21a>
 8003266:	2309      	movs	r3, #9
 8003268:	e012      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800326a:	230a      	movs	r3, #10
 800326c:	e010      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800326e:	2308      	movs	r3, #8
 8003270:	e00e      	b.n	8003290 <HAL_GPIO_Init+0x240>
 8003272:	2307      	movs	r3, #7
 8003274:	e00c      	b.n	8003290 <HAL_GPIO_Init+0x240>
 8003276:	2306      	movs	r3, #6
 8003278:	e00a      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800327a:	2305      	movs	r3, #5
 800327c:	e008      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800327e:	2304      	movs	r3, #4
 8003280:	e006      	b.n	8003290 <HAL_GPIO_Init+0x240>
 8003282:	2303      	movs	r3, #3
 8003284:	e004      	b.n	8003290 <HAL_GPIO_Init+0x240>
 8003286:	2302      	movs	r3, #2
 8003288:	e002      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_GPIO_Init+0x240>
 800328e:	2300      	movs	r3, #0
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f002 0203 	and.w	r2, r2, #3
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	4093      	lsls	r3, r2
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a0:	4935      	ldr	r1, [pc, #212]	; (8003378 <HAL_GPIO_Init+0x328>)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_GPIO_Init+0x354>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d2:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <HAL_GPIO_Init+0x354>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_GPIO_Init+0x354>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032fc:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <HAL_GPIO_Init+0x354>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x354>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_GPIO_Init+0x354>)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_GPIO_Init+0x354>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_GPIO_Init+0x354>)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	f67f ae86 	bls.w	8003070 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021400 	.word	0x40021400
 8003394:	40021800 	.word	0x40021800
 8003398:	40021c00 	.word	0x40021c00
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022400 	.word	0x40022400
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033da:	b480      	push	{r7}
 80033dc:	b085      	sub	sp, #20
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	041a      	lsls	r2, r3, #16
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	400b      	ands	r3, r1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40007000 	.word	0x40007000

08003430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e291      	b.n	800396a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8087 	beq.w	8003562 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003454:	4b96      	ldr	r3, [pc, #600]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b04      	cmp	r3, #4
 800345e:	d00c      	beq.n	800347a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003460:	4b93      	ldr	r3, [pc, #588]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b08      	cmp	r3, #8
 800346a:	d112      	bne.n	8003492 <HAL_RCC_OscConfig+0x62>
 800346c:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	d10b      	bne.n	8003492 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d06c      	beq.n	8003560 <HAL_RCC_OscConfig+0x130>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d168      	bne.n	8003560 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e26b      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x7a>
 800349c:	4b84      	ldr	r3, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a83      	ldr	r2, [pc, #524]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e02e      	b.n	8003508 <HAL_RCC_OscConfig+0xd8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x9c>
 80034b2:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7e      	ldr	r2, [pc, #504]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7b      	ldr	r2, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0xd8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a72      	ldr	r2, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0xd8>
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6e      	ldr	r2, [pc, #440]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a6b      	ldr	r2, [pc, #428]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fe98 	bl	8002244 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fe94 	bl	8002244 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e21f      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fe84 	bl	8002244 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fe fe80 	bl	8002244 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e20b      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x110>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d069      	beq.n	8003642 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356e:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357a:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b08      	cmp	r3, #8
 8003584:	d11c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x190>
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d116      	bne.n	80035c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x17a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1df      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	493d      	ldr	r1, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	e040      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d023      	beq.n	8003610 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fe36 	bl	8002244 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fe fe32 	bl	8002244 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1bd      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4929      	ldr	r1, [pc, #164]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
 800360e:	e018      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fe12 	bl	8002244 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003624:	f7fe fe0e 	bl	8002244 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e199      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d038      	beq.n	80036c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d019      	beq.n	800368a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fe fdef 	bl	8002244 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fe fdeb 	bl	8002244 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e176      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x23a>
 8003688:	e01a      	b.n	80036c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fdd5 	bl	8002244 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fdd1 	bl	8002244 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d903      	bls.n	80036b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e15c      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
 80036b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b91      	ldr	r3, [pc, #580]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ee      	bne.n	800369e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a4 	beq.w	8003816 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b8b      	ldr	r3, [pc, #556]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b88      	ldr	r3, [pc, #544]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a87      	ldr	r2, [pc, #540]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b85      	ldr	r3, [pc, #532]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f6:	4b82      	ldr	r3, [pc, #520]	; (8003900 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003702:	4b7f      	ldr	r3, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7e      	ldr	r2, [pc, #504]	; (8003900 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fe fd99 	bl	8002244 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7fe fd95 	bl	8002244 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	; 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e120      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003728:	4b75      	ldr	r3, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x4d0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x31a>
 800373c:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
 8003748:	e02d      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x33c>
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a69      	ldr	r2, [pc, #420]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	4b67      	ldr	r3, [pc, #412]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a66      	ldr	r2, [pc, #408]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
 800376a:	e01c      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d10c      	bne.n	800378e <HAL_RCC_OscConfig+0x35e>
 8003774:	4b61      	ldr	r3, [pc, #388]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a60      	ldr	r2, [pc, #384]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	e00b      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a5a      	ldr	r2, [pc, #360]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	4b58      	ldr	r3, [pc, #352]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a57      	ldr	r2, [pc, #348]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fd49 	bl	8002244 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe fd45 	bl	8002244 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0ce      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ee      	beq.n	80037b6 <HAL_RCC_OscConfig+0x386>
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7fe fd33 	bl	8002244 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe fd2f 	bl	8002244 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80a4 	beq.w	8003968 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d06b      	beq.n	8003904 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d149      	bne.n	80038c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800383a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe fd00 	bl	8002244 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fcfc 	bl	8002244 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e087      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	4313      	orrs	r3, r2
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800388e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003892:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fcd0 	bl	8002244 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fccc 	bl	8002244 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e057      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x478>
 80038c6:	e04f      	b.n	8003968 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0b      	ldr	r2, [pc, #44]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fcb6 	bl	8002244 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fcb2 	bl	8002244 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e03d      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_OscConfig+0x4cc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x4ac>
 80038fa:	e035      	b.n	8003968 <HAL_RCC_OscConfig+0x538>
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x544>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d028      	beq.n	8003964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d121      	bne.n	8003964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d11a      	bne.n	8003964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800393a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d111      	bne.n	8003964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0d0      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 020f 	bic.w	r2, r3, #15
 80039a6:	4965      	ldr	r1, [pc, #404]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d040      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d115      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e073      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06b      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4936      	ldr	r1, [pc, #216]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fe fbea 	bl	8002244 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fe fbe6 	bl	8002244 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e053      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d210      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	4922      	ldr	r1, [pc, #136]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	490a      	ldr	r1, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x1cc>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1d0>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1d4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fb46 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	0800b798 	.word	0x0800b798
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	2300      	movs	r3, #0
 8003b62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b68:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x40>
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	f200 80bd 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x34>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b82:	e0b7      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b86:	60bb      	str	r3, [r7, #8]
      break;
 8003b88:	e0b7      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8a:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b8c:	60bb      	str	r3, [r7, #8]
      break;
 8003b8e:	e0b4      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4b5d      	ldr	r3, [pc, #372]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04d      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	461a      	mov	r2, r3
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	ea02 0800 	and.w	r8, r2, r0
 8003bbe:	ea03 0901 	and.w	r9, r3, r1
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	014b      	lsls	r3, r1, #5
 8003bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bd4:	0142      	lsls	r2, r0, #5
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	ebb0 0008 	subs.w	r0, r0, r8
 8003bde:	eb61 0109 	sbc.w	r1, r1, r9
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	018b      	lsls	r3, r1, #6
 8003bec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf0:	0182      	lsls	r2, r0, #6
 8003bf2:	1a12      	subs	r2, r2, r0
 8003bf4:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	00d9      	lsls	r1, r3, #3
 8003c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c06:	00d0      	lsls	r0, r2, #3
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	eb12 0208 	adds.w	r2, r2, r8
 8003c10:	eb43 0309 	adc.w	r3, r3, r9
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	0259      	lsls	r1, r3, #9
 8003c1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c22:	0250      	lsls	r0, r2, #9
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	f7fd f848 	bl	8000cc8 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e04a      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	ea02 0400 	and.w	r4, r2, r0
 8003c5a:	ea03 0501 	and.w	r5, r3, r1
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	014b      	lsls	r3, r1, #5
 8003c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c70:	0142      	lsls	r2, r0, #5
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	1b00      	subs	r0, r0, r4
 8003c78:	eb61 0105 	sbc.w	r1, r1, r5
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	018b      	lsls	r3, r1, #6
 8003c86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8a:	0182      	lsls	r2, r0, #6
 8003c8c:	1a12      	subs	r2, r2, r0
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	00d9      	lsls	r1, r3, #3
 8003c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca0:	00d0      	lsls	r0, r2, #3
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	1912      	adds	r2, r2, r4
 8003ca8:	eb45 0303 	adc.w	r3, r5, r3
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0299      	lsls	r1, r3, #10
 8003cb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cba:	0290      	lsls	r0, r2, #10
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f7fc fffc 	bl	8000cc8 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	60bb      	str	r3, [r7, #8]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cf6:	60bb      	str	r3, [r7, #8]
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	007a1200 	.word	0x007a1200

08003d14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d30:	f7ff fff0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800b7a8 	.word	0x0800b7a8

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d58:	f7ff ffdc 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0b5b      	lsrs	r3, r3, #13
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800b7a8 	.word	0x0800b7a8

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da4:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	4b66      	ldr	r3, [pc, #408]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	4964      	ldr	r1, [pc, #400]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d017      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	4959      	ldr	r1, [pc, #356]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d017      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e12:	4b4e      	ldr	r3, [pc, #312]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	494a      	ldr	r1, [pc, #296]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e30:	d101      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 808b 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e78:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fe f9de 	bl	8002244 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fe f9da 	bl	8002244 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e357      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eaa:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d035      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d02e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d114      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f9a2 	bl	8002244 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f99e 	bl	8002244 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e319      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d111      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	4901      	ldr	r1, [pc, #4]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40007000 	.word	0x40007000
 8003f54:	0ffffcff 	.word	0x0ffffcff
 8003f58:	4bb1      	ldr	r3, [pc, #708]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4ab0      	ldr	r2, [pc, #704]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f62:	6093      	str	r3, [r2, #8]
 8003f64:	4bae      	ldr	r3, [pc, #696]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	49ab      	ldr	r1, [pc, #684]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f82:	4ba7      	ldr	r3, [pc, #668]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	4aa5      	ldr	r2, [pc, #660]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f92:	4ba3      	ldr	r3, [pc, #652]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	49a0      	ldr	r1, [pc, #640]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb0:	4b9b      	ldr	r3, [pc, #620]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbe:	4998      	ldr	r1, [pc, #608]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd2:	4b93      	ldr	r3, [pc, #588]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	498f      	ldr	r1, [pc, #572]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff4:	4b8a      	ldr	r3, [pc, #552]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	4987      	ldr	r1, [pc, #540]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004016:	4b82      	ldr	r3, [pc, #520]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	497e      	ldr	r1, [pc, #504]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004038:	4b79      	ldr	r3, [pc, #484]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	4976      	ldr	r1, [pc, #472]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405a:	4b71      	ldr	r3, [pc, #452]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f023 020c 	bic.w	r2, r3, #12
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	496d      	ldr	r1, [pc, #436]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	4965      	ldr	r1, [pc, #404]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800409e:	4b60      	ldr	r3, [pc, #384]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	495c      	ldr	r1, [pc, #368]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040c0:	4b57      	ldr	r3, [pc, #348]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	4954      	ldr	r1, [pc, #336]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040e2:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	494b      	ldr	r1, [pc, #300]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004104:	4b46      	ldr	r3, [pc, #280]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	4943      	ldr	r1, [pc, #268]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004126:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	493a      	ldr	r1, [pc, #232]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	4932      	ldr	r1, [pc, #200]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800416a:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004178:	4929      	ldr	r1, [pc, #164]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	4919      	ldr	r1, [pc, #100]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041dc:	4910      	ldr	r1, [pc, #64]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d006      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80d9 	beq.w	80043aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fe f81e 	bl	8002244 <HAL_GetTick>
 8004208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800420a:	e00b      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800420c:	f7fe f81a 	bl	8002244 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d904      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e197      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004224:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ed      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004252:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	019a      	lsls	r2, r3, #6
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	071b      	lsls	r3, r3, #28
 8004278:	4957      	ldr	r1, [pc, #348]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02e      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042aa:	d129      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	0f1b      	lsrs	r3, r3, #28
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	019a      	lsls	r2, r3, #6
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	431a      	orrs	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	071b      	lsls	r3, r3, #28
 80042e0:	493d      	ldr	r1, [pc, #244]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ee:	f023 021f 	bic.w	r2, r3, #31
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004312:	0e1b      	lsrs	r3, r3, #24
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	019a      	lsls	r2, r3, #6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	431a      	orrs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	071b      	lsls	r3, r3, #28
 8004340:	4925      	ldr	r1, [pc, #148]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d011      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	019a      	lsls	r2, r3, #6
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	071b      	lsls	r3, r3, #28
 8004370:	4919      	ldr	r1, [pc, #100]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fd ff5e 	bl	8002244 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800438c:	f7fd ff5a 	bl	8002244 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e0d7      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 80cd 	bne.w	800454c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043be:	f7fd ff41 	bl	8002244 <HAL_GetTick>
 80043c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043c6:	f7fd ff3d 	bl	8002244 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	; 0x64
 80043d2:	d903      	bls.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0ba      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043dc:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e8:	d0ed      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02e      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d12a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004412:	4b51      	ldr	r3, [pc, #324]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004420:	4b4d      	ldr	r3, [pc, #308]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	0f1b      	lsrs	r3, r3, #28
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	019a      	lsls	r2, r3, #6
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	041b      	lsls	r3, r3, #16
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	071b      	lsls	r3, r3, #28
 8004446:	4944      	ldr	r1, [pc, #272]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800444e:	4b42      	ldr	r3, [pc, #264]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	493d      	ldr	r1, [pc, #244]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d022      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447c:	d11d      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800447e:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800448c:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	0f1b      	lsrs	r3, r3, #28
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	019a      	lsls	r2, r3, #6
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	4929      	ldr	r1, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d028      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044d4:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	431a      	orrs	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4917      	ldr	r1, [pc, #92]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4911      	ldr	r1, [pc, #68]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fd fe8e 	bl	8002244 <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800452c:	f7fd fe8a 	bl	8002244 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e007      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800454a:	d1ef      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fd fcb4 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fdb0 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d001      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e054      	b.n	80046ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a26      	ldr	r2, [pc, #152]	; (80046dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d022      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464e:	d01d      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_TIM_Base_Start_IT+0xe0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x80>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d115      	bne.n	80046b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_TIM_Base_Start_IT+0xec>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d015      	beq.n	80046ca <HAL_TIM_Base_Start_IT+0xbe>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d011      	beq.n	80046ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e008      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e000      	b.n	80046cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40010400 	.word	0x40010400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40001800 	.word	0x40001800
 80046f8:	00010007 	.word	0x00010007

080046fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e049      	b.n	80047a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd fb78 	bl	8001e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fce0 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x24>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e03c      	b.n	800484a <HAL_TIM_PWM_Start+0x9e>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d109      	bne.n	80047ea <HAL_TIM_PWM_Start+0x3e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	bf14      	ite	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	2300      	moveq	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e02f      	b.n	800484a <HAL_TIM_PWM_Start+0x9e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d109      	bne.n	8004804 <HAL_TIM_PWM_Start+0x58>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e022      	b.n	800484a <HAL_TIM_PWM_Start+0x9e>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b0c      	cmp	r3, #12
 8004808:	d109      	bne.n	800481e <HAL_TIM_PWM_Start+0x72>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e015      	b.n	800484a <HAL_TIM_PWM_Start+0x9e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d109      	bne.n	8004838 <HAL_TIM_PWM_Start+0x8c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e008      	b.n	800484a <HAL_TIM_PWM_Start+0x9e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e092      	b.n	8004978 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0xb6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004860:	e023      	b.n	80048aa <HAL_TIM_PWM_Start+0xfe>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xc6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	e01b      	b.n	80048aa <HAL_TIM_PWM_Start+0xfe>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d104      	bne.n	8004882 <HAL_TIM_PWM_Start+0xd6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	e013      	b.n	80048aa <HAL_TIM_PWM_Start+0xfe>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d104      	bne.n	8004892 <HAL_TIM_PWM_Start+0xe6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004890:	e00b      	b.n	80048aa <HAL_TIM_PWM_Start+0xfe>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b10      	cmp	r3, #16
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Start+0xf6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a0:	e003      	b.n	80048aa <HAL_TIM_PWM_Start+0xfe>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff22 	bl	80056fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <HAL_TIM_PWM_Start+0x1d4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_PWM_Start+0x120>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <HAL_TIM_PWM_Start+0x1d8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x124>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_TIM_PWM_Start+0x126>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <HAL_TIM_PWM_Start+0x1d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d01d      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <HAL_TIM_PWM_Start+0x1dc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a20      	ldr	r2, [pc, #128]	; (800498c <HAL_TIM_PWM_Start+0x1e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HAL_TIM_PWM_Start+0x1e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_TIM_PWM_Start+0x1d8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_TIM_PWM_Start+0x1e8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIM_PWM_Start+0x18a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <HAL_TIM_PWM_Start+0x1ec>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d115      	bne.n	8004962 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_TIM_PWM_Start+0x1f0>)
 800493e:	4013      	ands	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d015      	beq.n	8004974 <HAL_TIM_PWM_Start+0x1c8>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d011      	beq.n	8004974 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004960:	e008      	b.n	8004974 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e000      	b.n	8004976 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40001800 	.word	0x40001800
 800499c:	00010007 	.word	0x00010007

080049a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e08f      	b.n	8004ad4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fd fa45 	bl	8001e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_TIM_Encoder_Init+0x13c>)
 80049e2:	400b      	ands	r3, r1
 80049e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 fb85 	bl	8005100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_TIM_Encoder_Init+0x140>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_TIM_Encoder_Init+0x144>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_TIM_Encoder_Init+0x148>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	011a      	lsls	r2, r3, #4
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	031b      	lsls	r3, r3, #12
 8004a60:	4313      	orrs	r3, r2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4313      	orrs	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	fffebff8 	.word	0xfffebff8
 8004ae0:	fffffcfc 	.word	0xfffffcfc
 8004ae4:	fffff3f3 	.word	0xfffff3f3
 8004ae8:	ffff0f0f 	.word	0xffff0f0f

08004aec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004afc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d110      	bne.n	8004b3e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d102      	bne.n	8004b28 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b22:	7b7b      	ldrb	r3, [r7, #13]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d001      	beq.n	8004b2c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e089      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3c:	e031      	b.n	8004ba2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d110      	bne.n	8004b66 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b44:	7bbb      	ldrb	r3, [r7, #14]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b4a:	7b3b      	ldrb	r3, [r7, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e075      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b64:	e01d      	b.n	8004ba2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	7b7b      	ldrb	r3, [r7, #13]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d102      	bne.n	8004b7e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b78:	7b3b      	ldrb	r3, [r7, #12]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e05e      	b.n	8004c40 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d010      	beq.n	8004bd0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004bae:	e01f      	b.n	8004bf0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fd9f 	bl	80056fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0202 	orr.w	r2, r2, #2
 8004bcc:	60da      	str	r2, [r3, #12]
      break;
 8004bce:	e02e      	b.n	8004c2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2104      	movs	r1, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd8f 	bl	80056fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0204 	orr.w	r2, r2, #4
 8004bec:	60da      	str	r2, [r3, #12]
      break;
 8004bee:	e01e      	b.n	8004c2e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fd7f 	bl	80056fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	2104      	movs	r1, #4
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fd78 	bl	80056fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0204 	orr.w	r2, r2, #4
 8004c2a:	60da      	str	r2, [r3, #12]
      break;
 8004c2c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d122      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0202 	mvn.w	r2, #2
 8004c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa1a 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004c90:	e005      	b.n	8004c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa0c 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa1d 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d122      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0204 	mvn.w	r2, #4
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f9f0 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9e2 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f9f3 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d122      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d11b      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0208 	mvn.w	r2, #8
 8004d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2204      	movs	r2, #4
 8004d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9c6 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9b8 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9c9 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d122      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d11b      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0210 	mvn.w	r2, #16
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2208      	movs	r2, #8
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f99c 	bl	80050c4 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f98e 	bl	80050b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f99f 	bl	80050d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0201 	mvn.w	r2, #1
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc fadc 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d10e      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b80      	cmp	r3, #128	; 0x80
 8004de6:	d107      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fd40 	bl	8005878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e06:	d10e      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d107      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fd33 	bl	800588c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d10e      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f94d 	bl	80050ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d10e      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d107      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f06f 0220 	mvn.w	r2, #32
 8004e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fcf3 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0ff      	b.n	80050a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b14      	cmp	r3, #20
 8004eb2:	f200 80f0 	bhi.w	8005096 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08005097 	.word	0x08005097
 8004ec4:	08005097 	.word	0x08005097
 8004ec8:	08005097 	.word	0x08005097
 8004ecc:	08004f51 	.word	0x08004f51
 8004ed0:	08005097 	.word	0x08005097
 8004ed4:	08005097 	.word	0x08005097
 8004ed8:	08005097 	.word	0x08005097
 8004edc:	08004f93 	.word	0x08004f93
 8004ee0:	08005097 	.word	0x08005097
 8004ee4:	08005097 	.word	0x08005097
 8004ee8:	08005097 	.word	0x08005097
 8004eec:	08004fd3 	.word	0x08004fd3
 8004ef0:	08005097 	.word	0x08005097
 8004ef4:	08005097 	.word	0x08005097
 8004ef8:	08005097 	.word	0x08005097
 8004efc:	08005015 	.word	0x08005015
 8004f00:	08005097 	.word	0x08005097
 8004f04:	08005097 	.word	0x08005097
 8004f08:	08005097 	.word	0x08005097
 8004f0c:	08005055 	.word	0x08005055
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f992 	bl	8005240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0204 	bic.w	r2, r2, #4
 8004f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]
      break;
 8004f4e:	e0a5      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9e4 	bl	8005324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	021a      	lsls	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
      break;
 8004f90:	e084      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fa3b 	bl	8005414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0208 	orr.w	r2, r2, #8
 8004fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0204 	bic.w	r2, r2, #4
 8004fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	61da      	str	r2, [r3, #28]
      break;
 8004fd0:	e064      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa91 	bl	8005500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69d9      	ldr	r1, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	021a      	lsls	r2, r3, #8
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	61da      	str	r2, [r3, #28]
      break;
 8005012:	e043      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fac8 	bl	80055b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0208 	orr.w	r2, r2, #8
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0204 	bic.w	r2, r2, #4
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005052:	e023      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fafa 	bl	8005654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	021a      	lsls	r2, r3, #8
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005094:	e002      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
      break;
 800509a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop

080050b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a40      	ldr	r2, [pc, #256]	; (8005214 <TIM_Base_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d00f      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3d      	ldr	r2, [pc, #244]	; (8005218 <TIM_Base_SetConfig+0x118>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3c      	ldr	r2, [pc, #240]	; (800521c <TIM_Base_SetConfig+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3b      	ldr	r2, [pc, #236]	; (8005220 <TIM_Base_SetConfig+0x120>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3a      	ldr	r2, [pc, #232]	; (8005224 <TIM_Base_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d108      	bne.n	8005152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2f      	ldr	r2, [pc, #188]	; (8005214 <TIM_Base_SetConfig+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d027      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <TIM_Base_SetConfig+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d023      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <TIM_Base_SetConfig+0x11c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <TIM_Base_SetConfig+0x120>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a29      	ldr	r2, [pc, #164]	; (8005224 <TIM_Base_SetConfig+0x124>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d017      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <TIM_Base_SetConfig+0x128>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a27      	ldr	r2, [pc, #156]	; (800522c <TIM_Base_SetConfig+0x12c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a26      	ldr	r2, [pc, #152]	; (8005230 <TIM_Base_SetConfig+0x130>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <TIM_Base_SetConfig+0x134>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a24      	ldr	r2, [pc, #144]	; (8005238 <TIM_Base_SetConfig+0x138>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a23      	ldr	r2, [pc, #140]	; (800523c <TIM_Base_SetConfig+0x13c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d108      	bne.n	80051c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0xf8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d103      	bne.n	8005200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40010400 	.word	0x40010400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800
 8005234:	40001800 	.word	0x40001800
 8005238:	40001c00 	.word	0x40001c00
 800523c:	40002000 	.word	0x40002000

08005240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f023 0201 	bic.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <TIM_OC1_SetConfig+0xd8>)
 800526c:	4013      	ands	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 0302 	bic.w	r3, r3, #2
 8005288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a21      	ldr	r2, [pc, #132]	; (800531c <TIM_OC1_SetConfig+0xdc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0x64>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a20      	ldr	r2, [pc, #128]	; (8005320 <TIM_OC1_SetConfig+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a16      	ldr	r2, [pc, #88]	; (800531c <TIM_OC1_SetConfig+0xdc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_OC1_SetConfig+0x8e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <TIM_OC1_SetConfig+0xe0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d111      	bne.n	80052f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	fffeff8f 	.word	0xfffeff8f
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0210 	bic.w	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <TIM_OC2_SetConfig+0xe4>)
 8005350:	4013      	ands	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0320 	bic.w	r3, r3, #32
 800536e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a23      	ldr	r2, [pc, #140]	; (800540c <TIM_OC2_SetConfig+0xe8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC2_SetConfig+0x68>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <TIM_OC2_SetConfig+0xec>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <TIM_OC2_SetConfig+0xe8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_OC2_SetConfig+0x94>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a17      	ldr	r2, [pc, #92]	; (8005410 <TIM_OC2_SetConfig+0xec>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d113      	bne.n	80053e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	feff8fff 	.word	0xfeff8fff
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <TIM_OC3_SetConfig+0xe0>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800545c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC3_SetConfig+0x66>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a21      	ldr	r2, [pc, #132]	; (80054fc <TIM_OC3_SetConfig+0xe8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10d      	bne.n	8005496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC3_SetConfig+0x92>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a16      	ldr	r2, [pc, #88]	; (80054fc <TIM_OC3_SetConfig+0xe8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d113      	bne.n	80054ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	fffeff8f 	.word	0xfffeff8f
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <TIM_OC4_SetConfig+0xa4>)
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800554a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	031b      	lsls	r3, r3, #12
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <TIM_OC4_SetConfig+0xa8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC4_SetConfig+0x68>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a12      	ldr	r2, [pc, #72]	; (80055ac <TIM_OC4_SetConfig+0xac>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d109      	bne.n	800557c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	feff8fff 	.word	0xfeff8fff
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010400 	.word	0x40010400

080055b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <TIM_OC5_SetConfig+0x98>)
 80055dc:	4013      	ands	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <TIM_OC5_SetConfig+0x9c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC5_SetConfig+0x5e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <TIM_OC5_SetConfig+0xa0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d109      	bne.n	8005622 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	fffeff8f 	.word	0xfffeff8f
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <TIM_OC6_SetConfig+0x9c>)
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	051b      	lsls	r3, r3, #20
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <TIM_OC6_SetConfig+0xa0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC6_SetConfig+0x60>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <TIM_OC6_SetConfig+0xa4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d109      	bne.n	80056c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	feff8fff 	.word	0xfeff8fff
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2201      	movs	r2, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e06d      	b.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a30      	ldr	r2, [pc, #192]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2f      	ldr	r2, [pc, #188]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800579a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d2:	d01d      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a16      	ldr	r2, [pc, #88]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a15      	ldr	r2, [pc, #84]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10c      	bne.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000
 8005860:	40001800 	.word	0x40001800

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e040      	b.n	8005934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fbdc 	bl	8002080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fbf8 	bl	80060d4 <UART_SetConfig>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e022      	b.n	8005934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fe4e 	bl	8006598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800590a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800591a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fed5 	bl	80066dc <UART_CheckIdleState>
 8005932:	4603      	mov	r3, r0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005950:	2b20      	cmp	r3, #32
 8005952:	f040 8081 	bne.w	8005a58 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_UART_Transmit+0x26>
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e079      	b.n	8005a5a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_UART_Transmit+0x38>
 8005970:	2302      	movs	r3, #2
 8005972:	e072      	b.n	8005a5a <HAL_UART_Transmit+0x11e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2221      	movs	r2, #33	; 0x21
 8005988:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800598a:	f7fc fc5b 	bl	8002244 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	88fa      	ldrh	r2, [r7, #6]
 8005994:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a8:	d108      	bne.n	80059bc <HAL_UART_Transmit+0x80>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e003      	b.n	80059c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059cc:	e02c      	b.n	8005a28 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 feb2 	bl	8006742 <UART_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e038      	b.n	8005a5a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	3302      	adds	r3, #2
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	e007      	b.n	8005a16 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1cc      	bne.n	80059ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2140      	movs	r1, #64	; 0x40
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fe7f 	bl	8006742 <UART_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e005      	b.n	8005a5a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b08a      	sub	sp, #40	; 0x28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d13d      	bne.n	8005af4 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_UART_Receive_IT+0x22>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e036      	b.n	8005af6 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Receive_IT+0x34>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e02f      	b.n	8005af6 <HAL_UART_Receive_IT+0x94>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d018      	beq.n	8005ae4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e6      	bne.n	8005ab2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 feee 	bl	80068cc <UART_Start_Receive_IT>
 8005af0:	4603      	mov	r3, r0
 8005af2:	e000      	b.n	8005af6 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3728      	adds	r7, #40	; 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b0ba      	sub	sp, #232	; 0xe8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d115      	bne.n	8005b68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00f      	beq.n	8005b68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 828f 	beq.w	800607c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
      }
      return;
 8005b66:	e289      	b.n	800607c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8117 	beq.w	8005da0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_UART_IRQHandler+0x298>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 810a 	beq.w	8005da0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d011      	beq.n	8005bbc <HAL_UART_IRQHandler+0xbc>
 8005b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d011      	beq.n	8005bec <HAL_UART_IRQHandler+0xec>
 8005bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d011      	beq.n	8005c1c <HAL_UART_IRQHandler+0x11c>
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c12:	f043 0202 	orr.w	r2, r3, #2
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4e:	f043 0208 	orr.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d012      	beq.n	8005c8a <HAL_UART_IRQHandler+0x18a>
 8005c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00c      	beq.n	8005c8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 81f5 	beq.w	8006080 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00d      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d04f      	beq.n	8005d82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 febc 	bl	8006a60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d141      	bne.n	8005d7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1d9      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d013      	beq.n	8005d72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <HAL_UART_IRQHandler+0x29c>)
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd f957 	bl	800300a <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	e00f      	b.n	8005d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f998 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	e00b      	b.n	8005d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f994 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	e007      	b.n	8005d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f990 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d90:	e176      	b.n	8006080 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	bf00      	nop
    return;
 8005d94:	e174      	b.n	8006080 <HAL_UART_IRQHandler+0x580>
 8005d96:	bf00      	nop
 8005d98:	04000120 	.word	0x04000120
 8005d9c:	08006b27 	.word	0x08006b27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f040 8144 	bne.w	8006032 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 813d 	beq.w	8006032 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8136 	beq.w	8006032 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	f040 80b2 	bne.w	8005f42 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8148 	beq.w	8006084 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	f080 8140 	bcs.w	8006084 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e18:	f000 8085 	beq.w	8005f26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1da      	bne.n	8005e1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e1      	bne.n	8005e66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ec6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ec8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ecc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e3      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e4      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd f802 	bl	8002f2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8be 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f40:	e0a0      	b.n	8006084 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8092 	beq.w	8006088 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8005f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 808d 	beq.w	8006088 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f90:	647b      	str	r3, [r7, #68]	; 0x44
 8005f92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e4      	bne.n	8005f6e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3308      	adds	r3, #8
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f023 0301 	bic.w	r3, r3, #1
 8005fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fc8:	633a      	str	r2, [r7, #48]	; 0x30
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e3      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e4      	bne.n	8005fee <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f846 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006030:	e02a      	b.n	8006088 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800603e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01c      	beq.n	800608c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
    }
    return;
 800605a:	e017      	b.n	800608c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <HAL_UART_IRQHandler+0x58e>
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fd6c 	bl	8006b52 <UART_EndTransmit_IT>
    return;
 800607a:	e008      	b.n	800608e <HAL_UART_IRQHandler+0x58e>
      return;
 800607c:	bf00      	nop
 800607e:	e006      	b.n	800608e <HAL_UART_IRQHandler+0x58e>
    return;
 8006080:	bf00      	nop
 8006082:	e004      	b.n	800608e <HAL_UART_IRQHandler+0x58e>
      return;
 8006084:	bf00      	nop
 8006086:	e002      	b.n	800608e <HAL_UART_IRQHandler+0x58e>
      return;
 8006088:	bf00      	nop
 800608a:	e000      	b.n	800608e <HAL_UART_IRQHandler+0x58e>
    return;
 800608c:	bf00      	nop
  }

}
 800608e:	37e8      	adds	r7, #232	; 0xe8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4ba7      	ldr	r3, [pc, #668]	; (800639c <UART_SetConfig+0x2c8>)
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	430b      	orrs	r3, r1
 800610a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a95      	ldr	r2, [pc, #596]	; (80063a0 <UART_SetConfig+0x2cc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d120      	bne.n	8006192 <UART_SetConfig+0xbe>
 8006150:	4b94      	ldr	r3, [pc, #592]	; (80063a4 <UART_SetConfig+0x2d0>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b03      	cmp	r3, #3
 800615c:	d816      	bhi.n	800618c <UART_SetConfig+0xb8>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x90>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006175 	.word	0x08006175
 8006168:	08006181 	.word	0x08006181
 800616c:	0800617b 	.word	0x0800617b
 8006170:	08006187 	.word	0x08006187
 8006174:	2301      	movs	r3, #1
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e14f      	b.n	800641a <UART_SetConfig+0x346>
 800617a:	2302      	movs	r3, #2
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e14c      	b.n	800641a <UART_SetConfig+0x346>
 8006180:	2304      	movs	r3, #4
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e149      	b.n	800641a <UART_SetConfig+0x346>
 8006186:	2308      	movs	r3, #8
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e146      	b.n	800641a <UART_SetConfig+0x346>
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e143      	b.n	800641a <UART_SetConfig+0x346>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a84      	ldr	r2, [pc, #528]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d132      	bne.n	8006202 <UART_SetConfig+0x12e>
 800619c:	4b81      	ldr	r3, [pc, #516]	; (80063a4 <UART_SetConfig+0x2d0>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d828      	bhi.n	80061fc <UART_SetConfig+0x128>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0xdc>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061fd 	.word	0x080061fd
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061eb 	.word	0x080061eb
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	080061fd 	.word	0x080061fd
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e117      	b.n	800641a <UART_SetConfig+0x346>
 80061ea:	2302      	movs	r3, #2
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e114      	b.n	800641a <UART_SetConfig+0x346>
 80061f0:	2304      	movs	r3, #4
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e111      	b.n	800641a <UART_SetConfig+0x346>
 80061f6:	2308      	movs	r3, #8
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e10e      	b.n	800641a <UART_SetConfig+0x346>
 80061fc:	2310      	movs	r3, #16
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e10b      	b.n	800641a <UART_SetConfig+0x346>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a69      	ldr	r2, [pc, #420]	; (80063ac <UART_SetConfig+0x2d8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d120      	bne.n	800624e <UART_SetConfig+0x17a>
 800620c:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <UART_SetConfig+0x2d0>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006216:	2b30      	cmp	r3, #48	; 0x30
 8006218:	d013      	beq.n	8006242 <UART_SetConfig+0x16e>
 800621a:	2b30      	cmp	r3, #48	; 0x30
 800621c:	d814      	bhi.n	8006248 <UART_SetConfig+0x174>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d009      	beq.n	8006236 <UART_SetConfig+0x162>
 8006222:	2b20      	cmp	r3, #32
 8006224:	d810      	bhi.n	8006248 <UART_SetConfig+0x174>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <UART_SetConfig+0x15c>
 800622a:	2b10      	cmp	r3, #16
 800622c:	d006      	beq.n	800623c <UART_SetConfig+0x168>
 800622e:	e00b      	b.n	8006248 <UART_SetConfig+0x174>
 8006230:	2300      	movs	r3, #0
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e0f1      	b.n	800641a <UART_SetConfig+0x346>
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e0ee      	b.n	800641a <UART_SetConfig+0x346>
 800623c:	2304      	movs	r3, #4
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e0eb      	b.n	800641a <UART_SetConfig+0x346>
 8006242:	2308      	movs	r3, #8
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e0e8      	b.n	800641a <UART_SetConfig+0x346>
 8006248:	2310      	movs	r3, #16
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e0e5      	b.n	800641a <UART_SetConfig+0x346>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a57      	ldr	r2, [pc, #348]	; (80063b0 <UART_SetConfig+0x2dc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d120      	bne.n	800629a <UART_SetConfig+0x1c6>
 8006258:	4b52      	ldr	r3, [pc, #328]	; (80063a4 <UART_SetConfig+0x2d0>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006262:	2bc0      	cmp	r3, #192	; 0xc0
 8006264:	d013      	beq.n	800628e <UART_SetConfig+0x1ba>
 8006266:	2bc0      	cmp	r3, #192	; 0xc0
 8006268:	d814      	bhi.n	8006294 <UART_SetConfig+0x1c0>
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d009      	beq.n	8006282 <UART_SetConfig+0x1ae>
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d810      	bhi.n	8006294 <UART_SetConfig+0x1c0>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <UART_SetConfig+0x1a8>
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d006      	beq.n	8006288 <UART_SetConfig+0x1b4>
 800627a:	e00b      	b.n	8006294 <UART_SetConfig+0x1c0>
 800627c:	2300      	movs	r3, #0
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e0cb      	b.n	800641a <UART_SetConfig+0x346>
 8006282:	2302      	movs	r3, #2
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e0c8      	b.n	800641a <UART_SetConfig+0x346>
 8006288:	2304      	movs	r3, #4
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e0c5      	b.n	800641a <UART_SetConfig+0x346>
 800628e:	2308      	movs	r3, #8
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e0c2      	b.n	800641a <UART_SetConfig+0x346>
 8006294:	2310      	movs	r3, #16
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e0bf      	b.n	800641a <UART_SetConfig+0x346>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a45      	ldr	r2, [pc, #276]	; (80063b4 <UART_SetConfig+0x2e0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d125      	bne.n	80062f0 <UART_SetConfig+0x21c>
 80062a4:	4b3f      	ldr	r3, [pc, #252]	; (80063a4 <UART_SetConfig+0x2d0>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b2:	d017      	beq.n	80062e4 <UART_SetConfig+0x210>
 80062b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b8:	d817      	bhi.n	80062ea <UART_SetConfig+0x216>
 80062ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062be:	d00b      	beq.n	80062d8 <UART_SetConfig+0x204>
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d811      	bhi.n	80062ea <UART_SetConfig+0x216>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <UART_SetConfig+0x1fe>
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d006      	beq.n	80062de <UART_SetConfig+0x20a>
 80062d0:	e00b      	b.n	80062ea <UART_SetConfig+0x216>
 80062d2:	2300      	movs	r3, #0
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e0a0      	b.n	800641a <UART_SetConfig+0x346>
 80062d8:	2302      	movs	r3, #2
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e09d      	b.n	800641a <UART_SetConfig+0x346>
 80062de:	2304      	movs	r3, #4
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e09a      	b.n	800641a <UART_SetConfig+0x346>
 80062e4:	2308      	movs	r3, #8
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e097      	b.n	800641a <UART_SetConfig+0x346>
 80062ea:	2310      	movs	r3, #16
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e094      	b.n	800641a <UART_SetConfig+0x346>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a30      	ldr	r2, [pc, #192]	; (80063b8 <UART_SetConfig+0x2e4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d125      	bne.n	8006346 <UART_SetConfig+0x272>
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <UART_SetConfig+0x2d0>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006308:	d017      	beq.n	800633a <UART_SetConfig+0x266>
 800630a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800630e:	d817      	bhi.n	8006340 <UART_SetConfig+0x26c>
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006314:	d00b      	beq.n	800632e <UART_SetConfig+0x25a>
 8006316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631a:	d811      	bhi.n	8006340 <UART_SetConfig+0x26c>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x254>
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x260>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x26c>
 8006328:	2301      	movs	r3, #1
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e075      	b.n	800641a <UART_SetConfig+0x346>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e072      	b.n	800641a <UART_SetConfig+0x346>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e06f      	b.n	800641a <UART_SetConfig+0x346>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e06c      	b.n	800641a <UART_SetConfig+0x346>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e069      	b.n	800641a <UART_SetConfig+0x346>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <UART_SetConfig+0x2e8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d137      	bne.n	80063c0 <UART_SetConfig+0x2ec>
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <UART_SetConfig+0x2d0>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800635a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800635e:	d017      	beq.n	8006390 <UART_SetConfig+0x2bc>
 8006360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006364:	d817      	bhi.n	8006396 <UART_SetConfig+0x2c2>
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636a:	d00b      	beq.n	8006384 <UART_SetConfig+0x2b0>
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006370:	d811      	bhi.n	8006396 <UART_SetConfig+0x2c2>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <UART_SetConfig+0x2aa>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d006      	beq.n	800638a <UART_SetConfig+0x2b6>
 800637c:	e00b      	b.n	8006396 <UART_SetConfig+0x2c2>
 800637e:	2300      	movs	r3, #0
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e04a      	b.n	800641a <UART_SetConfig+0x346>
 8006384:	2302      	movs	r3, #2
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e047      	b.n	800641a <UART_SetConfig+0x346>
 800638a:	2304      	movs	r3, #4
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e044      	b.n	800641a <UART_SetConfig+0x346>
 8006390:	2308      	movs	r3, #8
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e041      	b.n	800641a <UART_SetConfig+0x346>
 8006396:	2310      	movs	r3, #16
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e03e      	b.n	800641a <UART_SetConfig+0x346>
 800639c:	efff69f3 	.word	0xefff69f3
 80063a0:	40011000 	.word	0x40011000
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40004400 	.word	0x40004400
 80063ac:	40004800 	.word	0x40004800
 80063b0:	40004c00 	.word	0x40004c00
 80063b4:	40005000 	.word	0x40005000
 80063b8:	40011400 	.word	0x40011400
 80063bc:	40007800 	.word	0x40007800
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a71      	ldr	r2, [pc, #452]	; (800658c <UART_SetConfig+0x4b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d125      	bne.n	8006416 <UART_SetConfig+0x342>
 80063ca:	4b71      	ldr	r3, [pc, #452]	; (8006590 <UART_SetConfig+0x4bc>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063d8:	d017      	beq.n	800640a <UART_SetConfig+0x336>
 80063da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063de:	d817      	bhi.n	8006410 <UART_SetConfig+0x33c>
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e4:	d00b      	beq.n	80063fe <UART_SetConfig+0x32a>
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ea:	d811      	bhi.n	8006410 <UART_SetConfig+0x33c>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <UART_SetConfig+0x324>
 80063f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f4:	d006      	beq.n	8006404 <UART_SetConfig+0x330>
 80063f6:	e00b      	b.n	8006410 <UART_SetConfig+0x33c>
 80063f8:	2300      	movs	r3, #0
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e00d      	b.n	800641a <UART_SetConfig+0x346>
 80063fe:	2302      	movs	r3, #2
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e00a      	b.n	800641a <UART_SetConfig+0x346>
 8006404:	2304      	movs	r3, #4
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e007      	b.n	800641a <UART_SetConfig+0x346>
 800640a:	2308      	movs	r3, #8
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e004      	b.n	800641a <UART_SetConfig+0x346>
 8006410:	2310      	movs	r3, #16
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e001      	b.n	800641a <UART_SetConfig+0x346>
 8006416:	2310      	movs	r3, #16
 8006418:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006422:	d15a      	bne.n	80064da <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006424:	7ffb      	ldrb	r3, [r7, #31]
 8006426:	2b08      	cmp	r3, #8
 8006428:	d827      	bhi.n	800647a <UART_SetConfig+0x3a6>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <UART_SetConfig+0x35c>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006455 	.word	0x08006455
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006465 	.word	0x08006465
 800643c:	0800647b 	.word	0x0800647b
 8006440:	0800646b 	.word	0x0800646b
 8006444:	0800647b 	.word	0x0800647b
 8006448:	0800647b 	.word	0x0800647b
 800644c:	0800647b 	.word	0x0800647b
 8006450:	08006473 	.word	0x08006473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006454:	f7fd fc6a 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8006458:	61b8      	str	r0, [r7, #24]
        break;
 800645a:	e013      	b.n	8006484 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800645c:	f7fd fc7a 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8006460:	61b8      	str	r0, [r7, #24]
        break;
 8006462:	e00f      	b.n	8006484 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006464:	4b4b      	ldr	r3, [pc, #300]	; (8006594 <UART_SetConfig+0x4c0>)
 8006466:	61bb      	str	r3, [r7, #24]
        break;
 8006468:	e00c      	b.n	8006484 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646a:	f7fd fb71 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 800646e:	61b8      	str	r0, [r7, #24]
        break;
 8006470:	e008      	b.n	8006484 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	61bb      	str	r3, [r7, #24]
        break;
 8006478:	e004      	b.n	8006484 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	77bb      	strb	r3, [r7, #30]
        break;
 8006482:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d074      	beq.n	8006574 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	005a      	lsls	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	441a      	add	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b0f      	cmp	r3, #15
 80064a4:	d916      	bls.n	80064d4 <UART_SetConfig+0x400>
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ac:	d212      	bcs.n	80064d4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f023 030f 	bic.w	r3, r3, #15
 80064b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	89fb      	ldrh	r3, [r7, #14]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	89fa      	ldrh	r2, [r7, #14]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	e04f      	b.n	8006574 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77bb      	strb	r3, [r7, #30]
 80064d8:	e04c      	b.n	8006574 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064da:	7ffb      	ldrb	r3, [r7, #31]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d828      	bhi.n	8006532 <UART_SetConfig+0x45e>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x414>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	08006533 	.word	0x08006533
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006533 	.word	0x08006533
 8006500:	08006533 	.word	0x08006533
 8006504:	08006533 	.word	0x08006533
 8006508:	0800652b 	.word	0x0800652b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fd fc0e 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8006510:	61b8      	str	r0, [r7, #24]
        break;
 8006512:	e013      	b.n	800653c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006514:	f7fd fc1e 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8006518:	61b8      	str	r0, [r7, #24]
        break;
 800651a:	e00f      	b.n	800653c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <UART_SetConfig+0x4c0>)
 800651e:	61bb      	str	r3, [r7, #24]
        break;
 8006520:	e00c      	b.n	800653c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fd fb15 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8006526:	61b8      	str	r0, [r7, #24]
        break;
 8006528:	e008      	b.n	800653c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652e:	61bb      	str	r3, [r7, #24]
        break;
 8006530:	e004      	b.n	800653c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	77bb      	strb	r3, [r7, #30]
        break;
 800653a:	bf00      	nop
    }

    if (pclk != 0U)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	085a      	lsrs	r2, r3, #1
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	441a      	add	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b0f      	cmp	r3, #15
 800655a:	d909      	bls.n	8006570 <UART_SetConfig+0x49c>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006562:	d205      	bcs.n	8006570 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e001      	b.n	8006574 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006580:	7fbb      	ldrb	r3, [r7, #30]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40007c00 	.word	0x40007c00
 8006590:	40023800 	.word	0x40023800
 8006594:	00f42400 	.word	0x00f42400

08006598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01a      	beq.n	80066ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	d10a      	bne.n	80066ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ec:	f7fb fdaa 	bl	8002244 <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d10e      	bne.n	800671e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f817 	bl	8006742 <UART_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00d      	b.n	800673a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b09c      	sub	sp, #112	; 0x70
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	4613      	mov	r3, r2
 8006750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006752:	e0a5      	b.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	f000 80a1 	beq.w	80068a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fb fd71 	bl	8002244 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <UART_WaitOnFlagUntilTimeout+0x32>
 800676e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006770:	2b00      	cmp	r3, #0
 8006772:	d13e      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006788:	667b      	str	r3, [r7, #100]	; 0x64
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006794:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006798:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	663b      	str	r3, [r7, #96]	; 0x60
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e067      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d04f      	beq.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800680a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680e:	d147      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800682e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
 800683a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800683e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	613b      	str	r3, [r7, #16]
   return(result);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	66bb      	str	r3, [r7, #104]	; 0x68
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800686c:	623a      	str	r2, [r7, #32]
 800686e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	61bb      	str	r3, [r7, #24]
   return(result);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e010      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4013      	ands	r3, r2
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	f43f af4a 	beq.w	8006754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3770      	adds	r7, #112	; 0x70
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b097      	sub	sp, #92	; 0x5c
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fe:	d10e      	bne.n	800691e <UART_Start_Receive_IT+0x52>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <UART_Start_Receive_IT+0x48>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800690e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006912:	e02d      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800691c:	e028      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <UART_Start_Receive_IT+0x76>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <UART_Start_Receive_IT+0x6c>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	22ff      	movs	r2, #255	; 0xff
 8006932:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006936:	e01b      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	227f      	movs	r2, #127	; 0x7f
 800693c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006940:	e016      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800694a:	d10d      	bne.n	8006968 <UART_Start_Receive_IT+0x9c>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <UART_Start_Receive_IT+0x92>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	227f      	movs	r2, #127	; 0x7f
 8006958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800695c:	e008      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	223f      	movs	r2, #63	; 0x3f
 8006962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006966:	e003      	b.n	8006970 <UART_Start_Receive_IT+0xa4>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2222      	movs	r2, #34	; 0x22
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	657b      	str	r3, [r7, #84]	; 0x54
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800699e:	64ba      	str	r2, [r7, #72]	; 0x48
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d107      	bne.n	80069cc <UART_Start_Receive_IT+0x100>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a24      	ldr	r2, [pc, #144]	; (8006a58 <UART_Start_Receive_IT+0x18c>)
 80069c8:	665a      	str	r2, [r3, #100]	; 0x64
 80069ca:	e002      	b.n	80069d2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a23      	ldr	r2, [pc, #140]	; (8006a5c <UART_Start_Receive_IT+0x190>)
 80069d0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d019      	beq.n	8006a16 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80069f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_Start_Receive_IT+0x116>
 8006a14:	e018      	b.n	8006a48 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	613b      	str	r3, [r7, #16]
   return(result);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f043 0320 	orr.w	r3, r3, #32
 8006a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	375c      	adds	r7, #92	; 0x5c
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	08006d03 	.word	0x08006d03
 8006a5c:	08006ba7 	.word	0x08006ba7

08006a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b095      	sub	sp, #84	; 0x54
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a86:	643b      	str	r3, [r7, #64]	; 0x40
 8006a88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e6      	bne.n	8006a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d118      	bne.n	8006b08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	647b      	str	r3, [r7, #68]	; 0x44
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6979      	ldr	r1, [r7, #20]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	613b      	str	r3, [r7, #16]
   return(result);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b1a:	bf00      	nop
 8006b1c:	3754      	adds	r7, #84	; 0x54
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff faaf 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e6      	bne.n	8006b5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fa7b 	bl	8006094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9e:	bf00      	nop
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b096      	sub	sp, #88	; 0x58
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	f040 8094 	bne.w	8006cea <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bcc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006bd0:	b2d9      	uxtb	r1, r3
 8006bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	400a      	ands	r2, r1
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d177      	bne.n	8006cfa <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d12e      	bne.n	8006ce2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0310 	bic.w	r3, r3, #16
 8006c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d103      	bne.n	8006cd2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff f9ee 	bl	80060bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce0:	e00b      	b.n	8006cfa <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fa fc6a 	bl	80015bc <HAL_UART_RxCpltCallback>
}
 8006ce8:	e007      	b.n	8006cfa <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0208 	orr.w	r2, r2, #8
 8006cf8:	619a      	str	r2, [r3, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	3758      	adds	r7, #88	; 0x58
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b096      	sub	sp, #88	; 0x58
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d18:	2b22      	cmp	r3, #34	; 0x22
 8006d1a:	f040 8094 	bne.w	8006e46 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d2e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d36:	4013      	ands	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d177      	bne.n	8006e56 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d84:	643b      	str	r3, [r7, #64]	; 0x40
 8006d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d12e      	bne.n	8006e3e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6979      	ldr	r1, [r7, #20]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	613b      	str	r3, [r7, #16]
   return(result);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d103      	bne.n	8006e2e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f940 	bl	80060bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e3c:	e00b      	b.n	8006e56 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fa fbbc 	bl	80015bc <HAL_UART_RxCpltCallback>
}
 8006e44:	e007      	b.n	8006e56 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0208 	orr.w	r2, r2, #8
 8006e54:	619a      	str	r2, [r3, #24]
}
 8006e56:	bf00      	nop
 8006e58:	3758      	adds	r7, #88	; 0x58
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <arm_pid_init_f32>:
 8006e60:	ed90 7a08 	vldr	s14, [r0, #32]
 8006e64:	edd0 7a06 	vldr	s15, [r0, #24]
 8006e68:	ed90 6a07 	vldr	s12, [r0, #28]
 8006e6c:	eef1 6a67 	vneg.f32	s13, s15
 8006e70:	ed80 7a02 	vstr	s14, [r0, #8]
 8006e74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006e78:	ee37 6a07 	vadd.f32	s12, s14, s14
 8006e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e80:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006e84:	edc0 7a00 	vstr	s15, [r0]
 8006e88:	ed80 7a01 	vstr	s14, [r0, #4]
 8006e8c:	b901      	cbnz	r1, 8006e90 <arm_pid_init_f32+0x30>
 8006e8e:	4770      	bx	lr
 8006e90:	2300      	movs	r3, #0
 8006e92:	60c3      	str	r3, [r0, #12]
 8006e94:	6103      	str	r3, [r0, #16]
 8006e96:	6143      	str	r3, [r0, #20]
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <__errno>:
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <__errno+0x8>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	2000000c 	.word	0x2000000c

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f004 fc44 	bl	800b748 <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	0800bc6c 	.word	0x0800bc6c
 8006ee4:	0800bc6c 	.word	0x0800bc6c
 8006ee8:	0800bc6c 	.word	0x0800bc6c
 8006eec:	0800bc70 	.word	0x0800bc70

08006ef0 <memset>:
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d100      	bne.n	8006efa <memset+0xa>
 8006ef8:	4770      	bx	lr
 8006efa:	f803 1b01 	strb.w	r1, [r3], #1
 8006efe:	e7f9      	b.n	8006ef4 <memset+0x4>

08006f00 <__cvt>:
 8006f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	ec55 4b10 	vmov	r4, r5, d0
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	462b      	mov	r3, r5
 8006f10:	bfbb      	ittet	lt
 8006f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f16:	461d      	movlt	r5, r3
 8006f18:	2300      	movge	r3, #0
 8006f1a:	232d      	movlt	r3, #45	; 0x2d
 8006f1c:	700b      	strb	r3, [r1, #0]
 8006f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f24:	4691      	mov	r9, r2
 8006f26:	f023 0820 	bic.w	r8, r3, #32
 8006f2a:	bfbc      	itt	lt
 8006f2c:	4622      	movlt	r2, r4
 8006f2e:	4614      	movlt	r4, r2
 8006f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f34:	d005      	beq.n	8006f42 <__cvt+0x42>
 8006f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3a:	d100      	bne.n	8006f3e <__cvt+0x3e>
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	2102      	movs	r1, #2
 8006f40:	e000      	b.n	8006f44 <__cvt+0x44>
 8006f42:	2103      	movs	r1, #3
 8006f44:	ab03      	add	r3, sp, #12
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	ab02      	add	r3, sp, #8
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	ec45 4b10 	vmov	d0, r4, r5
 8006f50:	4653      	mov	r3, sl
 8006f52:	4632      	mov	r2, r6
 8006f54:	f001 fdb4 	bl	8008ac0 <_dtoa_r>
 8006f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	d102      	bne.n	8006f66 <__cvt+0x66>
 8006f60:	f019 0f01 	tst.w	r9, #1
 8006f64:	d022      	beq.n	8006fac <__cvt+0xac>
 8006f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6a:	eb07 0906 	add.w	r9, r7, r6
 8006f6e:	d110      	bne.n	8006f92 <__cvt+0x92>
 8006f70:	783b      	ldrb	r3, [r7, #0]
 8006f72:	2b30      	cmp	r3, #48	; 0x30
 8006f74:	d10a      	bne.n	8006f8c <__cvt+0x8c>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 fdc3 	bl	8000b08 <__aeabi_dcmpeq>
 8006f82:	b918      	cbnz	r0, 8006f8c <__cvt+0x8c>
 8006f84:	f1c6 0601 	rsb	r6, r6, #1
 8006f88:	f8ca 6000 	str.w	r6, [sl]
 8006f8c:	f8da 3000 	ldr.w	r3, [sl]
 8006f90:	4499      	add	r9, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	2300      	movs	r3, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fdb5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f9e:	b108      	cbz	r0, 8006fa4 <__cvt+0xa4>
 8006fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa4:	2230      	movs	r2, #48	; 0x30
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	454b      	cmp	r3, r9
 8006faa:	d307      	bcc.n	8006fbc <__cvt+0xbc>
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb0:	1bdb      	subs	r3, r3, r7
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	b004      	add	sp, #16
 8006fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	9103      	str	r1, [sp, #12]
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e7f0      	b.n	8006fa6 <__cvt+0xa6>

08006fc4 <__exponent>:
 8006fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	bfb8      	it	lt
 8006fcc:	4249      	neglt	r1, r1
 8006fce:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd2:	bfb4      	ite	lt
 8006fd4:	222d      	movlt	r2, #45	; 0x2d
 8006fd6:	222b      	movge	r2, #43	; 0x2b
 8006fd8:	2909      	cmp	r1, #9
 8006fda:	7042      	strb	r2, [r0, #1]
 8006fdc:	dd2a      	ble.n	8007034 <__exponent+0x70>
 8006fde:	f10d 0407 	add.w	r4, sp, #7
 8006fe2:	46a4      	mov	ip, r4
 8006fe4:	270a      	movs	r7, #10
 8006fe6:	46a6      	mov	lr, r4
 8006fe8:	460a      	mov	r2, r1
 8006fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fee:	fb07 1516 	mls	r5, r7, r6, r1
 8006ff2:	3530      	adds	r5, #48	; 0x30
 8006ff4:	2a63      	cmp	r2, #99	; 0x63
 8006ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ffe:	4631      	mov	r1, r6
 8007000:	dcf1      	bgt.n	8006fe6 <__exponent+0x22>
 8007002:	3130      	adds	r1, #48	; 0x30
 8007004:	f1ae 0502 	sub.w	r5, lr, #2
 8007008:	f804 1c01 	strb.w	r1, [r4, #-1]
 800700c:	1c44      	adds	r4, r0, #1
 800700e:	4629      	mov	r1, r5
 8007010:	4561      	cmp	r1, ip
 8007012:	d30a      	bcc.n	800702a <__exponent+0x66>
 8007014:	f10d 0209 	add.w	r2, sp, #9
 8007018:	eba2 020e 	sub.w	r2, r2, lr
 800701c:	4565      	cmp	r5, ip
 800701e:	bf88      	it	hi
 8007020:	2200      	movhi	r2, #0
 8007022:	4413      	add	r3, r2
 8007024:	1a18      	subs	r0, r3, r0
 8007026:	b003      	add	sp, #12
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007032:	e7ed      	b.n	8007010 <__exponent+0x4c>
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	3130      	adds	r1, #48	; 0x30
 8007038:	7083      	strb	r3, [r0, #2]
 800703a:	70c1      	strb	r1, [r0, #3]
 800703c:	1d03      	adds	r3, r0, #4
 800703e:	e7f1      	b.n	8007024 <__exponent+0x60>

08007040 <_printf_float>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	ed2d 8b02 	vpush	{d8}
 8007048:	b08d      	sub	sp, #52	; 0x34
 800704a:	460c      	mov	r4, r1
 800704c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007050:	4616      	mov	r6, r2
 8007052:	461f      	mov	r7, r3
 8007054:	4605      	mov	r5, r0
 8007056:	f002 fe8f 	bl	8009d78 <_localeconv_r>
 800705a:	f8d0 a000 	ldr.w	sl, [r0]
 800705e:	4650      	mov	r0, sl
 8007060:	f7f9 f8d6 	bl	8000210 <strlen>
 8007064:	2300      	movs	r3, #0
 8007066:	930a      	str	r3, [sp, #40]	; 0x28
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	9305      	str	r3, [sp, #20]
 800706c:	f8d8 3000 	ldr.w	r3, [r8]
 8007070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007074:	3307      	adds	r3, #7
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	f103 0208 	add.w	r2, r3, #8
 800707e:	f8c8 2000 	str.w	r2, [r8]
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800708a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800708e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007092:	9307      	str	r3, [sp, #28]
 8007094:	f8cd 8018 	str.w	r8, [sp, #24]
 8007098:	ee08 0a10 	vmov	s16, r0
 800709c:	4b9f      	ldr	r3, [pc, #636]	; (800731c <_printf_float+0x2dc>)
 800709e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	f7f9 fd61 	bl	8000b6c <__aeabi_dcmpun>
 80070aa:	bb88      	cbnz	r0, 8007110 <_printf_float+0xd0>
 80070ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b0:	4b9a      	ldr	r3, [pc, #616]	; (800731c <_printf_float+0x2dc>)
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	f7f9 fd3b 	bl	8000b30 <__aeabi_dcmple>
 80070ba:	bb48      	cbnz	r0, 8007110 <_printf_float+0xd0>
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fd2a 	bl	8000b1c <__aeabi_dcmplt>
 80070c8:	b110      	cbz	r0, 80070d0 <_printf_float+0x90>
 80070ca:	232d      	movs	r3, #45	; 0x2d
 80070cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d0:	4b93      	ldr	r3, [pc, #588]	; (8007320 <_printf_float+0x2e0>)
 80070d2:	4894      	ldr	r0, [pc, #592]	; (8007324 <_printf_float+0x2e4>)
 80070d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070d8:	bf94      	ite	ls
 80070da:	4698      	movls	r8, r3
 80070dc:	4680      	movhi	r8, r0
 80070de:	2303      	movs	r3, #3
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	f023 0204 	bic.w	r2, r3, #4
 80070e8:	6022      	str	r2, [r4, #0]
 80070ea:	f04f 0900 	mov.w	r9, #0
 80070ee:	9700      	str	r7, [sp, #0]
 80070f0:	4633      	mov	r3, r6
 80070f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f9d8 	bl	80074ac <_printf_common>
 80070fc:	3001      	adds	r0, #1
 80070fe:	f040 8090 	bne.w	8007222 <_printf_float+0x1e2>
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	b00d      	add	sp, #52	; 0x34
 8007108:	ecbd 8b02 	vpop	{d8}
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	4642      	mov	r2, r8
 8007112:	464b      	mov	r3, r9
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f7f9 fd28 	bl	8000b6c <__aeabi_dcmpun>
 800711c:	b140      	cbz	r0, 8007130 <_printf_float+0xf0>
 800711e:	464b      	mov	r3, r9
 8007120:	2b00      	cmp	r3, #0
 8007122:	bfbc      	itt	lt
 8007124:	232d      	movlt	r3, #45	; 0x2d
 8007126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800712a:	487f      	ldr	r0, [pc, #508]	; (8007328 <_printf_float+0x2e8>)
 800712c:	4b7f      	ldr	r3, [pc, #508]	; (800732c <_printf_float+0x2ec>)
 800712e:	e7d1      	b.n	80070d4 <_printf_float+0x94>
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007136:	9206      	str	r2, [sp, #24]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	d13f      	bne.n	80071bc <_printf_float+0x17c>
 800713c:	2306      	movs	r3, #6
 800713e:	6063      	str	r3, [r4, #4]
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	6861      	ldr	r1, [r4, #4]
 8007144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007148:	2300      	movs	r3, #0
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	ab0a      	add	r3, sp, #40	; 0x28
 800714e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007152:	ab09      	add	r3, sp, #36	; 0x24
 8007154:	ec49 8b10 	vmov	d0, r8, r9
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	6022      	str	r2, [r4, #0]
 800715c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007160:	4628      	mov	r0, r5
 8007162:	f7ff fecd 	bl	8006f00 <__cvt>
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800716a:	2b47      	cmp	r3, #71	; 0x47
 800716c:	4680      	mov	r8, r0
 800716e:	d108      	bne.n	8007182 <_printf_float+0x142>
 8007170:	1cc8      	adds	r0, r1, #3
 8007172:	db02      	blt.n	800717a <_printf_float+0x13a>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	4299      	cmp	r1, r3
 8007178:	dd41      	ble.n	80071fe <_printf_float+0x1be>
 800717a:	f1ab 0b02 	sub.w	fp, fp, #2
 800717e:	fa5f fb8b 	uxtb.w	fp, fp
 8007182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007186:	d820      	bhi.n	80071ca <_printf_float+0x18a>
 8007188:	3901      	subs	r1, #1
 800718a:	465a      	mov	r2, fp
 800718c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007190:	9109      	str	r1, [sp, #36]	; 0x24
 8007192:	f7ff ff17 	bl	8006fc4 <__exponent>
 8007196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007198:	1813      	adds	r3, r2, r0
 800719a:	2a01      	cmp	r2, #1
 800719c:	4681      	mov	r9, r0
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	dc02      	bgt.n	80071a8 <_printf_float+0x168>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	07d2      	lsls	r2, r2, #31
 80071a6:	d501      	bpl.n	80071ac <_printf_float+0x16c>
 80071a8:	3301      	adds	r3, #1
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d09c      	beq.n	80070ee <_printf_float+0xae>
 80071b4:	232d      	movs	r3, #45	; 0x2d
 80071b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ba:	e798      	b.n	80070ee <_printf_float+0xae>
 80071bc:	9a06      	ldr	r2, [sp, #24]
 80071be:	2a47      	cmp	r2, #71	; 0x47
 80071c0:	d1be      	bne.n	8007140 <_printf_float+0x100>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1bc      	bne.n	8007140 <_printf_float+0x100>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e7b9      	b.n	800713e <_printf_float+0xfe>
 80071ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071ce:	d118      	bne.n	8007202 <_printf_float+0x1c2>
 80071d0:	2900      	cmp	r1, #0
 80071d2:	6863      	ldr	r3, [r4, #4]
 80071d4:	dd0b      	ble.n	80071ee <_printf_float+0x1ae>
 80071d6:	6121      	str	r1, [r4, #16]
 80071d8:	b913      	cbnz	r3, 80071e0 <_printf_float+0x1a0>
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	07d0      	lsls	r0, r2, #31
 80071de:	d502      	bpl.n	80071e6 <_printf_float+0x1a6>
 80071e0:	3301      	adds	r3, #1
 80071e2:	440b      	add	r3, r1
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80071e8:	f04f 0900 	mov.w	r9, #0
 80071ec:	e7de      	b.n	80071ac <_printf_float+0x16c>
 80071ee:	b913      	cbnz	r3, 80071f6 <_printf_float+0x1b6>
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	07d2      	lsls	r2, r2, #31
 80071f4:	d501      	bpl.n	80071fa <_printf_float+0x1ba>
 80071f6:	3302      	adds	r3, #2
 80071f8:	e7f4      	b.n	80071e4 <_printf_float+0x1a4>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e7f2      	b.n	80071e4 <_printf_float+0x1a4>
 80071fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007204:	4299      	cmp	r1, r3
 8007206:	db05      	blt.n	8007214 <_printf_float+0x1d4>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	6121      	str	r1, [r4, #16]
 800720c:	07d8      	lsls	r0, r3, #31
 800720e:	d5ea      	bpl.n	80071e6 <_printf_float+0x1a6>
 8007210:	1c4b      	adds	r3, r1, #1
 8007212:	e7e7      	b.n	80071e4 <_printf_float+0x1a4>
 8007214:	2900      	cmp	r1, #0
 8007216:	bfd4      	ite	le
 8007218:	f1c1 0202 	rsble	r2, r1, #2
 800721c:	2201      	movgt	r2, #1
 800721e:	4413      	add	r3, r2
 8007220:	e7e0      	b.n	80071e4 <_printf_float+0x1a4>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	055a      	lsls	r2, r3, #21
 8007226:	d407      	bmi.n	8007238 <_printf_float+0x1f8>
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	4642      	mov	r2, r8
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	d12c      	bne.n	8007290 <_printf_float+0x250>
 8007236:	e764      	b.n	8007102 <_printf_float+0xc2>
 8007238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800723c:	f240 80e0 	bls.w	8007400 <_printf_float+0x3c0>
 8007240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007244:	2200      	movs	r2, #0
 8007246:	2300      	movs	r3, #0
 8007248:	f7f9 fc5e 	bl	8000b08 <__aeabi_dcmpeq>
 800724c:	2800      	cmp	r0, #0
 800724e:	d034      	beq.n	80072ba <_printf_float+0x27a>
 8007250:	4a37      	ldr	r2, [pc, #220]	; (8007330 <_printf_float+0x2f0>)
 8007252:	2301      	movs	r3, #1
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f af51 	beq.w	8007102 <_printf_float+0xc2>
 8007260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007264:	429a      	cmp	r2, r3
 8007266:	db02      	blt.n	800726e <_printf_float+0x22e>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	07d8      	lsls	r0, r3, #31
 800726c:	d510      	bpl.n	8007290 <_printf_float+0x250>
 800726e:	ee18 3a10 	vmov	r3, s16
 8007272:	4652      	mov	r2, sl
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f af41 	beq.w	8007102 <_printf_float+0xc2>
 8007280:	f04f 0800 	mov.w	r8, #0
 8007284:	f104 091a 	add.w	r9, r4, #26
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	3b01      	subs	r3, #1
 800728c:	4543      	cmp	r3, r8
 800728e:	dc09      	bgt.n	80072a4 <_printf_float+0x264>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	079b      	lsls	r3, r3, #30
 8007294:	f100 8105 	bmi.w	80074a2 <_printf_float+0x462>
 8007298:	68e0      	ldr	r0, [r4, #12]
 800729a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800729c:	4298      	cmp	r0, r3
 800729e:	bfb8      	it	lt
 80072a0:	4618      	movlt	r0, r3
 80072a2:	e730      	b.n	8007106 <_printf_float+0xc6>
 80072a4:	2301      	movs	r3, #1
 80072a6:	464a      	mov	r2, r9
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af27 	beq.w	8007102 <_printf_float+0xc2>
 80072b4:	f108 0801 	add.w	r8, r8, #1
 80072b8:	e7e6      	b.n	8007288 <_printf_float+0x248>
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc39      	bgt.n	8007334 <_printf_float+0x2f4>
 80072c0:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <_printf_float+0x2f0>)
 80072c2:	2301      	movs	r3, #1
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af19 	beq.w	8007102 <_printf_float+0xc2>
 80072d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d102      	bne.n	80072de <_printf_float+0x29e>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	07d9      	lsls	r1, r3, #31
 80072dc:	d5d8      	bpl.n	8007290 <_printf_float+0x250>
 80072de:	ee18 3a10 	vmov	r3, s16
 80072e2:	4652      	mov	r2, sl
 80072e4:	4631      	mov	r1, r6
 80072e6:	4628      	mov	r0, r5
 80072e8:	47b8      	blx	r7
 80072ea:	3001      	adds	r0, #1
 80072ec:	f43f af09 	beq.w	8007102 <_printf_float+0xc2>
 80072f0:	f04f 0900 	mov.w	r9, #0
 80072f4:	f104 0a1a 	add.w	sl, r4, #26
 80072f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fa:	425b      	negs	r3, r3
 80072fc:	454b      	cmp	r3, r9
 80072fe:	dc01      	bgt.n	8007304 <_printf_float+0x2c4>
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	e792      	b.n	800722a <_printf_float+0x1ea>
 8007304:	2301      	movs	r3, #1
 8007306:	4652      	mov	r2, sl
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	f43f aef7 	beq.w	8007102 <_printf_float+0xc2>
 8007314:	f109 0901 	add.w	r9, r9, #1
 8007318:	e7ee      	b.n	80072f8 <_printf_float+0x2b8>
 800731a:	bf00      	nop
 800731c:	7fefffff 	.word	0x7fefffff
 8007320:	0800b7b4 	.word	0x0800b7b4
 8007324:	0800b7b8 	.word	0x0800b7b8
 8007328:	0800b7c0 	.word	0x0800b7c0
 800732c:	0800b7bc 	.word	0x0800b7bc
 8007330:	0800b7c4 	.word	0x0800b7c4
 8007334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007338:	429a      	cmp	r2, r3
 800733a:	bfa8      	it	ge
 800733c:	461a      	movge	r2, r3
 800733e:	2a00      	cmp	r2, #0
 8007340:	4691      	mov	r9, r2
 8007342:	dc37      	bgt.n	80073b4 <_printf_float+0x374>
 8007344:	f04f 0b00 	mov.w	fp, #0
 8007348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800734c:	f104 021a 	add.w	r2, r4, #26
 8007350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	eba3 0309 	sub.w	r3, r3, r9
 8007358:	455b      	cmp	r3, fp
 800735a:	dc33      	bgt.n	80073c4 <_printf_float+0x384>
 800735c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007360:	429a      	cmp	r2, r3
 8007362:	db3b      	blt.n	80073dc <_printf_float+0x39c>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07da      	lsls	r2, r3, #31
 8007368:	d438      	bmi.n	80073dc <_printf_float+0x39c>
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	eba2 0901 	sub.w	r9, r2, r1
 8007376:	4599      	cmp	r9, r3
 8007378:	bfa8      	it	ge
 800737a:	4699      	movge	r9, r3
 800737c:	f1b9 0f00 	cmp.w	r9, #0
 8007380:	dc35      	bgt.n	80073ee <_printf_float+0x3ae>
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738a:	f104 0a1a 	add.w	sl, r4, #26
 800738e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	eba3 0309 	sub.w	r3, r3, r9
 8007398:	4543      	cmp	r3, r8
 800739a:	f77f af79 	ble.w	8007290 <_printf_float+0x250>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	f43f aeaa 	beq.w	8007102 <_printf_float+0xc2>
 80073ae:	f108 0801 	add.w	r8, r8, #1
 80073b2:	e7ec      	b.n	800738e <_printf_float+0x34e>
 80073b4:	4613      	mov	r3, r2
 80073b6:	4631      	mov	r1, r6
 80073b8:	4642      	mov	r2, r8
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	d1c0      	bne.n	8007344 <_printf_float+0x304>
 80073c2:	e69e      	b.n	8007102 <_printf_float+0xc2>
 80073c4:	2301      	movs	r3, #1
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	9205      	str	r2, [sp, #20]
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f ae97 	beq.w	8007102 <_printf_float+0xc2>
 80073d4:	9a05      	ldr	r2, [sp, #20]
 80073d6:	f10b 0b01 	add.w	fp, fp, #1
 80073da:	e7b9      	b.n	8007350 <_printf_float+0x310>
 80073dc:	ee18 3a10 	vmov	r3, s16
 80073e0:	4652      	mov	r2, sl
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	d1be      	bne.n	800736a <_printf_float+0x32a>
 80073ec:	e689      	b.n	8007102 <_printf_float+0xc2>
 80073ee:	9a05      	ldr	r2, [sp, #20]
 80073f0:	464b      	mov	r3, r9
 80073f2:	4442      	add	r2, r8
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	d1c1      	bne.n	8007382 <_printf_float+0x342>
 80073fe:	e680      	b.n	8007102 <_printf_float+0xc2>
 8007400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007402:	2a01      	cmp	r2, #1
 8007404:	dc01      	bgt.n	800740a <_printf_float+0x3ca>
 8007406:	07db      	lsls	r3, r3, #31
 8007408:	d538      	bpl.n	800747c <_printf_float+0x43c>
 800740a:	2301      	movs	r3, #1
 800740c:	4642      	mov	r2, r8
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f ae74 	beq.w	8007102 <_printf_float+0xc2>
 800741a:	ee18 3a10 	vmov	r3, s16
 800741e:	4652      	mov	r2, sl
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	f43f ae6b 	beq.w	8007102 <_printf_float+0xc2>
 800742c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007430:	2200      	movs	r2, #0
 8007432:	2300      	movs	r3, #0
 8007434:	f7f9 fb68 	bl	8000b08 <__aeabi_dcmpeq>
 8007438:	b9d8      	cbnz	r0, 8007472 <_printf_float+0x432>
 800743a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743c:	f108 0201 	add.w	r2, r8, #1
 8007440:	3b01      	subs	r3, #1
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	d10e      	bne.n	800746a <_printf_float+0x42a>
 800744c:	e659      	b.n	8007102 <_printf_float+0xc2>
 800744e:	2301      	movs	r3, #1
 8007450:	4652      	mov	r2, sl
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae52 	beq.w	8007102 <_printf_float+0xc2>
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	4543      	cmp	r3, r8
 8007468:	dcf1      	bgt.n	800744e <_printf_float+0x40e>
 800746a:	464b      	mov	r3, r9
 800746c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007470:	e6dc      	b.n	800722c <_printf_float+0x1ec>
 8007472:	f04f 0800 	mov.w	r8, #0
 8007476:	f104 0a1a 	add.w	sl, r4, #26
 800747a:	e7f2      	b.n	8007462 <_printf_float+0x422>
 800747c:	2301      	movs	r3, #1
 800747e:	4642      	mov	r2, r8
 8007480:	e7df      	b.n	8007442 <_printf_float+0x402>
 8007482:	2301      	movs	r3, #1
 8007484:	464a      	mov	r2, r9
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f ae38 	beq.w	8007102 <_printf_float+0xc2>
 8007492:	f108 0801 	add.w	r8, r8, #1
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	4543      	cmp	r3, r8
 800749e:	dcf0      	bgt.n	8007482 <_printf_float+0x442>
 80074a0:	e6fa      	b.n	8007298 <_printf_float+0x258>
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	f104 0919 	add.w	r9, r4, #25
 80074aa:	e7f4      	b.n	8007496 <_printf_float+0x456>

080074ac <_printf_common>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	4616      	mov	r6, r2
 80074b2:	4699      	mov	r9, r3
 80074b4:	688a      	ldr	r2, [r1, #8]
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074bc:	4293      	cmp	r3, r2
 80074be:	bfb8      	it	lt
 80074c0:	4613      	movlt	r3, r2
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c8:	4607      	mov	r7, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	b10a      	cbz	r2, 80074d2 <_printf_common+0x26>
 80074ce:	3301      	adds	r3, #1
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	0699      	lsls	r1, r3, #26
 80074d6:	bf42      	ittt	mi
 80074d8:	6833      	ldrmi	r3, [r6, #0]
 80074da:	3302      	addmi	r3, #2
 80074dc:	6033      	strmi	r3, [r6, #0]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	f015 0506 	ands.w	r5, r5, #6
 80074e4:	d106      	bne.n	80074f4 <_printf_common+0x48>
 80074e6:	f104 0a19 	add.w	sl, r4, #25
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	6832      	ldr	r2, [r6, #0]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dc26      	bgt.n	8007542 <_printf_common+0x96>
 80074f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074f8:	1e13      	subs	r3, r2, #0
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	bf18      	it	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	0692      	lsls	r2, r2, #26
 8007502:	d42b      	bmi.n	800755c <_printf_common+0xb0>
 8007504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007508:	4649      	mov	r1, r9
 800750a:	4638      	mov	r0, r7
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d01e      	beq.n	8007550 <_printf_common+0xa4>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	68e5      	ldr	r5, [r4, #12]
 8007516:	6832      	ldr	r2, [r6, #0]
 8007518:	f003 0306 	and.w	r3, r3, #6
 800751c:	2b04      	cmp	r3, #4
 800751e:	bf08      	it	eq
 8007520:	1aad      	subeq	r5, r5, r2
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	bf0c      	ite	eq
 8007528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800752c:	2500      	movne	r5, #0
 800752e:	4293      	cmp	r3, r2
 8007530:	bfc4      	itt	gt
 8007532:	1a9b      	subgt	r3, r3, r2
 8007534:	18ed      	addgt	r5, r5, r3
 8007536:	2600      	movs	r6, #0
 8007538:	341a      	adds	r4, #26
 800753a:	42b5      	cmp	r5, r6
 800753c:	d11a      	bne.n	8007574 <_printf_common+0xc8>
 800753e:	2000      	movs	r0, #0
 8007540:	e008      	b.n	8007554 <_printf_common+0xa8>
 8007542:	2301      	movs	r3, #1
 8007544:	4652      	mov	r2, sl
 8007546:	4649      	mov	r1, r9
 8007548:	4638      	mov	r0, r7
 800754a:	47c0      	blx	r8
 800754c:	3001      	adds	r0, #1
 800754e:	d103      	bne.n	8007558 <_printf_common+0xac>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007558:	3501      	adds	r5, #1
 800755a:	e7c6      	b.n	80074ea <_printf_common+0x3e>
 800755c:	18e1      	adds	r1, r4, r3
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	2030      	movs	r0, #48	; 0x30
 8007562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007566:	4422      	add	r2, r4
 8007568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800756c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007570:	3302      	adds	r3, #2
 8007572:	e7c7      	b.n	8007504 <_printf_common+0x58>
 8007574:	2301      	movs	r3, #1
 8007576:	4622      	mov	r2, r4
 8007578:	4649      	mov	r1, r9
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d0e6      	beq.n	8007550 <_printf_common+0xa4>
 8007582:	3601      	adds	r6, #1
 8007584:	e7d9      	b.n	800753a <_printf_common+0x8e>
	...

08007588 <_printf_i>:
 8007588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	4691      	mov	r9, r2
 8007590:	7e27      	ldrb	r7, [r4, #24]
 8007592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4680      	mov	r8, r0
 8007598:	469a      	mov	sl, r3
 800759a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800759e:	d807      	bhi.n	80075b0 <_printf_i+0x28>
 80075a0:	2f62      	cmp	r7, #98	; 0x62
 80075a2:	d80a      	bhi.n	80075ba <_printf_i+0x32>
 80075a4:	2f00      	cmp	r7, #0
 80075a6:	f000 80d8 	beq.w	800775a <_printf_i+0x1d2>
 80075aa:	2f58      	cmp	r7, #88	; 0x58
 80075ac:	f000 80a3 	beq.w	80076f6 <_printf_i+0x16e>
 80075b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075b8:	e03a      	b.n	8007630 <_printf_i+0xa8>
 80075ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075be:	2b15      	cmp	r3, #21
 80075c0:	d8f6      	bhi.n	80075b0 <_printf_i+0x28>
 80075c2:	a001      	add	r0, pc, #4	; (adr r0, 80075c8 <_printf_i+0x40>)
 80075c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007635 	.word	0x08007635
 80075d0:	080075b1 	.word	0x080075b1
 80075d4:	080075b1 	.word	0x080075b1
 80075d8:	080075b1 	.word	0x080075b1
 80075dc:	080075b1 	.word	0x080075b1
 80075e0:	08007635 	.word	0x08007635
 80075e4:	080075b1 	.word	0x080075b1
 80075e8:	080075b1 	.word	0x080075b1
 80075ec:	080075b1 	.word	0x080075b1
 80075f0:	080075b1 	.word	0x080075b1
 80075f4:	08007741 	.word	0x08007741
 80075f8:	08007665 	.word	0x08007665
 80075fc:	08007723 	.word	0x08007723
 8007600:	080075b1 	.word	0x080075b1
 8007604:	080075b1 	.word	0x080075b1
 8007608:	08007763 	.word	0x08007763
 800760c:	080075b1 	.word	0x080075b1
 8007610:	08007665 	.word	0x08007665
 8007614:	080075b1 	.word	0x080075b1
 8007618:	080075b1 	.word	0x080075b1
 800761c:	0800772b 	.word	0x0800772b
 8007620:	680b      	ldr	r3, [r1, #0]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	600a      	str	r2, [r1, #0]
 8007628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800762c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007630:	2301      	movs	r3, #1
 8007632:	e0a3      	b.n	800777c <_printf_i+0x1f4>
 8007634:	6825      	ldr	r5, [r4, #0]
 8007636:	6808      	ldr	r0, [r1, #0]
 8007638:	062e      	lsls	r6, r5, #24
 800763a:	f100 0304 	add.w	r3, r0, #4
 800763e:	d50a      	bpl.n	8007656 <_printf_i+0xce>
 8007640:	6805      	ldr	r5, [r0, #0]
 8007642:	600b      	str	r3, [r1, #0]
 8007644:	2d00      	cmp	r5, #0
 8007646:	da03      	bge.n	8007650 <_printf_i+0xc8>
 8007648:	232d      	movs	r3, #45	; 0x2d
 800764a:	426d      	negs	r5, r5
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007650:	485e      	ldr	r0, [pc, #376]	; (80077cc <_printf_i+0x244>)
 8007652:	230a      	movs	r3, #10
 8007654:	e019      	b.n	800768a <_printf_i+0x102>
 8007656:	f015 0f40 	tst.w	r5, #64	; 0x40
 800765a:	6805      	ldr	r5, [r0, #0]
 800765c:	600b      	str	r3, [r1, #0]
 800765e:	bf18      	it	ne
 8007660:	b22d      	sxthne	r5, r5
 8007662:	e7ef      	b.n	8007644 <_printf_i+0xbc>
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	6825      	ldr	r5, [r4, #0]
 8007668:	1d18      	adds	r0, r3, #4
 800766a:	6008      	str	r0, [r1, #0]
 800766c:	0628      	lsls	r0, r5, #24
 800766e:	d501      	bpl.n	8007674 <_printf_i+0xec>
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0xf2>
 8007674:	0669      	lsls	r1, r5, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0xe8>
 8007678:	881d      	ldrh	r5, [r3, #0]
 800767a:	4854      	ldr	r0, [pc, #336]	; (80077cc <_printf_i+0x244>)
 800767c:	2f6f      	cmp	r7, #111	; 0x6f
 800767e:	bf0c      	ite	eq
 8007680:	2308      	moveq	r3, #8
 8007682:	230a      	movne	r3, #10
 8007684:	2100      	movs	r1, #0
 8007686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768a:	6866      	ldr	r6, [r4, #4]
 800768c:	60a6      	str	r6, [r4, #8]
 800768e:	2e00      	cmp	r6, #0
 8007690:	bfa2      	ittt	ge
 8007692:	6821      	ldrge	r1, [r4, #0]
 8007694:	f021 0104 	bicge.w	r1, r1, #4
 8007698:	6021      	strge	r1, [r4, #0]
 800769a:	b90d      	cbnz	r5, 80076a0 <_printf_i+0x118>
 800769c:	2e00      	cmp	r6, #0
 800769e:	d04d      	beq.n	800773c <_printf_i+0x1b4>
 80076a0:	4616      	mov	r6, r2
 80076a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a6:	fb03 5711 	mls	r7, r3, r1, r5
 80076aa:	5dc7      	ldrb	r7, [r0, r7]
 80076ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b0:	462f      	mov	r7, r5
 80076b2:	42bb      	cmp	r3, r7
 80076b4:	460d      	mov	r5, r1
 80076b6:	d9f4      	bls.n	80076a2 <_printf_i+0x11a>
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d10b      	bne.n	80076d4 <_printf_i+0x14c>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07df      	lsls	r7, r3, #31
 80076c0:	d508      	bpl.n	80076d4 <_printf_i+0x14c>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	4299      	cmp	r1, r3
 80076c8:	bfde      	ittt	le
 80076ca:	2330      	movle	r3, #48	; 0x30
 80076cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076d4:	1b92      	subs	r2, r2, r6
 80076d6:	6122      	str	r2, [r4, #16]
 80076d8:	f8cd a000 	str.w	sl, [sp]
 80076dc:	464b      	mov	r3, r9
 80076de:	aa03      	add	r2, sp, #12
 80076e0:	4621      	mov	r1, r4
 80076e2:	4640      	mov	r0, r8
 80076e4:	f7ff fee2 	bl	80074ac <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d14c      	bne.n	8007786 <_printf_i+0x1fe>
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b004      	add	sp, #16
 80076f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f6:	4835      	ldr	r0, [pc, #212]	; (80077cc <_printf_i+0x244>)
 80076f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	680e      	ldr	r6, [r1, #0]
 8007700:	061f      	lsls	r7, r3, #24
 8007702:	f856 5b04 	ldr.w	r5, [r6], #4
 8007706:	600e      	str	r6, [r1, #0]
 8007708:	d514      	bpl.n	8007734 <_printf_i+0x1ac>
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	bf44      	itt	mi
 800770e:	f043 0320 	orrmi.w	r3, r3, #32
 8007712:	6023      	strmi	r3, [r4, #0]
 8007714:	b91d      	cbnz	r5, 800771e <_printf_i+0x196>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f023 0320 	bic.w	r3, r3, #32
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	2310      	movs	r3, #16
 8007720:	e7b0      	b.n	8007684 <_printf_i+0xfc>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f043 0320 	orr.w	r3, r3, #32
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	2378      	movs	r3, #120	; 0x78
 800772c:	4828      	ldr	r0, [pc, #160]	; (80077d0 <_printf_i+0x248>)
 800772e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007732:	e7e3      	b.n	80076fc <_printf_i+0x174>
 8007734:	065e      	lsls	r6, r3, #25
 8007736:	bf48      	it	mi
 8007738:	b2ad      	uxthmi	r5, r5
 800773a:	e7e6      	b.n	800770a <_printf_i+0x182>
 800773c:	4616      	mov	r6, r2
 800773e:	e7bb      	b.n	80076b8 <_printf_i+0x130>
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	6826      	ldr	r6, [r4, #0]
 8007744:	6960      	ldr	r0, [r4, #20]
 8007746:	1d1d      	adds	r5, r3, #4
 8007748:	600d      	str	r5, [r1, #0]
 800774a:	0635      	lsls	r5, r6, #24
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	d501      	bpl.n	8007754 <_printf_i+0x1cc>
 8007750:	6018      	str	r0, [r3, #0]
 8007752:	e002      	b.n	800775a <_printf_i+0x1d2>
 8007754:	0671      	lsls	r1, r6, #25
 8007756:	d5fb      	bpl.n	8007750 <_printf_i+0x1c8>
 8007758:	8018      	strh	r0, [r3, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	4616      	mov	r6, r2
 8007760:	e7ba      	b.n	80076d8 <_printf_i+0x150>
 8007762:	680b      	ldr	r3, [r1, #0]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	600a      	str	r2, [r1, #0]
 8007768:	681e      	ldr	r6, [r3, #0]
 800776a:	6862      	ldr	r2, [r4, #4]
 800776c:	2100      	movs	r1, #0
 800776e:	4630      	mov	r0, r6
 8007770:	f7f8 fd56 	bl	8000220 <memchr>
 8007774:	b108      	cbz	r0, 800777a <_printf_i+0x1f2>
 8007776:	1b80      	subs	r0, r0, r6
 8007778:	6060      	str	r0, [r4, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	2300      	movs	r3, #0
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007784:	e7a8      	b.n	80076d8 <_printf_i+0x150>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	4632      	mov	r2, r6
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	47d0      	blx	sl
 8007790:	3001      	adds	r0, #1
 8007792:	d0ab      	beq.n	80076ec <_printf_i+0x164>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	079b      	lsls	r3, r3, #30
 8007798:	d413      	bmi.n	80077c2 <_printf_i+0x23a>
 800779a:	68e0      	ldr	r0, [r4, #12]
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	4298      	cmp	r0, r3
 80077a0:	bfb8      	it	lt
 80077a2:	4618      	movlt	r0, r3
 80077a4:	e7a4      	b.n	80076f0 <_printf_i+0x168>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4632      	mov	r2, r6
 80077aa:	4649      	mov	r1, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	47d0      	blx	sl
 80077b0:	3001      	adds	r0, #1
 80077b2:	d09b      	beq.n	80076ec <_printf_i+0x164>
 80077b4:	3501      	adds	r5, #1
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	9903      	ldr	r1, [sp, #12]
 80077ba:	1a5b      	subs	r3, r3, r1
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dcf2      	bgt.n	80077a6 <_printf_i+0x21e>
 80077c0:	e7eb      	b.n	800779a <_printf_i+0x212>
 80077c2:	2500      	movs	r5, #0
 80077c4:	f104 0619 	add.w	r6, r4, #25
 80077c8:	e7f5      	b.n	80077b6 <_printf_i+0x22e>
 80077ca:	bf00      	nop
 80077cc:	0800b7c6 	.word	0x0800b7c6
 80077d0:	0800b7d7 	.word	0x0800b7d7

080077d4 <_scanf_float>:
 80077d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	b087      	sub	sp, #28
 80077da:	4617      	mov	r7, r2
 80077dc:	9303      	str	r3, [sp, #12]
 80077de:	688b      	ldr	r3, [r1, #8]
 80077e0:	1e5a      	subs	r2, r3, #1
 80077e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077e6:	bf83      	ittte	hi
 80077e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077ec:	195b      	addhi	r3, r3, r5
 80077ee:	9302      	strhi	r3, [sp, #8]
 80077f0:	2300      	movls	r3, #0
 80077f2:	bf86      	itte	hi
 80077f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077f8:	608b      	strhi	r3, [r1, #8]
 80077fa:	9302      	strls	r3, [sp, #8]
 80077fc:	680b      	ldr	r3, [r1, #0]
 80077fe:	468b      	mov	fp, r1
 8007800:	2500      	movs	r5, #0
 8007802:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007806:	f84b 3b1c 	str.w	r3, [fp], #28
 800780a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800780e:	4680      	mov	r8, r0
 8007810:	460c      	mov	r4, r1
 8007812:	465e      	mov	r6, fp
 8007814:	46aa      	mov	sl, r5
 8007816:	46a9      	mov	r9, r5
 8007818:	9501      	str	r5, [sp, #4]
 800781a:	68a2      	ldr	r2, [r4, #8]
 800781c:	b152      	cbz	r2, 8007834 <_scanf_float+0x60>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b4e      	cmp	r3, #78	; 0x4e
 8007824:	d864      	bhi.n	80078f0 <_scanf_float+0x11c>
 8007826:	2b40      	cmp	r3, #64	; 0x40
 8007828:	d83c      	bhi.n	80078a4 <_scanf_float+0xd0>
 800782a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800782e:	b2c8      	uxtb	r0, r1
 8007830:	280e      	cmp	r0, #14
 8007832:	d93a      	bls.n	80078aa <_scanf_float+0xd6>
 8007834:	f1b9 0f00 	cmp.w	r9, #0
 8007838:	d003      	beq.n	8007842 <_scanf_float+0x6e>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007846:	f1ba 0f01 	cmp.w	sl, #1
 800784a:	f200 8113 	bhi.w	8007a74 <_scanf_float+0x2a0>
 800784e:	455e      	cmp	r6, fp
 8007850:	f200 8105 	bhi.w	8007a5e <_scanf_float+0x28a>
 8007854:	2501      	movs	r5, #1
 8007856:	4628      	mov	r0, r5
 8007858:	b007      	add	sp, #28
 800785a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007862:	2a0d      	cmp	r2, #13
 8007864:	d8e6      	bhi.n	8007834 <_scanf_float+0x60>
 8007866:	a101      	add	r1, pc, #4	; (adr r1, 800786c <_scanf_float+0x98>)
 8007868:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800786c:	080079ab 	.word	0x080079ab
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	08007835 	.word	0x08007835
 800787c:	08007a0b 	.word	0x08007a0b
 8007880:	080079e3 	.word	0x080079e3
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079b9 	.word	0x080079b9
 8007890:	08007835 	.word	0x08007835
 8007894:	08007835 	.word	0x08007835
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	08007971 	.word	0x08007971
 80078a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078a8:	e7db      	b.n	8007862 <_scanf_float+0x8e>
 80078aa:	290e      	cmp	r1, #14
 80078ac:	d8c2      	bhi.n	8007834 <_scanf_float+0x60>
 80078ae:	a001      	add	r0, pc, #4	; (adr r0, 80078b4 <_scanf_float+0xe0>)
 80078b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078b4:	08007963 	.word	0x08007963
 80078b8:	08007835 	.word	0x08007835
 80078bc:	08007963 	.word	0x08007963
 80078c0:	080079f7 	.word	0x080079f7
 80078c4:	08007835 	.word	0x08007835
 80078c8:	08007911 	.word	0x08007911
 80078cc:	0800794d 	.word	0x0800794d
 80078d0:	0800794d 	.word	0x0800794d
 80078d4:	0800794d 	.word	0x0800794d
 80078d8:	0800794d 	.word	0x0800794d
 80078dc:	0800794d 	.word	0x0800794d
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	0800794d 	.word	0x0800794d
 80078f0:	2b6e      	cmp	r3, #110	; 0x6e
 80078f2:	d809      	bhi.n	8007908 <_scanf_float+0x134>
 80078f4:	2b60      	cmp	r3, #96	; 0x60
 80078f6:	d8b2      	bhi.n	800785e <_scanf_float+0x8a>
 80078f8:	2b54      	cmp	r3, #84	; 0x54
 80078fa:	d077      	beq.n	80079ec <_scanf_float+0x218>
 80078fc:	2b59      	cmp	r3, #89	; 0x59
 80078fe:	d199      	bne.n	8007834 <_scanf_float+0x60>
 8007900:	2d07      	cmp	r5, #7
 8007902:	d197      	bne.n	8007834 <_scanf_float+0x60>
 8007904:	2508      	movs	r5, #8
 8007906:	e029      	b.n	800795c <_scanf_float+0x188>
 8007908:	2b74      	cmp	r3, #116	; 0x74
 800790a:	d06f      	beq.n	80079ec <_scanf_float+0x218>
 800790c:	2b79      	cmp	r3, #121	; 0x79
 800790e:	e7f6      	b.n	80078fe <_scanf_float+0x12a>
 8007910:	6821      	ldr	r1, [r4, #0]
 8007912:	05c8      	lsls	r0, r1, #23
 8007914:	d51a      	bpl.n	800794c <_scanf_float+0x178>
 8007916:	9b02      	ldr	r3, [sp, #8]
 8007918:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800791c:	6021      	str	r1, [r4, #0]
 800791e:	f109 0901 	add.w	r9, r9, #1
 8007922:	b11b      	cbz	r3, 800792c <_scanf_float+0x158>
 8007924:	3b01      	subs	r3, #1
 8007926:	3201      	adds	r2, #1
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	60a2      	str	r2, [r4, #8]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	3b01      	subs	r3, #1
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	3301      	adds	r3, #1
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3b01      	subs	r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	f340 8084 	ble.w	8007a4c <_scanf_float+0x278>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	e766      	b.n	800781a <_scanf_float+0x46>
 800794c:	eb1a 0f05 	cmn.w	sl, r5
 8007950:	f47f af70 	bne.w	8007834 <_scanf_float+0x60>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800795a:	6022      	str	r2, [r4, #0]
 800795c:	f806 3b01 	strb.w	r3, [r6], #1
 8007960:	e7e4      	b.n	800792c <_scanf_float+0x158>
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	0610      	lsls	r0, r2, #24
 8007966:	f57f af65 	bpl.w	8007834 <_scanf_float+0x60>
 800796a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800796e:	e7f4      	b.n	800795a <_scanf_float+0x186>
 8007970:	f1ba 0f00 	cmp.w	sl, #0
 8007974:	d10e      	bne.n	8007994 <_scanf_float+0x1c0>
 8007976:	f1b9 0f00 	cmp.w	r9, #0
 800797a:	d10e      	bne.n	800799a <_scanf_float+0x1c6>
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007982:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007986:	d108      	bne.n	800799a <_scanf_float+0x1c6>
 8007988:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	f04f 0a01 	mov.w	sl, #1
 8007992:	e7e3      	b.n	800795c <_scanf_float+0x188>
 8007994:	f1ba 0f02 	cmp.w	sl, #2
 8007998:	d055      	beq.n	8007a46 <_scanf_float+0x272>
 800799a:	2d01      	cmp	r5, #1
 800799c:	d002      	beq.n	80079a4 <_scanf_float+0x1d0>
 800799e:	2d04      	cmp	r5, #4
 80079a0:	f47f af48 	bne.w	8007834 <_scanf_float+0x60>
 80079a4:	3501      	adds	r5, #1
 80079a6:	b2ed      	uxtb	r5, r5
 80079a8:	e7d8      	b.n	800795c <_scanf_float+0x188>
 80079aa:	f1ba 0f01 	cmp.w	sl, #1
 80079ae:	f47f af41 	bne.w	8007834 <_scanf_float+0x60>
 80079b2:	f04f 0a02 	mov.w	sl, #2
 80079b6:	e7d1      	b.n	800795c <_scanf_float+0x188>
 80079b8:	b97d      	cbnz	r5, 80079da <_scanf_float+0x206>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	f47f af3c 	bne.w	800783a <_scanf_float+0x66>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079cc:	f47f af39 	bne.w	8007842 <_scanf_float+0x6e>
 80079d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	2501      	movs	r5, #1
 80079d8:	e7c0      	b.n	800795c <_scanf_float+0x188>
 80079da:	2d03      	cmp	r5, #3
 80079dc:	d0e2      	beq.n	80079a4 <_scanf_float+0x1d0>
 80079de:	2d05      	cmp	r5, #5
 80079e0:	e7de      	b.n	80079a0 <_scanf_float+0x1cc>
 80079e2:	2d02      	cmp	r5, #2
 80079e4:	f47f af26 	bne.w	8007834 <_scanf_float+0x60>
 80079e8:	2503      	movs	r5, #3
 80079ea:	e7b7      	b.n	800795c <_scanf_float+0x188>
 80079ec:	2d06      	cmp	r5, #6
 80079ee:	f47f af21 	bne.w	8007834 <_scanf_float+0x60>
 80079f2:	2507      	movs	r5, #7
 80079f4:	e7b2      	b.n	800795c <_scanf_float+0x188>
 80079f6:	6822      	ldr	r2, [r4, #0]
 80079f8:	0591      	lsls	r1, r2, #22
 80079fa:	f57f af1b 	bpl.w	8007834 <_scanf_float+0x60>
 80079fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a08:	e7a8      	b.n	800795c <_scanf_float+0x188>
 8007a0a:	6822      	ldr	r2, [r4, #0]
 8007a0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a14:	d006      	beq.n	8007a24 <_scanf_float+0x250>
 8007a16:	0550      	lsls	r0, r2, #21
 8007a18:	f57f af0c 	bpl.w	8007834 <_scanf_float+0x60>
 8007a1c:	f1b9 0f00 	cmp.w	r9, #0
 8007a20:	f43f af0f 	beq.w	8007842 <_scanf_float+0x6e>
 8007a24:	0591      	lsls	r1, r2, #22
 8007a26:	bf58      	it	pl
 8007a28:	9901      	ldrpl	r1, [sp, #4]
 8007a2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a2e:	bf58      	it	pl
 8007a30:	eba9 0101 	subpl.w	r1, r9, r1
 8007a34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a38:	bf58      	it	pl
 8007a3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a3e:	6022      	str	r2, [r4, #0]
 8007a40:	f04f 0900 	mov.w	r9, #0
 8007a44:	e78a      	b.n	800795c <_scanf_float+0x188>
 8007a46:	f04f 0a03 	mov.w	sl, #3
 8007a4a:	e787      	b.n	800795c <_scanf_float+0x188>
 8007a4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a50:	4639      	mov	r1, r7
 8007a52:	4640      	mov	r0, r8
 8007a54:	4798      	blx	r3
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f aedf 	beq.w	800781a <_scanf_float+0x46>
 8007a5c:	e6ea      	b.n	8007834 <_scanf_float+0x60>
 8007a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a66:	463a      	mov	r2, r7
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4798      	blx	r3
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	e6ec      	b.n	800784e <_scanf_float+0x7a>
 8007a74:	1e6b      	subs	r3, r5, #1
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d825      	bhi.n	8007ac6 <_scanf_float+0x2f2>
 8007a7a:	2d02      	cmp	r5, #2
 8007a7c:	d836      	bhi.n	8007aec <_scanf_float+0x318>
 8007a7e:	455e      	cmp	r6, fp
 8007a80:	f67f aee8 	bls.w	8007854 <_scanf_float+0x80>
 8007a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a8c:	463a      	mov	r2, r7
 8007a8e:	4640      	mov	r0, r8
 8007a90:	4798      	blx	r3
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	e7f1      	b.n	8007a7e <_scanf_float+0x2aa>
 8007a9a:	9802      	ldr	r0, [sp, #8]
 8007a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007aa4:	9002      	str	r0, [sp, #8]
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4798      	blx	r3
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ab6:	fa5f fa8a 	uxtb.w	sl, sl
 8007aba:	f1ba 0f02 	cmp.w	sl, #2
 8007abe:	d1ec      	bne.n	8007a9a <_scanf_float+0x2c6>
 8007ac0:	3d03      	subs	r5, #3
 8007ac2:	b2ed      	uxtb	r5, r5
 8007ac4:	1b76      	subs	r6, r6, r5
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	05da      	lsls	r2, r3, #23
 8007aca:	d52f      	bpl.n	8007b2c <_scanf_float+0x358>
 8007acc:	055b      	lsls	r3, r3, #21
 8007ace:	d510      	bpl.n	8007af2 <_scanf_float+0x31e>
 8007ad0:	455e      	cmp	r6, fp
 8007ad2:	f67f aebf 	bls.w	8007854 <_scanf_float+0x80>
 8007ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ade:	463a      	mov	r2, r7
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4798      	blx	r3
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	e7f1      	b.n	8007ad0 <_scanf_float+0x2fc>
 8007aec:	46aa      	mov	sl, r5
 8007aee:	9602      	str	r6, [sp, #8]
 8007af0:	e7df      	b.n	8007ab2 <_scanf_float+0x2de>
 8007af2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	2965      	cmp	r1, #101	; 0x65
 8007afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8007afe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	d00c      	beq.n	8007b20 <_scanf_float+0x34c>
 8007b06:	2945      	cmp	r1, #69	; 0x45
 8007b08:	d00a      	beq.n	8007b20 <_scanf_float+0x34c>
 8007b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b0e:	463a      	mov	r2, r7
 8007b10:	4640      	mov	r0, r8
 8007b12:	4798      	blx	r3
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	1eb5      	subs	r5, r6, #2
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b24:	463a      	mov	r2, r7
 8007b26:	4640      	mov	r0, r8
 8007b28:	4798      	blx	r3
 8007b2a:	462e      	mov	r6, r5
 8007b2c:	6825      	ldr	r5, [r4, #0]
 8007b2e:	f015 0510 	ands.w	r5, r5, #16
 8007b32:	d158      	bne.n	8007be6 <_scanf_float+0x412>
 8007b34:	7035      	strb	r5, [r6, #0]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b40:	d11c      	bne.n	8007b7c <_scanf_float+0x3a8>
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	454b      	cmp	r3, r9
 8007b46:	eba3 0209 	sub.w	r2, r3, r9
 8007b4a:	d124      	bne.n	8007b96 <_scanf_float+0x3c2>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4659      	mov	r1, fp
 8007b50:	4640      	mov	r0, r8
 8007b52:	f000 fe9b 	bl	800888c <_strtod_r>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	6821      	ldr	r1, [r4, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f011 0f02 	tst.w	r1, #2
 8007b60:	ec57 6b10 	vmov	r6, r7, d0
 8007b64:	f103 0204 	add.w	r2, r3, #4
 8007b68:	d020      	beq.n	8007bac <_scanf_float+0x3d8>
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	600a      	str	r2, [r1, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	e9c3 6700 	strd	r6, r7, [r3]
 8007b74:	68e3      	ldr	r3, [r4, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60e3      	str	r3, [r4, #12]
 8007b7a:	e66c      	b.n	8007856 <_scanf_float+0x82>
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0e4      	beq.n	8007b4c <_scanf_float+0x378>
 8007b82:	9905      	ldr	r1, [sp, #20]
 8007b84:	230a      	movs	r3, #10
 8007b86:	462a      	mov	r2, r5
 8007b88:	3101      	adds	r1, #1
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f000 ff08 	bl	80089a0 <_strtol_r>
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	9e05      	ldr	r6, [sp, #20]
 8007b94:	1ac2      	subs	r2, r0, r3
 8007b96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b9a:	429e      	cmp	r6, r3
 8007b9c:	bf28      	it	cs
 8007b9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ba2:	4912      	ldr	r1, [pc, #72]	; (8007bec <_scanf_float+0x418>)
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 f82b 	bl	8007c00 <siprintf>
 8007baa:	e7cf      	b.n	8007b4c <_scanf_float+0x378>
 8007bac:	f011 0f04 	tst.w	r1, #4
 8007bb0:	9903      	ldr	r1, [sp, #12]
 8007bb2:	600a      	str	r2, [r1, #0]
 8007bb4:	d1db      	bne.n	8007b6e <_scanf_float+0x39a>
 8007bb6:	f8d3 8000 	ldr.w	r8, [r3]
 8007bba:	ee10 2a10 	vmov	r2, s0
 8007bbe:	ee10 0a10 	vmov	r0, s0
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 ffd1 	bl	8000b6c <__aeabi_dcmpun>
 8007bca:	b128      	cbz	r0, 8007bd8 <_scanf_float+0x404>
 8007bcc:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <_scanf_float+0x41c>)
 8007bce:	f000 f811 	bl	8007bf4 <nanf>
 8007bd2:	ed88 0a00 	vstr	s0, [r8]
 8007bd6:	e7cd      	b.n	8007b74 <_scanf_float+0x3a0>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f9 f824 	bl	8000c28 <__aeabi_d2f>
 8007be0:	f8c8 0000 	str.w	r0, [r8]
 8007be4:	e7c6      	b.n	8007b74 <_scanf_float+0x3a0>
 8007be6:	2500      	movs	r5, #0
 8007be8:	e635      	b.n	8007856 <_scanf_float+0x82>
 8007bea:	bf00      	nop
 8007bec:	0800b7e8 	.word	0x0800b7e8
 8007bf0:	0800bc00 	.word	0x0800bc00

08007bf4 <nanf>:
 8007bf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bfc <nanf+0x8>
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	7fc00000 	.word	0x7fc00000

08007c00 <siprintf>:
 8007c00:	b40e      	push	{r1, r2, r3}
 8007c02:	b500      	push	{lr}
 8007c04:	b09c      	sub	sp, #112	; 0x70
 8007c06:	ab1d      	add	r3, sp, #116	; 0x74
 8007c08:	9002      	str	r0, [sp, #8]
 8007c0a:	9006      	str	r0, [sp, #24]
 8007c0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c10:	4809      	ldr	r0, [pc, #36]	; (8007c38 <siprintf+0x38>)
 8007c12:	9107      	str	r1, [sp, #28]
 8007c14:	9104      	str	r1, [sp, #16]
 8007c16:	4909      	ldr	r1, [pc, #36]	; (8007c3c <siprintf+0x3c>)
 8007c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1c:	9105      	str	r1, [sp, #20]
 8007c1e:	6800      	ldr	r0, [r0, #0]
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	a902      	add	r1, sp, #8
 8007c24:	f002 fea4 	bl	800a970 <_svfiprintf_r>
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	b01c      	add	sp, #112	; 0x70
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	2000000c 	.word	0x2000000c
 8007c3c:	ffff0208 	.word	0xffff0208

08007c40 <sulp>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
 8007c46:	ec45 4b10 	vmov	d0, r4, r5
 8007c4a:	4616      	mov	r6, r2
 8007c4c:	f002 fc2c 	bl	800a4a8 <__ulp>
 8007c50:	ec51 0b10 	vmov	r0, r1, d0
 8007c54:	b17e      	cbz	r6, 8007c76 <sulp+0x36>
 8007c56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd09      	ble.n	8007c76 <sulp+0x36>
 8007c62:	051b      	lsls	r3, r3, #20
 8007c64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c68:	2400      	movs	r4, #0
 8007c6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c6e:	4622      	mov	r2, r4
 8007c70:	462b      	mov	r3, r5
 8007c72:	f7f8 fce1 	bl	8000638 <__aeabi_dmul>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}

08007c78 <_strtod_l>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	b0a3      	sub	sp, #140	; 0x8c
 8007c7e:	461f      	mov	r7, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	931e      	str	r3, [sp, #120]	; 0x78
 8007c84:	4ba4      	ldr	r3, [pc, #656]	; (8007f18 <_strtod_l+0x2a0>)
 8007c86:	9219      	str	r2, [sp, #100]	; 0x64
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	4688      	mov	r8, r1
 8007c92:	f7f8 fabd 	bl	8000210 <strlen>
 8007c96:	f04f 0a00 	mov.w	sl, #0
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	f04f 0b00 	mov.w	fp, #0
 8007ca0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	2a2b      	cmp	r2, #43	; 0x2b
 8007caa:	d04c      	beq.n	8007d46 <_strtod_l+0xce>
 8007cac:	d839      	bhi.n	8007d22 <_strtod_l+0xaa>
 8007cae:	2a0d      	cmp	r2, #13
 8007cb0:	d832      	bhi.n	8007d18 <_strtod_l+0xa0>
 8007cb2:	2a08      	cmp	r2, #8
 8007cb4:	d832      	bhi.n	8007d1c <_strtod_l+0xa4>
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d03c      	beq.n	8007d34 <_strtod_l+0xbc>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8007cbe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007cc0:	7833      	ldrb	r3, [r6, #0]
 8007cc2:	2b30      	cmp	r3, #48	; 0x30
 8007cc4:	f040 80b4 	bne.w	8007e30 <_strtod_l+0x1b8>
 8007cc8:	7873      	ldrb	r3, [r6, #1]
 8007cca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cce:	2b58      	cmp	r3, #88	; 0x58
 8007cd0:	d16c      	bne.n	8007dac <_strtod_l+0x134>
 8007cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	ab1e      	add	r3, sp, #120	; 0x78
 8007cd8:	9702      	str	r7, [sp, #8]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4a8f      	ldr	r2, [pc, #572]	; (8007f1c <_strtod_l+0x2a4>)
 8007cde:	ab1f      	add	r3, sp, #124	; 0x7c
 8007ce0:	a91d      	add	r1, sp, #116	; 0x74
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f001 fd40 	bl	8009768 <__gethex>
 8007ce8:	f010 0707 	ands.w	r7, r0, #7
 8007cec:	4605      	mov	r5, r0
 8007cee:	d005      	beq.n	8007cfc <_strtod_l+0x84>
 8007cf0:	2f06      	cmp	r7, #6
 8007cf2:	d12a      	bne.n	8007d4a <_strtod_l+0xd2>
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	961d      	str	r6, [sp, #116]	; 0x74
 8007cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 8596 	bne.w	8008830 <_strtod_l+0xbb8>
 8007d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d06:	b1db      	cbz	r3, 8007d40 <_strtod_l+0xc8>
 8007d08:	4652      	mov	r2, sl
 8007d0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d0e:	ec43 2b10 	vmov	d0, r2, r3
 8007d12:	b023      	add	sp, #140	; 0x8c
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d18:	2a20      	cmp	r2, #32
 8007d1a:	d1ce      	bne.n	8007cba <_strtod_l+0x42>
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	931d      	str	r3, [sp, #116]	; 0x74
 8007d20:	e7c0      	b.n	8007ca4 <_strtod_l+0x2c>
 8007d22:	2a2d      	cmp	r2, #45	; 0x2d
 8007d24:	d1c9      	bne.n	8007cba <_strtod_l+0x42>
 8007d26:	2201      	movs	r2, #1
 8007d28:	920e      	str	r2, [sp, #56]	; 0x38
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	921d      	str	r2, [sp, #116]	; 0x74
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1c4      	bne.n	8007cbe <_strtod_l+0x46>
 8007d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f040 8576 	bne.w	800882c <_strtod_l+0xbb4>
 8007d40:	4652      	mov	r2, sl
 8007d42:	465b      	mov	r3, fp
 8007d44:	e7e3      	b.n	8007d0e <_strtod_l+0x96>
 8007d46:	2200      	movs	r2, #0
 8007d48:	e7ee      	b.n	8007d28 <_strtod_l+0xb0>
 8007d4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d4c:	b13a      	cbz	r2, 8007d5e <_strtod_l+0xe6>
 8007d4e:	2135      	movs	r1, #53	; 0x35
 8007d50:	a820      	add	r0, sp, #128	; 0x80
 8007d52:	f002 fcb4 	bl	800a6be <__copybits>
 8007d56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f002 f879 	bl	8009e50 <_Bfree>
 8007d5e:	3f01      	subs	r7, #1
 8007d60:	2f05      	cmp	r7, #5
 8007d62:	d807      	bhi.n	8007d74 <_strtod_l+0xfc>
 8007d64:	e8df f007 	tbb	[pc, r7]
 8007d68:	1d180b0e 	.word	0x1d180b0e
 8007d6c:	030e      	.short	0x030e
 8007d6e:	f04f 0b00 	mov.w	fp, #0
 8007d72:	46da      	mov	sl, fp
 8007d74:	0728      	lsls	r0, r5, #28
 8007d76:	d5c1      	bpl.n	8007cfc <_strtod_l+0x84>
 8007d78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d7c:	e7be      	b.n	8007cfc <_strtod_l+0x84>
 8007d7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007d82:	e7f7      	b.n	8007d74 <_strtod_l+0xfc>
 8007d84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007d88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d96:	e7ed      	b.n	8007d74 <_strtod_l+0xfc>
 8007d98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007f20 <_strtod_l+0x2a8>
 8007d9c:	f04f 0a00 	mov.w	sl, #0
 8007da0:	e7e8      	b.n	8007d74 <_strtod_l+0xfc>
 8007da2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007da6:	f04f 3aff 	mov.w	sl, #4294967295
 8007daa:	e7e3      	b.n	8007d74 <_strtod_l+0xfc>
 8007dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	921d      	str	r2, [sp, #116]	; 0x74
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b30      	cmp	r3, #48	; 0x30
 8007db6:	d0f9      	beq.n	8007dac <_strtod_l+0x134>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d09f      	beq.n	8007cfc <_strtod_l+0x84>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f04f 0900 	mov.w	r9, #0
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007dcc:	464f      	mov	r7, r9
 8007dce:	220a      	movs	r2, #10
 8007dd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007dd2:	7806      	ldrb	r6, [r0, #0]
 8007dd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007dd8:	b2d9      	uxtb	r1, r3
 8007dda:	2909      	cmp	r1, #9
 8007ddc:	d92a      	bls.n	8007e34 <_strtod_l+0x1bc>
 8007dde:	9907      	ldr	r1, [sp, #28]
 8007de0:	462a      	mov	r2, r5
 8007de2:	f002 fedd 	bl	800aba0 <strncmp>
 8007de6:	b398      	cbz	r0, 8007e50 <_strtod_l+0x1d8>
 8007de8:	2000      	movs	r0, #0
 8007dea:	4633      	mov	r3, r6
 8007dec:	463d      	mov	r5, r7
 8007dee:	9007      	str	r0, [sp, #28]
 8007df0:	4602      	mov	r2, r0
 8007df2:	2b65      	cmp	r3, #101	; 0x65
 8007df4:	d001      	beq.n	8007dfa <_strtod_l+0x182>
 8007df6:	2b45      	cmp	r3, #69	; 0x45
 8007df8:	d118      	bne.n	8007e2c <_strtod_l+0x1b4>
 8007dfa:	b91d      	cbnz	r5, 8007e04 <_strtod_l+0x18c>
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	4303      	orrs	r3, r0
 8007e00:	d098      	beq.n	8007d34 <_strtod_l+0xbc>
 8007e02:	2500      	movs	r5, #0
 8007e04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007e08:	f108 0301 	add.w	r3, r8, #1
 8007e0c:	931d      	str	r3, [sp, #116]	; 0x74
 8007e0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e12:	2b2b      	cmp	r3, #43	; 0x2b
 8007e14:	d075      	beq.n	8007f02 <_strtod_l+0x28a>
 8007e16:	2b2d      	cmp	r3, #45	; 0x2d
 8007e18:	d07b      	beq.n	8007f12 <_strtod_l+0x29a>
 8007e1a:	f04f 0c00 	mov.w	ip, #0
 8007e1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e22:	2909      	cmp	r1, #9
 8007e24:	f240 8082 	bls.w	8007f2c <_strtod_l+0x2b4>
 8007e28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	e09d      	b.n	8007f6c <_strtod_l+0x2f4>
 8007e30:	2300      	movs	r3, #0
 8007e32:	e7c4      	b.n	8007dbe <_strtod_l+0x146>
 8007e34:	2f08      	cmp	r7, #8
 8007e36:	bfd8      	it	le
 8007e38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007e3a:	f100 0001 	add.w	r0, r0, #1
 8007e3e:	bfda      	itte	le
 8007e40:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e44:	9309      	strle	r3, [sp, #36]	; 0x24
 8007e46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e4a:	3701      	adds	r7, #1
 8007e4c:	901d      	str	r0, [sp, #116]	; 0x74
 8007e4e:	e7bf      	b.n	8007dd0 <_strtod_l+0x158>
 8007e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e52:	195a      	adds	r2, r3, r5
 8007e54:	921d      	str	r2, [sp, #116]	; 0x74
 8007e56:	5d5b      	ldrb	r3, [r3, r5]
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	d037      	beq.n	8007ecc <_strtod_l+0x254>
 8007e5c:	9007      	str	r0, [sp, #28]
 8007e5e:	463d      	mov	r5, r7
 8007e60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007e64:	2a09      	cmp	r2, #9
 8007e66:	d912      	bls.n	8007e8e <_strtod_l+0x216>
 8007e68:	2201      	movs	r2, #1
 8007e6a:	e7c2      	b.n	8007df2 <_strtod_l+0x17a>
 8007e6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	921d      	str	r2, [sp, #116]	; 0x74
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	3001      	adds	r0, #1
 8007e76:	2b30      	cmp	r3, #48	; 0x30
 8007e78:	d0f8      	beq.n	8007e6c <_strtod_l+0x1f4>
 8007e7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007e7e:	2a08      	cmp	r2, #8
 8007e80:	f200 84db 	bhi.w	800883a <_strtod_l+0xbc2>
 8007e84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e86:	9007      	str	r0, [sp, #28]
 8007e88:	2000      	movs	r0, #0
 8007e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	3b30      	subs	r3, #48	; 0x30
 8007e90:	f100 0201 	add.w	r2, r0, #1
 8007e94:	d014      	beq.n	8007ec0 <_strtod_l+0x248>
 8007e96:	9907      	ldr	r1, [sp, #28]
 8007e98:	4411      	add	r1, r2
 8007e9a:	9107      	str	r1, [sp, #28]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	eb00 0e05 	add.w	lr, r0, r5
 8007ea2:	210a      	movs	r1, #10
 8007ea4:	4572      	cmp	r2, lr
 8007ea6:	d113      	bne.n	8007ed0 <_strtod_l+0x258>
 8007ea8:	182a      	adds	r2, r5, r0
 8007eaa:	2a08      	cmp	r2, #8
 8007eac:	f105 0501 	add.w	r5, r5, #1
 8007eb0:	4405      	add	r5, r0
 8007eb2:	dc1c      	bgt.n	8007eee <_strtod_l+0x276>
 8007eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	fb02 3301 	mla	r3, r2, r1, r3
 8007ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ec2:	1c59      	adds	r1, r3, #1
 8007ec4:	911d      	str	r1, [sp, #116]	; 0x74
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	4610      	mov	r0, r2
 8007eca:	e7c9      	b.n	8007e60 <_strtod_l+0x1e8>
 8007ecc:	4638      	mov	r0, r7
 8007ece:	e7d2      	b.n	8007e76 <_strtod_l+0x1fe>
 8007ed0:	2a08      	cmp	r2, #8
 8007ed2:	dc04      	bgt.n	8007ede <_strtod_l+0x266>
 8007ed4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007ed6:	434e      	muls	r6, r1
 8007ed8:	9609      	str	r6, [sp, #36]	; 0x24
 8007eda:	3201      	adds	r2, #1
 8007edc:	e7e2      	b.n	8007ea4 <_strtod_l+0x22c>
 8007ede:	f102 0c01 	add.w	ip, r2, #1
 8007ee2:	f1bc 0f10 	cmp.w	ip, #16
 8007ee6:	bfd8      	it	le
 8007ee8:	fb01 f909 	mulle.w	r9, r1, r9
 8007eec:	e7f5      	b.n	8007eda <_strtod_l+0x262>
 8007eee:	2d10      	cmp	r5, #16
 8007ef0:	bfdc      	itt	le
 8007ef2:	220a      	movle	r2, #10
 8007ef4:	fb02 3909 	mlale	r9, r2, r9, r3
 8007ef8:	e7e1      	b.n	8007ebe <_strtod_l+0x246>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9307      	str	r3, [sp, #28]
 8007efe:	2201      	movs	r2, #1
 8007f00:	e77c      	b.n	8007dfc <_strtod_l+0x184>
 8007f02:	f04f 0c00 	mov.w	ip, #0
 8007f06:	f108 0302 	add.w	r3, r8, #2
 8007f0a:	931d      	str	r3, [sp, #116]	; 0x74
 8007f0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007f10:	e785      	b.n	8007e1e <_strtod_l+0x1a6>
 8007f12:	f04f 0c01 	mov.w	ip, #1
 8007f16:	e7f6      	b.n	8007f06 <_strtod_l+0x28e>
 8007f18:	0800ba40 	.word	0x0800ba40
 8007f1c:	0800b7f0 	.word	0x0800b7f0
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f26:	1c59      	adds	r1, r3, #1
 8007f28:	911d      	str	r1, [sp, #116]	; 0x74
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b30      	cmp	r3, #48	; 0x30
 8007f2e:	d0f9      	beq.n	8007f24 <_strtod_l+0x2ac>
 8007f30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007f34:	2908      	cmp	r1, #8
 8007f36:	f63f af79 	bhi.w	8007e2c <_strtod_l+0x1b4>
 8007f3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f40:	9308      	str	r3, [sp, #32]
 8007f42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f44:	1c59      	adds	r1, r3, #1
 8007f46:	911d      	str	r1, [sp, #116]	; 0x74
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007f4e:	2e09      	cmp	r6, #9
 8007f50:	d937      	bls.n	8007fc2 <_strtod_l+0x34a>
 8007f52:	9e08      	ldr	r6, [sp, #32]
 8007f54:	1b89      	subs	r1, r1, r6
 8007f56:	2908      	cmp	r1, #8
 8007f58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f5c:	dc02      	bgt.n	8007f64 <_strtod_l+0x2ec>
 8007f5e:	4576      	cmp	r6, lr
 8007f60:	bfa8      	it	ge
 8007f62:	4676      	movge	r6, lr
 8007f64:	f1bc 0f00 	cmp.w	ip, #0
 8007f68:	d000      	beq.n	8007f6c <_strtod_l+0x2f4>
 8007f6a:	4276      	negs	r6, r6
 8007f6c:	2d00      	cmp	r5, #0
 8007f6e:	d14f      	bne.n	8008010 <_strtod_l+0x398>
 8007f70:	9904      	ldr	r1, [sp, #16]
 8007f72:	4301      	orrs	r1, r0
 8007f74:	f47f aec2 	bne.w	8007cfc <_strtod_l+0x84>
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	f47f aedb 	bne.w	8007d34 <_strtod_l+0xbc>
 8007f7e:	2b69      	cmp	r3, #105	; 0x69
 8007f80:	d027      	beq.n	8007fd2 <_strtod_l+0x35a>
 8007f82:	dc24      	bgt.n	8007fce <_strtod_l+0x356>
 8007f84:	2b49      	cmp	r3, #73	; 0x49
 8007f86:	d024      	beq.n	8007fd2 <_strtod_l+0x35a>
 8007f88:	2b4e      	cmp	r3, #78	; 0x4e
 8007f8a:	f47f aed3 	bne.w	8007d34 <_strtod_l+0xbc>
 8007f8e:	499e      	ldr	r1, [pc, #632]	; (8008208 <_strtod_l+0x590>)
 8007f90:	a81d      	add	r0, sp, #116	; 0x74
 8007f92:	f001 fe41 	bl	8009c18 <__match>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f aecc 	beq.w	8007d34 <_strtod_l+0xbc>
 8007f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b28      	cmp	r3, #40	; 0x28
 8007fa2:	d12d      	bne.n	8008000 <_strtod_l+0x388>
 8007fa4:	4999      	ldr	r1, [pc, #612]	; (800820c <_strtod_l+0x594>)
 8007fa6:	aa20      	add	r2, sp, #128	; 0x80
 8007fa8:	a81d      	add	r0, sp, #116	; 0x74
 8007faa:	f001 fe49 	bl	8009c40 <__hexnan>
 8007fae:	2805      	cmp	r0, #5
 8007fb0:	d126      	bne.n	8008000 <_strtod_l+0x388>
 8007fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fb4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007fb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007fbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007fc0:	e69c      	b.n	8007cfc <_strtod_l+0x84>
 8007fc2:	210a      	movs	r1, #10
 8007fc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007fc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007fcc:	e7b9      	b.n	8007f42 <_strtod_l+0x2ca>
 8007fce:	2b6e      	cmp	r3, #110	; 0x6e
 8007fd0:	e7db      	b.n	8007f8a <_strtod_l+0x312>
 8007fd2:	498f      	ldr	r1, [pc, #572]	; (8008210 <_strtod_l+0x598>)
 8007fd4:	a81d      	add	r0, sp, #116	; 0x74
 8007fd6:	f001 fe1f 	bl	8009c18 <__match>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f43f aeaa 	beq.w	8007d34 <_strtod_l+0xbc>
 8007fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fe2:	498c      	ldr	r1, [pc, #560]	; (8008214 <_strtod_l+0x59c>)
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	a81d      	add	r0, sp, #116	; 0x74
 8007fe8:	931d      	str	r3, [sp, #116]	; 0x74
 8007fea:	f001 fe15 	bl	8009c18 <__match>
 8007fee:	b910      	cbnz	r0, 8007ff6 <_strtod_l+0x37e>
 8007ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	931d      	str	r3, [sp, #116]	; 0x74
 8007ff6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008224 <_strtod_l+0x5ac>
 8007ffa:	f04f 0a00 	mov.w	sl, #0
 8007ffe:	e67d      	b.n	8007cfc <_strtod_l+0x84>
 8008000:	4885      	ldr	r0, [pc, #532]	; (8008218 <_strtod_l+0x5a0>)
 8008002:	f002 fdb5 	bl	800ab70 <nan>
 8008006:	ed8d 0b04 	vstr	d0, [sp, #16]
 800800a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800800e:	e675      	b.n	8007cfc <_strtod_l+0x84>
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008014:	1af3      	subs	r3, r6, r3
 8008016:	2f00      	cmp	r7, #0
 8008018:	bf08      	it	eq
 800801a:	462f      	moveq	r7, r5
 800801c:	2d10      	cmp	r5, #16
 800801e:	9308      	str	r3, [sp, #32]
 8008020:	46a8      	mov	r8, r5
 8008022:	bfa8      	it	ge
 8008024:	f04f 0810 	movge.w	r8, #16
 8008028:	f7f8 fa8c 	bl	8000544 <__aeabi_ui2d>
 800802c:	2d09      	cmp	r5, #9
 800802e:	4682      	mov	sl, r0
 8008030:	468b      	mov	fp, r1
 8008032:	dd13      	ble.n	800805c <_strtod_l+0x3e4>
 8008034:	4b79      	ldr	r3, [pc, #484]	; (800821c <_strtod_l+0x5a4>)
 8008036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800803a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800803e:	f7f8 fafb 	bl	8000638 <__aeabi_dmul>
 8008042:	4682      	mov	sl, r0
 8008044:	4648      	mov	r0, r9
 8008046:	468b      	mov	fp, r1
 8008048:	f7f8 fa7c 	bl	8000544 <__aeabi_ui2d>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 f93a 	bl	80002cc <__adddf3>
 8008058:	4682      	mov	sl, r0
 800805a:	468b      	mov	fp, r1
 800805c:	2d0f      	cmp	r5, #15
 800805e:	dc38      	bgt.n	80080d2 <_strtod_l+0x45a>
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f43f ae4a 	beq.w	8007cfc <_strtod_l+0x84>
 8008068:	dd24      	ble.n	80080b4 <_strtod_l+0x43c>
 800806a:	2b16      	cmp	r3, #22
 800806c:	dc0b      	bgt.n	8008086 <_strtod_l+0x40e>
 800806e:	4d6b      	ldr	r5, [pc, #428]	; (800821c <_strtod_l+0x5a4>)
 8008070:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008074:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008078:	4652      	mov	r2, sl
 800807a:	465b      	mov	r3, fp
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	4682      	mov	sl, r0
 8008082:	468b      	mov	fp, r1
 8008084:	e63a      	b.n	8007cfc <_strtod_l+0x84>
 8008086:	9a08      	ldr	r2, [sp, #32]
 8008088:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800808c:	4293      	cmp	r3, r2
 800808e:	db20      	blt.n	80080d2 <_strtod_l+0x45a>
 8008090:	4c62      	ldr	r4, [pc, #392]	; (800821c <_strtod_l+0x5a4>)
 8008092:	f1c5 050f 	rsb	r5, r5, #15
 8008096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a2:	f7f8 fac9 	bl	8000638 <__aeabi_dmul>
 80080a6:	9b08      	ldr	r3, [sp, #32]
 80080a8:	1b5d      	subs	r5, r3, r5
 80080aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080b2:	e7e3      	b.n	800807c <_strtod_l+0x404>
 80080b4:	9b08      	ldr	r3, [sp, #32]
 80080b6:	3316      	adds	r3, #22
 80080b8:	db0b      	blt.n	80080d2 <_strtod_l+0x45a>
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	4a57      	ldr	r2, [pc, #348]	; (800821c <_strtod_l+0x5a4>)
 80080be:	1b9e      	subs	r6, r3, r6
 80080c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80080c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080c8:	4650      	mov	r0, sl
 80080ca:	4659      	mov	r1, fp
 80080cc:	f7f8 fbde 	bl	800088c <__aeabi_ddiv>
 80080d0:	e7d6      	b.n	8008080 <_strtod_l+0x408>
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	eba5 0808 	sub.w	r8, r5, r8
 80080d8:	4498      	add	r8, r3
 80080da:	f1b8 0f00 	cmp.w	r8, #0
 80080de:	dd71      	ble.n	80081c4 <_strtod_l+0x54c>
 80080e0:	f018 030f 	ands.w	r3, r8, #15
 80080e4:	d00a      	beq.n	80080fc <_strtod_l+0x484>
 80080e6:	494d      	ldr	r1, [pc, #308]	; (800821c <_strtod_l+0x5a4>)
 80080e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080ec:	4652      	mov	r2, sl
 80080ee:	465b      	mov	r3, fp
 80080f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f4:	f7f8 faa0 	bl	8000638 <__aeabi_dmul>
 80080f8:	4682      	mov	sl, r0
 80080fa:	468b      	mov	fp, r1
 80080fc:	f038 080f 	bics.w	r8, r8, #15
 8008100:	d04d      	beq.n	800819e <_strtod_l+0x526>
 8008102:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008106:	dd22      	ble.n	800814e <_strtod_l+0x4d6>
 8008108:	2500      	movs	r5, #0
 800810a:	462e      	mov	r6, r5
 800810c:	9509      	str	r5, [sp, #36]	; 0x24
 800810e:	9507      	str	r5, [sp, #28]
 8008110:	2322      	movs	r3, #34	; 0x22
 8008112:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008224 <_strtod_l+0x5ac>
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	f04f 0a00 	mov.w	sl, #0
 800811c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	f43f adec 	beq.w	8007cfc <_strtod_l+0x84>
 8008124:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008126:	4620      	mov	r0, r4
 8008128:	f001 fe92 	bl	8009e50 <_Bfree>
 800812c:	9907      	ldr	r1, [sp, #28]
 800812e:	4620      	mov	r0, r4
 8008130:	f001 fe8e 	bl	8009e50 <_Bfree>
 8008134:	4631      	mov	r1, r6
 8008136:	4620      	mov	r0, r4
 8008138:	f001 fe8a 	bl	8009e50 <_Bfree>
 800813c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800813e:	4620      	mov	r0, r4
 8008140:	f001 fe86 	bl	8009e50 <_Bfree>
 8008144:	4629      	mov	r1, r5
 8008146:	4620      	mov	r0, r4
 8008148:	f001 fe82 	bl	8009e50 <_Bfree>
 800814c:	e5d6      	b.n	8007cfc <_strtod_l+0x84>
 800814e:	2300      	movs	r3, #0
 8008150:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008154:	4650      	mov	r0, sl
 8008156:	4659      	mov	r1, fp
 8008158:	4699      	mov	r9, r3
 800815a:	f1b8 0f01 	cmp.w	r8, #1
 800815e:	dc21      	bgt.n	80081a4 <_strtod_l+0x52c>
 8008160:	b10b      	cbz	r3, 8008166 <_strtod_l+0x4ee>
 8008162:	4682      	mov	sl, r0
 8008164:	468b      	mov	fp, r1
 8008166:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <_strtod_l+0x5a8>)
 8008168:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800816c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008170:	4652      	mov	r2, sl
 8008172:	465b      	mov	r3, fp
 8008174:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	4b29      	ldr	r3, [pc, #164]	; (8008224 <_strtod_l+0x5ac>)
 800817e:	460a      	mov	r2, r1
 8008180:	400b      	ands	r3, r1
 8008182:	4929      	ldr	r1, [pc, #164]	; (8008228 <_strtod_l+0x5b0>)
 8008184:	428b      	cmp	r3, r1
 8008186:	4682      	mov	sl, r0
 8008188:	d8be      	bhi.n	8008108 <_strtod_l+0x490>
 800818a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800818e:	428b      	cmp	r3, r1
 8008190:	bf86      	itte	hi
 8008192:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800822c <_strtod_l+0x5b4>
 8008196:	f04f 3aff 	movhi.w	sl, #4294967295
 800819a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800819e:	2300      	movs	r3, #0
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	e081      	b.n	80082a8 <_strtod_l+0x630>
 80081a4:	f018 0f01 	tst.w	r8, #1
 80081a8:	d007      	beq.n	80081ba <_strtod_l+0x542>
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <_strtod_l+0x5a8>)
 80081ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 fa40 	bl	8000638 <__aeabi_dmul>
 80081b8:	2301      	movs	r3, #1
 80081ba:	f109 0901 	add.w	r9, r9, #1
 80081be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081c2:	e7ca      	b.n	800815a <_strtod_l+0x4e2>
 80081c4:	d0eb      	beq.n	800819e <_strtod_l+0x526>
 80081c6:	f1c8 0800 	rsb	r8, r8, #0
 80081ca:	f018 020f 	ands.w	r2, r8, #15
 80081ce:	d00a      	beq.n	80081e6 <_strtod_l+0x56e>
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <_strtod_l+0x5a4>)
 80081d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081d6:	4650      	mov	r0, sl
 80081d8:	4659      	mov	r1, fp
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 fb55 	bl	800088c <__aeabi_ddiv>
 80081e2:	4682      	mov	sl, r0
 80081e4:	468b      	mov	fp, r1
 80081e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081ea:	d0d8      	beq.n	800819e <_strtod_l+0x526>
 80081ec:	f1b8 0f1f 	cmp.w	r8, #31
 80081f0:	dd1e      	ble.n	8008230 <_strtod_l+0x5b8>
 80081f2:	2500      	movs	r5, #0
 80081f4:	462e      	mov	r6, r5
 80081f6:	9509      	str	r5, [sp, #36]	; 0x24
 80081f8:	9507      	str	r5, [sp, #28]
 80081fa:	2322      	movs	r3, #34	; 0x22
 80081fc:	f04f 0a00 	mov.w	sl, #0
 8008200:	f04f 0b00 	mov.w	fp, #0
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	e789      	b.n	800811c <_strtod_l+0x4a4>
 8008208:	0800b7c1 	.word	0x0800b7c1
 800820c:	0800b804 	.word	0x0800b804
 8008210:	0800b7b9 	.word	0x0800b7b9
 8008214:	0800b944 	.word	0x0800b944
 8008218:	0800bc00 	.word	0x0800bc00
 800821c:	0800bae0 	.word	0x0800bae0
 8008220:	0800bab8 	.word	0x0800bab8
 8008224:	7ff00000 	.word	0x7ff00000
 8008228:	7ca00000 	.word	0x7ca00000
 800822c:	7fefffff 	.word	0x7fefffff
 8008230:	f018 0310 	ands.w	r3, r8, #16
 8008234:	bf18      	it	ne
 8008236:	236a      	movne	r3, #106	; 0x6a
 8008238:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80085f0 <_strtod_l+0x978>
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	4650      	mov	r0, sl
 8008240:	4659      	mov	r1, fp
 8008242:	2300      	movs	r3, #0
 8008244:	f018 0f01 	tst.w	r8, #1
 8008248:	d004      	beq.n	8008254 <_strtod_l+0x5dc>
 800824a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800824e:	f7f8 f9f3 	bl	8000638 <__aeabi_dmul>
 8008252:	2301      	movs	r3, #1
 8008254:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008258:	f109 0908 	add.w	r9, r9, #8
 800825c:	d1f2      	bne.n	8008244 <_strtod_l+0x5cc>
 800825e:	b10b      	cbz	r3, 8008264 <_strtod_l+0x5ec>
 8008260:	4682      	mov	sl, r0
 8008262:	468b      	mov	fp, r1
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	b1bb      	cbz	r3, 8008298 <_strtod_l+0x620>
 8008268:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800826c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008270:	2b00      	cmp	r3, #0
 8008272:	4659      	mov	r1, fp
 8008274:	dd10      	ble.n	8008298 <_strtod_l+0x620>
 8008276:	2b1f      	cmp	r3, #31
 8008278:	f340 8128 	ble.w	80084cc <_strtod_l+0x854>
 800827c:	2b34      	cmp	r3, #52	; 0x34
 800827e:	bfde      	ittt	le
 8008280:	3b20      	suble	r3, #32
 8008282:	f04f 32ff 	movle.w	r2, #4294967295
 8008286:	fa02 f303 	lslle.w	r3, r2, r3
 800828a:	f04f 0a00 	mov.w	sl, #0
 800828e:	bfcc      	ite	gt
 8008290:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008294:	ea03 0b01 	andle.w	fp, r3, r1
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4650      	mov	r0, sl
 800829e:	4659      	mov	r1, fp
 80082a0:	f7f8 fc32 	bl	8000b08 <__aeabi_dcmpeq>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1a4      	bne.n	80081f2 <_strtod_l+0x57a>
 80082a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082ae:	462b      	mov	r3, r5
 80082b0:	463a      	mov	r2, r7
 80082b2:	4620      	mov	r0, r4
 80082b4:	f001 fe38 	bl	8009f28 <__s2b>
 80082b8:	9009      	str	r0, [sp, #36]	; 0x24
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f43f af24 	beq.w	8008108 <_strtod_l+0x490>
 80082c0:	9b07      	ldr	r3, [sp, #28]
 80082c2:	1b9e      	subs	r6, r3, r6
 80082c4:	9b08      	ldr	r3, [sp, #32]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bfb4      	ite	lt
 80082ca:	4633      	movlt	r3, r6
 80082cc:	2300      	movge	r3, #0
 80082ce:	9310      	str	r3, [sp, #64]	; 0x40
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	2500      	movs	r5, #0
 80082d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80082d8:	9318      	str	r3, [sp, #96]	; 0x60
 80082da:	462e      	mov	r6, r5
 80082dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082de:	4620      	mov	r0, r4
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	f001 fd75 	bl	8009dd0 <_Balloc>
 80082e6:	9007      	str	r0, [sp, #28]
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f43f af11 	beq.w	8008110 <_strtod_l+0x498>
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	3202      	adds	r2, #2
 80082f4:	f103 010c 	add.w	r1, r3, #12
 80082f8:	0092      	lsls	r2, r2, #2
 80082fa:	300c      	adds	r0, #12
 80082fc:	f001 fd5a 	bl	8009db4 <memcpy>
 8008300:	ec4b ab10 	vmov	d0, sl, fp
 8008304:	aa20      	add	r2, sp, #128	; 0x80
 8008306:	a91f      	add	r1, sp, #124	; 0x7c
 8008308:	4620      	mov	r0, r4
 800830a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800830e:	f002 f947 	bl	800a5a0 <__d2b>
 8008312:	901e      	str	r0, [sp, #120]	; 0x78
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f aefb 	beq.w	8008110 <_strtod_l+0x498>
 800831a:	2101      	movs	r1, #1
 800831c:	4620      	mov	r0, r4
 800831e:	f001 fe9d 	bl	800a05c <__i2b>
 8008322:	4606      	mov	r6, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f aef3 	beq.w	8008110 <_strtod_l+0x498>
 800832a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800832c:	9904      	ldr	r1, [sp, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfab      	itete	ge
 8008332:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008334:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008336:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008338:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800833c:	bfac      	ite	ge
 800833e:	eb03 0902 	addge.w	r9, r3, r2
 8008342:	1ad7      	sublt	r7, r2, r3
 8008344:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008346:	eba3 0801 	sub.w	r8, r3, r1
 800834a:	4490      	add	r8, r2
 800834c:	4ba3      	ldr	r3, [pc, #652]	; (80085dc <_strtod_l+0x964>)
 800834e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008352:	4598      	cmp	r8, r3
 8008354:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008358:	f280 80cc 	bge.w	80084f4 <_strtod_l+0x87c>
 800835c:	eba3 0308 	sub.w	r3, r3, r8
 8008360:	2b1f      	cmp	r3, #31
 8008362:	eba2 0203 	sub.w	r2, r2, r3
 8008366:	f04f 0101 	mov.w	r1, #1
 800836a:	f300 80b6 	bgt.w	80084da <_strtod_l+0x862>
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	9311      	str	r3, [sp, #68]	; 0x44
 8008374:	2300      	movs	r3, #0
 8008376:	930c      	str	r3, [sp, #48]	; 0x30
 8008378:	eb09 0802 	add.w	r8, r9, r2
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	45c1      	cmp	r9, r8
 8008380:	4417      	add	r7, r2
 8008382:	441f      	add	r7, r3
 8008384:	464b      	mov	r3, r9
 8008386:	bfa8      	it	ge
 8008388:	4643      	movge	r3, r8
 800838a:	42bb      	cmp	r3, r7
 800838c:	bfa8      	it	ge
 800838e:	463b      	movge	r3, r7
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfc2      	ittt	gt
 8008394:	eba8 0803 	subgt.w	r8, r8, r3
 8008398:	1aff      	subgt	r7, r7, r3
 800839a:	eba9 0903 	subgt.w	r9, r9, r3
 800839e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dd17      	ble.n	80083d4 <_strtod_l+0x75c>
 80083a4:	4631      	mov	r1, r6
 80083a6:	461a      	mov	r2, r3
 80083a8:	4620      	mov	r0, r4
 80083aa:	f001 ff13 	bl	800a1d4 <__pow5mult>
 80083ae:	4606      	mov	r6, r0
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f43f aead 	beq.w	8008110 <_strtod_l+0x498>
 80083b6:	4601      	mov	r1, r0
 80083b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083ba:	4620      	mov	r0, r4
 80083bc:	f001 fe64 	bl	800a088 <__multiply>
 80083c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f43f aea4 	beq.w	8008110 <_strtod_l+0x498>
 80083c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80083ca:	4620      	mov	r0, r4
 80083cc:	f001 fd40 	bl	8009e50 <_Bfree>
 80083d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d2:	931e      	str	r3, [sp, #120]	; 0x78
 80083d4:	f1b8 0f00 	cmp.w	r8, #0
 80083d8:	f300 8091 	bgt.w	80084fe <_strtod_l+0x886>
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd08      	ble.n	80083f4 <_strtod_l+0x77c>
 80083e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083e4:	9907      	ldr	r1, [sp, #28]
 80083e6:	4620      	mov	r0, r4
 80083e8:	f001 fef4 	bl	800a1d4 <__pow5mult>
 80083ec:	9007      	str	r0, [sp, #28]
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f43f ae8e 	beq.w	8008110 <_strtod_l+0x498>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	dd08      	ble.n	800840a <_strtod_l+0x792>
 80083f8:	9907      	ldr	r1, [sp, #28]
 80083fa:	463a      	mov	r2, r7
 80083fc:	4620      	mov	r0, r4
 80083fe:	f001 ff43 	bl	800a288 <__lshift>
 8008402:	9007      	str	r0, [sp, #28]
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f ae83 	beq.w	8008110 <_strtod_l+0x498>
 800840a:	f1b9 0f00 	cmp.w	r9, #0
 800840e:	dd08      	ble.n	8008422 <_strtod_l+0x7aa>
 8008410:	4631      	mov	r1, r6
 8008412:	464a      	mov	r2, r9
 8008414:	4620      	mov	r0, r4
 8008416:	f001 ff37 	bl	800a288 <__lshift>
 800841a:	4606      	mov	r6, r0
 800841c:	2800      	cmp	r0, #0
 800841e:	f43f ae77 	beq.w	8008110 <_strtod_l+0x498>
 8008422:	9a07      	ldr	r2, [sp, #28]
 8008424:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008426:	4620      	mov	r0, r4
 8008428:	f001 ffb6 	bl	800a398 <__mdiff>
 800842c:	4605      	mov	r5, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	f43f ae6e 	beq.w	8008110 <_strtod_l+0x498>
 8008434:	68c3      	ldr	r3, [r0, #12]
 8008436:	930f      	str	r3, [sp, #60]	; 0x3c
 8008438:	2300      	movs	r3, #0
 800843a:	60c3      	str	r3, [r0, #12]
 800843c:	4631      	mov	r1, r6
 800843e:	f001 ff8f 	bl	800a360 <__mcmp>
 8008442:	2800      	cmp	r0, #0
 8008444:	da65      	bge.n	8008512 <_strtod_l+0x89a>
 8008446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008448:	ea53 030a 	orrs.w	r3, r3, sl
 800844c:	f040 8087 	bne.w	800855e <_strtod_l+0x8e6>
 8008450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 8082 	bne.w	800855e <_strtod_l+0x8e6>
 800845a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800845e:	0d1b      	lsrs	r3, r3, #20
 8008460:	051b      	lsls	r3, r3, #20
 8008462:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008466:	d97a      	bls.n	800855e <_strtod_l+0x8e6>
 8008468:	696b      	ldr	r3, [r5, #20]
 800846a:	b913      	cbnz	r3, 8008472 <_strtod_l+0x7fa>
 800846c:	692b      	ldr	r3, [r5, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	dd75      	ble.n	800855e <_strtod_l+0x8e6>
 8008472:	4629      	mov	r1, r5
 8008474:	2201      	movs	r2, #1
 8008476:	4620      	mov	r0, r4
 8008478:	f001 ff06 	bl	800a288 <__lshift>
 800847c:	4631      	mov	r1, r6
 800847e:	4605      	mov	r5, r0
 8008480:	f001 ff6e 	bl	800a360 <__mcmp>
 8008484:	2800      	cmp	r0, #0
 8008486:	dd6a      	ble.n	800855e <_strtod_l+0x8e6>
 8008488:	9904      	ldr	r1, [sp, #16]
 800848a:	4a55      	ldr	r2, [pc, #340]	; (80085e0 <_strtod_l+0x968>)
 800848c:	465b      	mov	r3, fp
 800848e:	2900      	cmp	r1, #0
 8008490:	f000 8085 	beq.w	800859e <_strtod_l+0x926>
 8008494:	ea02 010b 	and.w	r1, r2, fp
 8008498:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800849c:	dc7f      	bgt.n	800859e <_strtod_l+0x926>
 800849e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084a2:	f77f aeaa 	ble.w	80081fa <_strtod_l+0x582>
 80084a6:	4a4f      	ldr	r2, [pc, #316]	; (80085e4 <_strtod_l+0x96c>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80084ae:	4650      	mov	r0, sl
 80084b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80084b4:	4659      	mov	r1, fp
 80084b6:	f7f8 f8bf 	bl	8000638 <__aeabi_dmul>
 80084ba:	460b      	mov	r3, r1
 80084bc:	4303      	orrs	r3, r0
 80084be:	bf08      	it	eq
 80084c0:	2322      	moveq	r3, #34	; 0x22
 80084c2:	4682      	mov	sl, r0
 80084c4:	468b      	mov	fp, r1
 80084c6:	bf08      	it	eq
 80084c8:	6023      	streq	r3, [r4, #0]
 80084ca:	e62b      	b.n	8008124 <_strtod_l+0x4ac>
 80084cc:	f04f 32ff 	mov.w	r2, #4294967295
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	ea03 0a0a 	and.w	sl, r3, sl
 80084d8:	e6de      	b.n	8008298 <_strtod_l+0x620>
 80084da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80084de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80084e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80084e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80084ea:	fa01 f308 	lsl.w	r3, r1, r8
 80084ee:	930c      	str	r3, [sp, #48]	; 0x30
 80084f0:	9111      	str	r1, [sp, #68]	; 0x44
 80084f2:	e741      	b.n	8008378 <_strtod_l+0x700>
 80084f4:	2300      	movs	r3, #0
 80084f6:	930c      	str	r3, [sp, #48]	; 0x30
 80084f8:	2301      	movs	r3, #1
 80084fa:	9311      	str	r3, [sp, #68]	; 0x44
 80084fc:	e73c      	b.n	8008378 <_strtod_l+0x700>
 80084fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008500:	4642      	mov	r2, r8
 8008502:	4620      	mov	r0, r4
 8008504:	f001 fec0 	bl	800a288 <__lshift>
 8008508:	901e      	str	r0, [sp, #120]	; 0x78
 800850a:	2800      	cmp	r0, #0
 800850c:	f47f af66 	bne.w	80083dc <_strtod_l+0x764>
 8008510:	e5fe      	b.n	8008110 <_strtod_l+0x498>
 8008512:	465f      	mov	r7, fp
 8008514:	d16e      	bne.n	80085f4 <_strtod_l+0x97c>
 8008516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800851c:	b342      	cbz	r2, 8008570 <_strtod_l+0x8f8>
 800851e:	4a32      	ldr	r2, [pc, #200]	; (80085e8 <_strtod_l+0x970>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d128      	bne.n	8008576 <_strtod_l+0x8fe>
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4650      	mov	r0, sl
 8008528:	b1eb      	cbz	r3, 8008566 <_strtod_l+0x8ee>
 800852a:	4a2d      	ldr	r2, [pc, #180]	; (80085e0 <_strtod_l+0x968>)
 800852c:	403a      	ands	r2, r7
 800852e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008532:	f04f 31ff 	mov.w	r1, #4294967295
 8008536:	d819      	bhi.n	800856c <_strtod_l+0x8f4>
 8008538:	0d12      	lsrs	r2, r2, #20
 800853a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800853e:	fa01 f303 	lsl.w	r3, r1, r3
 8008542:	4298      	cmp	r0, r3
 8008544:	d117      	bne.n	8008576 <_strtod_l+0x8fe>
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <_strtod_l+0x974>)
 8008548:	429f      	cmp	r7, r3
 800854a:	d102      	bne.n	8008552 <_strtod_l+0x8da>
 800854c:	3001      	adds	r0, #1
 800854e:	f43f addf 	beq.w	8008110 <_strtod_l+0x498>
 8008552:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <_strtod_l+0x968>)
 8008554:	403b      	ands	r3, r7
 8008556:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800855a:	f04f 0a00 	mov.w	sl, #0
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1a0      	bne.n	80084a6 <_strtod_l+0x82e>
 8008564:	e5de      	b.n	8008124 <_strtod_l+0x4ac>
 8008566:	f04f 33ff 	mov.w	r3, #4294967295
 800856a:	e7ea      	b.n	8008542 <_strtod_l+0x8ca>
 800856c:	460b      	mov	r3, r1
 800856e:	e7e8      	b.n	8008542 <_strtod_l+0x8ca>
 8008570:	ea53 030a 	orrs.w	r3, r3, sl
 8008574:	d088      	beq.n	8008488 <_strtod_l+0x810>
 8008576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008578:	b1db      	cbz	r3, 80085b2 <_strtod_l+0x93a>
 800857a:	423b      	tst	r3, r7
 800857c:	d0ef      	beq.n	800855e <_strtod_l+0x8e6>
 800857e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008580:	9a04      	ldr	r2, [sp, #16]
 8008582:	4650      	mov	r0, sl
 8008584:	4659      	mov	r1, fp
 8008586:	b1c3      	cbz	r3, 80085ba <_strtod_l+0x942>
 8008588:	f7ff fb5a 	bl	8007c40 <sulp>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008594:	f7f7 fe9a 	bl	80002cc <__adddf3>
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	e7df      	b.n	800855e <_strtod_l+0x8e6>
 800859e:	4013      	ands	r3, r2
 80085a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085ac:	f04f 3aff 	mov.w	sl, #4294967295
 80085b0:	e7d5      	b.n	800855e <_strtod_l+0x8e6>
 80085b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b4:	ea13 0f0a 	tst.w	r3, sl
 80085b8:	e7e0      	b.n	800857c <_strtod_l+0x904>
 80085ba:	f7ff fb41 	bl	8007c40 <sulp>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c6:	f7f7 fe7f 	bl	80002c8 <__aeabi_dsub>
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	4682      	mov	sl, r0
 80085d0:	468b      	mov	fp, r1
 80085d2:	f7f8 fa99 	bl	8000b08 <__aeabi_dcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0c1      	beq.n	800855e <_strtod_l+0x8e6>
 80085da:	e60e      	b.n	80081fa <_strtod_l+0x582>
 80085dc:	fffffc02 	.word	0xfffffc02
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	39500000 	.word	0x39500000
 80085e8:	000fffff 	.word	0x000fffff
 80085ec:	7fefffff 	.word	0x7fefffff
 80085f0:	0800b818 	.word	0x0800b818
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	f002 f82e 	bl	800a658 <__ratio>
 80085fc:	ec59 8b10 	vmov	r8, r9, d0
 8008600:	ee10 0a10 	vmov	r0, s0
 8008604:	2200      	movs	r2, #0
 8008606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800860a:	4649      	mov	r1, r9
 800860c:	f7f8 fa90 	bl	8000b30 <__aeabi_dcmple>
 8008610:	2800      	cmp	r0, #0
 8008612:	d07c      	beq.n	800870e <_strtod_l+0xa96>
 8008614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04c      	beq.n	80086b4 <_strtod_l+0xa3c>
 800861a:	4b95      	ldr	r3, [pc, #596]	; (8008870 <_strtod_l+0xbf8>)
 800861c:	2200      	movs	r2, #0
 800861e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008622:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008870 <_strtod_l+0xbf8>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	4b92      	ldr	r3, [pc, #584]	; (8008874 <_strtod_l+0xbfc>)
 800862c:	403b      	ands	r3, r7
 800862e:	9311      	str	r3, [sp, #68]	; 0x44
 8008630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008632:	4b91      	ldr	r3, [pc, #580]	; (8008878 <_strtod_l+0xc00>)
 8008634:	429a      	cmp	r2, r3
 8008636:	f040 80b2 	bne.w	800879e <_strtod_l+0xb26>
 800863a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800863e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008642:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008646:	ec4b ab10 	vmov	d0, sl, fp
 800864a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800864e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008652:	f001 ff29 	bl	800a4a8 <__ulp>
 8008656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800865a:	ec53 2b10 	vmov	r2, r3, d0
 800865e:	f7f7 ffeb 	bl	8000638 <__aeabi_dmul>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f7 fe31 	bl	80002cc <__adddf3>
 800866a:	460b      	mov	r3, r1
 800866c:	4981      	ldr	r1, [pc, #516]	; (8008874 <_strtod_l+0xbfc>)
 800866e:	4a83      	ldr	r2, [pc, #524]	; (800887c <_strtod_l+0xc04>)
 8008670:	4019      	ands	r1, r3
 8008672:	4291      	cmp	r1, r2
 8008674:	4682      	mov	sl, r0
 8008676:	d95e      	bls.n	8008736 <_strtod_l+0xabe>
 8008678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800867a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800867e:	4293      	cmp	r3, r2
 8008680:	d103      	bne.n	800868a <_strtod_l+0xa12>
 8008682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008684:	3301      	adds	r3, #1
 8008686:	f43f ad43 	beq.w	8008110 <_strtod_l+0x498>
 800868a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008888 <_strtod_l+0xc10>
 800868e:	f04f 3aff 	mov.w	sl, #4294967295
 8008692:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008694:	4620      	mov	r0, r4
 8008696:	f001 fbdb 	bl	8009e50 <_Bfree>
 800869a:	9907      	ldr	r1, [sp, #28]
 800869c:	4620      	mov	r0, r4
 800869e:	f001 fbd7 	bl	8009e50 <_Bfree>
 80086a2:	4631      	mov	r1, r6
 80086a4:	4620      	mov	r0, r4
 80086a6:	f001 fbd3 	bl	8009e50 <_Bfree>
 80086aa:	4629      	mov	r1, r5
 80086ac:	4620      	mov	r0, r4
 80086ae:	f001 fbcf 	bl	8009e50 <_Bfree>
 80086b2:	e613      	b.n	80082dc <_strtod_l+0x664>
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	d11b      	bne.n	80086f2 <_strtod_l+0xa7a>
 80086ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086be:	b9f3      	cbnz	r3, 80086fe <_strtod_l+0xa86>
 80086c0:	4b6b      	ldr	r3, [pc, #428]	; (8008870 <_strtod_l+0xbf8>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	4640      	mov	r0, r8
 80086c6:	4649      	mov	r1, r9
 80086c8:	f7f8 fa28 	bl	8000b1c <__aeabi_dcmplt>
 80086cc:	b9d0      	cbnz	r0, 8008704 <_strtod_l+0xa8c>
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	4b6b      	ldr	r3, [pc, #428]	; (8008880 <_strtod_l+0xc08>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	f7f7 ffaf 	bl	8000638 <__aeabi_dmul>
 80086da:	4680      	mov	r8, r0
 80086dc:	4689      	mov	r9, r1
 80086de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80086e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80086e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80086ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80086f0:	e79b      	b.n	800862a <_strtod_l+0x9b2>
 80086f2:	f1ba 0f01 	cmp.w	sl, #1
 80086f6:	d102      	bne.n	80086fe <_strtod_l+0xa86>
 80086f8:	2f00      	cmp	r7, #0
 80086fa:	f43f ad7e 	beq.w	80081fa <_strtod_l+0x582>
 80086fe:	4b61      	ldr	r3, [pc, #388]	; (8008884 <_strtod_l+0xc0c>)
 8008700:	2200      	movs	r2, #0
 8008702:	e78c      	b.n	800861e <_strtod_l+0x9a6>
 8008704:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008880 <_strtod_l+0xc08>
 8008708:	f04f 0800 	mov.w	r8, #0
 800870c:	e7e7      	b.n	80086de <_strtod_l+0xa66>
 800870e:	4b5c      	ldr	r3, [pc, #368]	; (8008880 <_strtod_l+0xc08>)
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	2200      	movs	r2, #0
 8008716:	f7f7 ff8f 	bl	8000638 <__aeabi_dmul>
 800871a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800871c:	4680      	mov	r8, r0
 800871e:	4689      	mov	r9, r1
 8008720:	b933      	cbnz	r3, 8008730 <_strtod_l+0xab8>
 8008722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008726:	9012      	str	r0, [sp, #72]	; 0x48
 8008728:	9313      	str	r3, [sp, #76]	; 0x4c
 800872a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800872e:	e7dd      	b.n	80086ec <_strtod_l+0xa74>
 8008730:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008734:	e7f9      	b.n	800872a <_strtod_l+0xab2>
 8008736:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1a8      	bne.n	8008692 <_strtod_l+0xa1a>
 8008740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008746:	0d1b      	lsrs	r3, r3, #20
 8008748:	051b      	lsls	r3, r3, #20
 800874a:	429a      	cmp	r2, r3
 800874c:	d1a1      	bne.n	8008692 <_strtod_l+0xa1a>
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 fad1 	bl	8000cf8 <__aeabi_d2lz>
 8008756:	f7f7 ff41 	bl	80005dc <__aeabi_l2d>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f7 fdb1 	bl	80002c8 <__aeabi_dsub>
 8008766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008768:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800876c:	ea43 030a 	orr.w	r3, r3, sl
 8008770:	4313      	orrs	r3, r2
 8008772:	4680      	mov	r8, r0
 8008774:	4689      	mov	r9, r1
 8008776:	d053      	beq.n	8008820 <_strtod_l+0xba8>
 8008778:	a335      	add	r3, pc, #212	; (adr r3, 8008850 <_strtod_l+0xbd8>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f8 f9cd 	bl	8000b1c <__aeabi_dcmplt>
 8008782:	2800      	cmp	r0, #0
 8008784:	f47f acce 	bne.w	8008124 <_strtod_l+0x4ac>
 8008788:	a333      	add	r3, pc, #204	; (adr r3, 8008858 <_strtod_l+0xbe0>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f8 f9e1 	bl	8000b58 <__aeabi_dcmpgt>
 8008796:	2800      	cmp	r0, #0
 8008798:	f43f af7b 	beq.w	8008692 <_strtod_l+0xa1a>
 800879c:	e4c2      	b.n	8008124 <_strtod_l+0x4ac>
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	b333      	cbz	r3, 80087f0 <_strtod_l+0xb78>
 80087a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087a8:	d822      	bhi.n	80087f0 <_strtod_l+0xb78>
 80087aa:	a32d      	add	r3, pc, #180	; (adr r3, 8008860 <_strtod_l+0xbe8>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	f7f8 f9bc 	bl	8000b30 <__aeabi_dcmple>
 80087b8:	b1a0      	cbz	r0, 80087e4 <_strtod_l+0xb6c>
 80087ba:	4649      	mov	r1, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	f7f8 fa13 	bl	8000be8 <__aeabi_d2uiz>
 80087c2:	2801      	cmp	r0, #1
 80087c4:	bf38      	it	cc
 80087c6:	2001      	movcc	r0, #1
 80087c8:	f7f7 febc 	bl	8000544 <__aeabi_ui2d>
 80087cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ce:	4680      	mov	r8, r0
 80087d0:	4689      	mov	r9, r1
 80087d2:	bb13      	cbnz	r3, 800881a <_strtod_l+0xba2>
 80087d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d8:	9014      	str	r0, [sp, #80]	; 0x50
 80087da:	9315      	str	r3, [sp, #84]	; 0x54
 80087dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80087e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80087ec:	1a9b      	subs	r3, r3, r2
 80087ee:	930d      	str	r3, [sp, #52]	; 0x34
 80087f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087fc:	f001 fe54 	bl	800a4a8 <__ulp>
 8008800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008804:	ec53 2b10 	vmov	r2, r3, d0
 8008808:	f7f7 ff16 	bl	8000638 <__aeabi_dmul>
 800880c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008810:	f7f7 fd5c 	bl	80002cc <__adddf3>
 8008814:	4682      	mov	sl, r0
 8008816:	468b      	mov	fp, r1
 8008818:	e78f      	b.n	800873a <_strtod_l+0xac2>
 800881a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800881e:	e7dd      	b.n	80087dc <_strtod_l+0xb64>
 8008820:	a311      	add	r3, pc, #68	; (adr r3, 8008868 <_strtod_l+0xbf0>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f8 f979 	bl	8000b1c <__aeabi_dcmplt>
 800882a:	e7b4      	b.n	8008796 <_strtod_l+0xb1e>
 800882c:	2300      	movs	r3, #0
 800882e:	930e      	str	r3, [sp, #56]	; 0x38
 8008830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	f7ff ba65 	b.w	8007d04 <_strtod_l+0x8c>
 800883a:	2b65      	cmp	r3, #101	; 0x65
 800883c:	f43f ab5d 	beq.w	8007efa <_strtod_l+0x282>
 8008840:	2b45      	cmp	r3, #69	; 0x45
 8008842:	f43f ab5a 	beq.w	8007efa <_strtod_l+0x282>
 8008846:	2201      	movs	r2, #1
 8008848:	f7ff bb92 	b.w	8007f70 <_strtod_l+0x2f8>
 800884c:	f3af 8000 	nop.w
 8008850:	94a03595 	.word	0x94a03595
 8008854:	3fdfffff 	.word	0x3fdfffff
 8008858:	35afe535 	.word	0x35afe535
 800885c:	3fe00000 	.word	0x3fe00000
 8008860:	ffc00000 	.word	0xffc00000
 8008864:	41dfffff 	.word	0x41dfffff
 8008868:	94a03595 	.word	0x94a03595
 800886c:	3fcfffff 	.word	0x3fcfffff
 8008870:	3ff00000 	.word	0x3ff00000
 8008874:	7ff00000 	.word	0x7ff00000
 8008878:	7fe00000 	.word	0x7fe00000
 800887c:	7c9fffff 	.word	0x7c9fffff
 8008880:	3fe00000 	.word	0x3fe00000
 8008884:	bff00000 	.word	0xbff00000
 8008888:	7fefffff 	.word	0x7fefffff

0800888c <_strtod_r>:
 800888c:	4b01      	ldr	r3, [pc, #4]	; (8008894 <_strtod_r+0x8>)
 800888e:	f7ff b9f3 	b.w	8007c78 <_strtod_l>
 8008892:	bf00      	nop
 8008894:	20000074 	.word	0x20000074

08008898 <_strtol_l.isra.0>:
 8008898:	2b01      	cmp	r3, #1
 800889a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800889e:	d001      	beq.n	80088a4 <_strtol_l.isra.0+0xc>
 80088a0:	2b24      	cmp	r3, #36	; 0x24
 80088a2:	d906      	bls.n	80088b2 <_strtol_l.isra.0+0x1a>
 80088a4:	f7fe fafa 	bl	8006e9c <__errno>
 80088a8:	2316      	movs	r3, #22
 80088aa:	6003      	str	r3, [r0, #0]
 80088ac:	2000      	movs	r0, #0
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	4f3a      	ldr	r7, [pc, #232]	; (800899c <_strtol_l.isra.0+0x104>)
 80088b4:	468e      	mov	lr, r1
 80088b6:	4676      	mov	r6, lr
 80088b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80088bc:	5de5      	ldrb	r5, [r4, r7]
 80088be:	f015 0508 	ands.w	r5, r5, #8
 80088c2:	d1f8      	bne.n	80088b6 <_strtol_l.isra.0+0x1e>
 80088c4:	2c2d      	cmp	r4, #45	; 0x2d
 80088c6:	d134      	bne.n	8008932 <_strtol_l.isra.0+0x9a>
 80088c8:	f89e 4000 	ldrb.w	r4, [lr]
 80088cc:	f04f 0801 	mov.w	r8, #1
 80088d0:	f106 0e02 	add.w	lr, r6, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d05c      	beq.n	8008992 <_strtol_l.isra.0+0xfa>
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d10c      	bne.n	80088f6 <_strtol_l.isra.0+0x5e>
 80088dc:	2c30      	cmp	r4, #48	; 0x30
 80088de:	d10a      	bne.n	80088f6 <_strtol_l.isra.0+0x5e>
 80088e0:	f89e 4000 	ldrb.w	r4, [lr]
 80088e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088e8:	2c58      	cmp	r4, #88	; 0x58
 80088ea:	d14d      	bne.n	8008988 <_strtol_l.isra.0+0xf0>
 80088ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80088f0:	2310      	movs	r3, #16
 80088f2:	f10e 0e02 	add.w	lr, lr, #2
 80088f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80088fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088fe:	2600      	movs	r6, #0
 8008900:	fbbc f9f3 	udiv	r9, ip, r3
 8008904:	4635      	mov	r5, r6
 8008906:	fb03 ca19 	mls	sl, r3, r9, ip
 800890a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800890e:	2f09      	cmp	r7, #9
 8008910:	d818      	bhi.n	8008944 <_strtol_l.isra.0+0xac>
 8008912:	463c      	mov	r4, r7
 8008914:	42a3      	cmp	r3, r4
 8008916:	dd24      	ble.n	8008962 <_strtol_l.isra.0+0xca>
 8008918:	2e00      	cmp	r6, #0
 800891a:	db1f      	blt.n	800895c <_strtol_l.isra.0+0xc4>
 800891c:	45a9      	cmp	r9, r5
 800891e:	d31d      	bcc.n	800895c <_strtol_l.isra.0+0xc4>
 8008920:	d101      	bne.n	8008926 <_strtol_l.isra.0+0x8e>
 8008922:	45a2      	cmp	sl, r4
 8008924:	db1a      	blt.n	800895c <_strtol_l.isra.0+0xc4>
 8008926:	fb05 4503 	mla	r5, r5, r3, r4
 800892a:	2601      	movs	r6, #1
 800892c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008930:	e7eb      	b.n	800890a <_strtol_l.isra.0+0x72>
 8008932:	2c2b      	cmp	r4, #43	; 0x2b
 8008934:	bf08      	it	eq
 8008936:	f89e 4000 	ldrbeq.w	r4, [lr]
 800893a:	46a8      	mov	r8, r5
 800893c:	bf08      	it	eq
 800893e:	f106 0e02 	addeq.w	lr, r6, #2
 8008942:	e7c7      	b.n	80088d4 <_strtol_l.isra.0+0x3c>
 8008944:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008948:	2f19      	cmp	r7, #25
 800894a:	d801      	bhi.n	8008950 <_strtol_l.isra.0+0xb8>
 800894c:	3c37      	subs	r4, #55	; 0x37
 800894e:	e7e1      	b.n	8008914 <_strtol_l.isra.0+0x7c>
 8008950:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008954:	2f19      	cmp	r7, #25
 8008956:	d804      	bhi.n	8008962 <_strtol_l.isra.0+0xca>
 8008958:	3c57      	subs	r4, #87	; 0x57
 800895a:	e7db      	b.n	8008914 <_strtol_l.isra.0+0x7c>
 800895c:	f04f 36ff 	mov.w	r6, #4294967295
 8008960:	e7e4      	b.n	800892c <_strtol_l.isra.0+0x94>
 8008962:	2e00      	cmp	r6, #0
 8008964:	da05      	bge.n	8008972 <_strtol_l.isra.0+0xda>
 8008966:	2322      	movs	r3, #34	; 0x22
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	4665      	mov	r5, ip
 800896c:	b942      	cbnz	r2, 8008980 <_strtol_l.isra.0+0xe8>
 800896e:	4628      	mov	r0, r5
 8008970:	e79d      	b.n	80088ae <_strtol_l.isra.0+0x16>
 8008972:	f1b8 0f00 	cmp.w	r8, #0
 8008976:	d000      	beq.n	800897a <_strtol_l.isra.0+0xe2>
 8008978:	426d      	negs	r5, r5
 800897a:	2a00      	cmp	r2, #0
 800897c:	d0f7      	beq.n	800896e <_strtol_l.isra.0+0xd6>
 800897e:	b10e      	cbz	r6, 8008984 <_strtol_l.isra.0+0xec>
 8008980:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	e7f2      	b.n	800896e <_strtol_l.isra.0+0xd6>
 8008988:	2430      	movs	r4, #48	; 0x30
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1b3      	bne.n	80088f6 <_strtol_l.isra.0+0x5e>
 800898e:	2308      	movs	r3, #8
 8008990:	e7b1      	b.n	80088f6 <_strtol_l.isra.0+0x5e>
 8008992:	2c30      	cmp	r4, #48	; 0x30
 8008994:	d0a4      	beq.n	80088e0 <_strtol_l.isra.0+0x48>
 8008996:	230a      	movs	r3, #10
 8008998:	e7ad      	b.n	80088f6 <_strtol_l.isra.0+0x5e>
 800899a:	bf00      	nop
 800899c:	0800b841 	.word	0x0800b841

080089a0 <_strtol_r>:
 80089a0:	f7ff bf7a 	b.w	8008898 <_strtol_l.isra.0>

080089a4 <quorem>:
 80089a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	6903      	ldr	r3, [r0, #16]
 80089aa:	690c      	ldr	r4, [r1, #16]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	4607      	mov	r7, r0
 80089b0:	f2c0 8081 	blt.w	8008ab6 <quorem+0x112>
 80089b4:	3c01      	subs	r4, #1
 80089b6:	f101 0814 	add.w	r8, r1, #20
 80089ba:	f100 0514 	add.w	r5, r0, #20
 80089be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089cc:	3301      	adds	r3, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80089dc:	d331      	bcc.n	8008a42 <quorem+0x9e>
 80089de:	f04f 0e00 	mov.w	lr, #0
 80089e2:	4640      	mov	r0, r8
 80089e4:	46ac      	mov	ip, r5
 80089e6:	46f2      	mov	sl, lr
 80089e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ec:	b293      	uxth	r3, r2
 80089ee:	fb06 e303 	mla	r3, r6, r3, lr
 80089f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	ebaa 0303 	sub.w	r3, sl, r3
 80089fc:	0c12      	lsrs	r2, r2, #16
 80089fe:	f8dc a000 	ldr.w	sl, [ip]
 8008a02:	fb06 e202 	mla	r2, r6, r2, lr
 8008a06:	fa13 f38a 	uxtah	r3, r3, sl
 8008a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a0e:	fa1f fa82 	uxth.w	sl, r2
 8008a12:	f8dc 2000 	ldr.w	r2, [ip]
 8008a16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a24:	4581      	cmp	r9, r0
 8008a26:	f84c 3b04 	str.w	r3, [ip], #4
 8008a2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a2e:	d2db      	bcs.n	80089e8 <quorem+0x44>
 8008a30:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a34:	b92b      	cbnz	r3, 8008a42 <quorem+0x9e>
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	3b04      	subs	r3, #4
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	d32e      	bcc.n	8008a9e <quorem+0xfa>
 8008a40:	613c      	str	r4, [r7, #16]
 8008a42:	4638      	mov	r0, r7
 8008a44:	f001 fc8c 	bl	800a360 <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	db24      	blt.n	8008a96 <quorem+0xf2>
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f04f 0c00 	mov.w	ip, #0
 8008a54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a58:	f8d0 e000 	ldr.w	lr, [r0]
 8008a5c:	b293      	uxth	r3, r2
 8008a5e:	ebac 0303 	sub.w	r3, ip, r3
 8008a62:	0c12      	lsrs	r2, r2, #16
 8008a64:	fa13 f38e 	uxtah	r3, r3, lr
 8008a68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a76:	45c1      	cmp	r9, r8
 8008a78:	f840 3b04 	str.w	r3, [r0], #4
 8008a7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a80:	d2e8      	bcs.n	8008a54 <quorem+0xb0>
 8008a82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a8a:	b922      	cbnz	r2, 8008a96 <quorem+0xf2>
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	d30a      	bcc.n	8008aaa <quorem+0x106>
 8008a94:	613c      	str	r4, [r7, #16]
 8008a96:	4630      	mov	r0, r6
 8008a98:	b003      	add	sp, #12
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	3b04      	subs	r3, #4
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d1cc      	bne.n	8008a40 <quorem+0x9c>
 8008aa6:	3c01      	subs	r4, #1
 8008aa8:	e7c7      	b.n	8008a3a <quorem+0x96>
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	3b04      	subs	r3, #4
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	d1f0      	bne.n	8008a94 <quorem+0xf0>
 8008ab2:	3c01      	subs	r4, #1
 8008ab4:	e7eb      	b.n	8008a8e <quorem+0xea>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e7ee      	b.n	8008a98 <quorem+0xf4>
 8008aba:	0000      	movs	r0, r0
 8008abc:	0000      	movs	r0, r0
	...

08008ac0 <_dtoa_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b02 	vpush	{d8}
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	b095      	sub	sp, #84	; 0x54
 8008ace:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ad0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008ada:	4604      	mov	r4, r0
 8008adc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae0:	b975      	cbnz	r5, 8008b00 <_dtoa_r+0x40>
 8008ae2:	2010      	movs	r0, #16
 8008ae4:	f001 f94c 	bl	8009d80 <malloc>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6260      	str	r0, [r4, #36]	; 0x24
 8008aec:	b920      	cbnz	r0, 8008af8 <_dtoa_r+0x38>
 8008aee:	4bb2      	ldr	r3, [pc, #712]	; (8008db8 <_dtoa_r+0x2f8>)
 8008af0:	21ea      	movs	r1, #234	; 0xea
 8008af2:	48b2      	ldr	r0, [pc, #712]	; (8008dbc <_dtoa_r+0x2fc>)
 8008af4:	f002 f874 	bl	800abe0 <__assert_func>
 8008af8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008afc:	6005      	str	r5, [r0, #0]
 8008afe:	60c5      	str	r5, [r0, #12]
 8008b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	b151      	cbz	r1, 8008b1c <_dtoa_r+0x5c>
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	604a      	str	r2, [r1, #4]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4093      	lsls	r3, r2
 8008b0e:	608b      	str	r3, [r1, #8]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f001 f99d 	bl	8009e50 <_Bfree>
 8008b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	1e3b      	subs	r3, r7, #0
 8008b1e:	bfb9      	ittee	lt
 8008b20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b24:	9303      	strlt	r3, [sp, #12]
 8008b26:	2300      	movge	r3, #0
 8008b28:	f8c8 3000 	strge.w	r3, [r8]
 8008b2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b30:	4ba3      	ldr	r3, [pc, #652]	; (8008dc0 <_dtoa_r+0x300>)
 8008b32:	bfbc      	itt	lt
 8008b34:	2201      	movlt	r2, #1
 8008b36:	f8c8 2000 	strlt.w	r2, [r8]
 8008b3a:	ea33 0309 	bics.w	r3, r3, r9
 8008b3e:	d11b      	bne.n	8008b78 <_dtoa_r+0xb8>
 8008b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b4c:	4333      	orrs	r3, r6
 8008b4e:	f000 857a 	beq.w	8009646 <_dtoa_r+0xb86>
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	b963      	cbnz	r3, 8008b70 <_dtoa_r+0xb0>
 8008b56:	4b9b      	ldr	r3, [pc, #620]	; (8008dc4 <_dtoa_r+0x304>)
 8008b58:	e024      	b.n	8008ba4 <_dtoa_r+0xe4>
 8008b5a:	4b9b      	ldr	r3, [pc, #620]	; (8008dc8 <_dtoa_r+0x308>)
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	9800      	ldr	r0, [sp, #0]
 8008b66:	b015      	add	sp, #84	; 0x54
 8008b68:	ecbd 8b02 	vpop	{d8}
 8008b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b70:	4b94      	ldr	r3, [pc, #592]	; (8008dc4 <_dtoa_r+0x304>)
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	3303      	adds	r3, #3
 8008b76:	e7f3      	b.n	8008b60 <_dtoa_r+0xa0>
 8008b78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	ec51 0b17 	vmov	r0, r1, d7
 8008b82:	2300      	movs	r3, #0
 8008b84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b88:	f7f7 ffbe 	bl	8000b08 <__aeabi_dcmpeq>
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	b158      	cbz	r0, 8008ba8 <_dtoa_r+0xe8>
 8008b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b92:	2301      	movs	r3, #1
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 8551 	beq.w	8009640 <_dtoa_r+0xb80>
 8008b9e:	488b      	ldr	r0, [pc, #556]	; (8008dcc <_dtoa_r+0x30c>)
 8008ba0:	6018      	str	r0, [r3, #0]
 8008ba2:	1e43      	subs	r3, r0, #1
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	e7dd      	b.n	8008b64 <_dtoa_r+0xa4>
 8008ba8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bac:	aa12      	add	r2, sp, #72	; 0x48
 8008bae:	a913      	add	r1, sp, #76	; 0x4c
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f001 fcf5 	bl	800a5a0 <__d2b>
 8008bb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bba:	4683      	mov	fp, r0
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	d07c      	beq.n	8008cba <_dtoa_r+0x1fa>
 8008bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008bce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bda:	4b7d      	ldr	r3, [pc, #500]	; (8008dd0 <_dtoa_r+0x310>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4630      	mov	r0, r6
 8008be0:	4639      	mov	r1, r7
 8008be2:	f7f7 fb71 	bl	80002c8 <__aeabi_dsub>
 8008be6:	a36e      	add	r3, pc, #440	; (adr r3, 8008da0 <_dtoa_r+0x2e0>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f7f7 fd24 	bl	8000638 <__aeabi_dmul>
 8008bf0:	a36d      	add	r3, pc, #436	; (adr r3, 8008da8 <_dtoa_r+0x2e8>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb69 	bl	80002cc <__adddf3>
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	460f      	mov	r7, r1
 8008c00:	f7f7 fcb0 	bl	8000564 <__aeabi_i2d>
 8008c04:	a36a      	add	r3, pc, #424	; (adr r3, 8008db0 <_dtoa_r+0x2f0>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fd15 	bl	8000638 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fb59 	bl	80002cc <__adddf3>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	f7f7 ffbb 	bl	8000b98 <__aeabi_d2iz>
 8008c22:	2200      	movs	r2, #0
 8008c24:	4682      	mov	sl, r0
 8008c26:	2300      	movs	r3, #0
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 ff76 	bl	8000b1c <__aeabi_dcmplt>
 8008c30:	b148      	cbz	r0, 8008c46 <_dtoa_r+0x186>
 8008c32:	4650      	mov	r0, sl
 8008c34:	f7f7 fc96 	bl	8000564 <__aeabi_i2d>
 8008c38:	4632      	mov	r2, r6
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	f7f7 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8008c40:	b908      	cbnz	r0, 8008c46 <_dtoa_r+0x186>
 8008c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c46:	f1ba 0f16 	cmp.w	sl, #22
 8008c4a:	d854      	bhi.n	8008cf6 <_dtoa_r+0x236>
 8008c4c:	4b61      	ldr	r3, [pc, #388]	; (8008dd4 <_dtoa_r+0x314>)
 8008c4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c5a:	f7f7 ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d04b      	beq.n	8008cfa <_dtoa_r+0x23a>
 8008c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c66:	2300      	movs	r3, #0
 8008c68:	930e      	str	r3, [sp, #56]	; 0x38
 8008c6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c6c:	1b5d      	subs	r5, r3, r5
 8008c6e:	1e6b      	subs	r3, r5, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	bf43      	ittte	mi
 8008c74:	2300      	movmi	r3, #0
 8008c76:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c7a:	9304      	strmi	r3, [sp, #16]
 8008c7c:	f04f 0800 	movpl.w	r8, #0
 8008c80:	f1ba 0f00 	cmp.w	sl, #0
 8008c84:	db3b      	blt.n	8008cfe <_dtoa_r+0x23e>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c8c:	4453      	add	r3, sl
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9306      	str	r3, [sp, #24]
 8008c94:	9b05      	ldr	r3, [sp, #20]
 8008c96:	2b09      	cmp	r3, #9
 8008c98:	d869      	bhi.n	8008d6e <_dtoa_r+0x2ae>
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	bfc4      	itt	gt
 8008c9e:	3b04      	subgt	r3, #4
 8008ca0:	9305      	strgt	r3, [sp, #20]
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ca8:	bfcc      	ite	gt
 8008caa:	2500      	movgt	r5, #0
 8008cac:	2501      	movle	r5, #1
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d869      	bhi.n	8008d86 <_dtoa_r+0x2c6>
 8008cb2:	e8df f003 	tbb	[pc, r3]
 8008cb6:	4e2c      	.short	0x4e2c
 8008cb8:	5a4c      	.short	0x5a4c
 8008cba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cbe:	441d      	add	r5, r3
 8008cc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	bfc1      	itttt	gt
 8008cc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ccc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cd0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cd4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cd8:	bfda      	itte	le
 8008cda:	f1c3 0320 	rsble	r3, r3, #32
 8008cde:	fa06 f003 	lslle.w	r0, r6, r3
 8008ce2:	4318      	orrgt	r0, r3
 8008ce4:	f7f7 fc2e 	bl	8000544 <__aeabi_ui2d>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4606      	mov	r6, r0
 8008cec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cf0:	3d01      	subs	r5, #1
 8008cf2:	9310      	str	r3, [sp, #64]	; 0x40
 8008cf4:	e771      	b.n	8008bda <_dtoa_r+0x11a>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e7b6      	b.n	8008c68 <_dtoa_r+0x1a8>
 8008cfa:	900e      	str	r0, [sp, #56]	; 0x38
 8008cfc:	e7b5      	b.n	8008c6a <_dtoa_r+0x1aa>
 8008cfe:	f1ca 0300 	rsb	r3, sl, #0
 8008d02:	9306      	str	r3, [sp, #24]
 8008d04:	2300      	movs	r3, #0
 8008d06:	eba8 080a 	sub.w	r8, r8, sl
 8008d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d0c:	e7c2      	b.n	8008c94 <_dtoa_r+0x1d4>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9308      	str	r3, [sp, #32]
 8008d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dc39      	bgt.n	8008d8c <_dtoa_r+0x2cc>
 8008d18:	f04f 0901 	mov.w	r9, #1
 8008d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d20:	464b      	mov	r3, r9
 8008d22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d28:	2200      	movs	r2, #0
 8008d2a:	6042      	str	r2, [r0, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f102 0614 	add.w	r6, r2, #20
 8008d32:	429e      	cmp	r6, r3
 8008d34:	6841      	ldr	r1, [r0, #4]
 8008d36:	d92f      	bls.n	8008d98 <_dtoa_r+0x2d8>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f001 f849 	bl	8009dd0 <_Balloc>
 8008d3e:	9000      	str	r0, [sp, #0]
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d14b      	bne.n	8008ddc <_dtoa_r+0x31c>
 8008d44:	4b24      	ldr	r3, [pc, #144]	; (8008dd8 <_dtoa_r+0x318>)
 8008d46:	4602      	mov	r2, r0
 8008d48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d4c:	e6d1      	b.n	8008af2 <_dtoa_r+0x32>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e7de      	b.n	8008d10 <_dtoa_r+0x250>
 8008d52:	2300      	movs	r3, #0
 8008d54:	9308      	str	r3, [sp, #32]
 8008d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d58:	eb0a 0903 	add.w	r9, sl, r3
 8008d5c:	f109 0301 	add.w	r3, r9, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	bfb8      	it	lt
 8008d66:	2301      	movlt	r3, #1
 8008d68:	e7dd      	b.n	8008d26 <_dtoa_r+0x266>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e7f2      	b.n	8008d54 <_dtoa_r+0x294>
 8008d6e:	2501      	movs	r5, #1
 8008d70:	2300      	movs	r3, #0
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	9508      	str	r5, [sp, #32]
 8008d76:	f04f 39ff 	mov.w	r9, #4294967295
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d80:	2312      	movs	r3, #18
 8008d82:	9209      	str	r2, [sp, #36]	; 0x24
 8008d84:	e7cf      	b.n	8008d26 <_dtoa_r+0x266>
 8008d86:	2301      	movs	r3, #1
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	e7f4      	b.n	8008d76 <_dtoa_r+0x2b6>
 8008d8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d90:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d94:	464b      	mov	r3, r9
 8008d96:	e7c6      	b.n	8008d26 <_dtoa_r+0x266>
 8008d98:	3101      	adds	r1, #1
 8008d9a:	6041      	str	r1, [r0, #4]
 8008d9c:	0052      	lsls	r2, r2, #1
 8008d9e:	e7c6      	b.n	8008d2e <_dtoa_r+0x26e>
 8008da0:	636f4361 	.word	0x636f4361
 8008da4:	3fd287a7 	.word	0x3fd287a7
 8008da8:	8b60c8b3 	.word	0x8b60c8b3
 8008dac:	3fc68a28 	.word	0x3fc68a28
 8008db0:	509f79fb 	.word	0x509f79fb
 8008db4:	3fd34413 	.word	0x3fd34413
 8008db8:	0800b94e 	.word	0x0800b94e
 8008dbc:	0800b965 	.word	0x0800b965
 8008dc0:	7ff00000 	.word	0x7ff00000
 8008dc4:	0800b94a 	.word	0x0800b94a
 8008dc8:	0800b941 	.word	0x0800b941
 8008dcc:	0800b7c5 	.word	0x0800b7c5
 8008dd0:	3ff80000 	.word	0x3ff80000
 8008dd4:	0800bae0 	.word	0x0800bae0
 8008dd8:	0800b9c4 	.word	0x0800b9c4
 8008ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dde:	9a00      	ldr	r2, [sp, #0]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	2b0e      	cmp	r3, #14
 8008de6:	f200 80ad 	bhi.w	8008f44 <_dtoa_r+0x484>
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f000 80aa 	beq.w	8008f44 <_dtoa_r+0x484>
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	dd36      	ble.n	8008e64 <_dtoa_r+0x3a4>
 8008df6:	4ac3      	ldr	r2, [pc, #780]	; (8009104 <_dtoa_r+0x644>)
 8008df8:	f00a 030f 	and.w	r3, sl, #15
 8008dfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e00:	ed93 7b00 	vldr	d7, [r3]
 8008e04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e0c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e10:	eef0 8a67 	vmov.f32	s17, s15
 8008e14:	d016      	beq.n	8008e44 <_dtoa_r+0x384>
 8008e16:	4bbc      	ldr	r3, [pc, #752]	; (8009108 <_dtoa_r+0x648>)
 8008e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e20:	f7f7 fd34 	bl	800088c <__aeabi_ddiv>
 8008e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e28:	f007 070f 	and.w	r7, r7, #15
 8008e2c:	2503      	movs	r5, #3
 8008e2e:	4eb6      	ldr	r6, [pc, #728]	; (8009108 <_dtoa_r+0x648>)
 8008e30:	b957      	cbnz	r7, 8008e48 <_dtoa_r+0x388>
 8008e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e36:	ec53 2b18 	vmov	r2, r3, d8
 8008e3a:	f7f7 fd27 	bl	800088c <__aeabi_ddiv>
 8008e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e42:	e029      	b.n	8008e98 <_dtoa_r+0x3d8>
 8008e44:	2502      	movs	r5, #2
 8008e46:	e7f2      	b.n	8008e2e <_dtoa_r+0x36e>
 8008e48:	07f9      	lsls	r1, r7, #31
 8008e4a:	d508      	bpl.n	8008e5e <_dtoa_r+0x39e>
 8008e4c:	ec51 0b18 	vmov	r0, r1, d8
 8008e50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	ec41 0b18 	vmov	d8, r0, r1
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	107f      	asrs	r7, r7, #1
 8008e60:	3608      	adds	r6, #8
 8008e62:	e7e5      	b.n	8008e30 <_dtoa_r+0x370>
 8008e64:	f000 80a6 	beq.w	8008fb4 <_dtoa_r+0x4f4>
 8008e68:	f1ca 0600 	rsb	r6, sl, #0
 8008e6c:	4ba5      	ldr	r3, [pc, #660]	; (8009104 <_dtoa_r+0x644>)
 8008e6e:	4fa6      	ldr	r7, [pc, #664]	; (8009108 <_dtoa_r+0x648>)
 8008e70:	f006 020f 	and.w	r2, r6, #15
 8008e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e80:	f7f7 fbda 	bl	8000638 <__aeabi_dmul>
 8008e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e88:	1136      	asrs	r6, r6, #4
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2502      	movs	r5, #2
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	f040 8085 	bne.w	8008f9e <_dtoa_r+0x4de>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1d2      	bne.n	8008e3e <_dtoa_r+0x37e>
 8008e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 808c 	beq.w	8008fb8 <_dtoa_r+0x4f8>
 8008ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ea4:	4b99      	ldr	r3, [pc, #612]	; (800910c <_dtoa_r+0x64c>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 fe36 	bl	8000b1c <__aeabi_dcmplt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f000 8081 	beq.w	8008fb8 <_dtoa_r+0x4f8>
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d07d      	beq.n	8008fb8 <_dtoa_r+0x4f8>
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	dd3c      	ble.n	8008f3c <_dtoa_r+0x47c>
 8008ec2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4b91      	ldr	r3, [pc, #580]	; (8009110 <_dtoa_r+0x650>)
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 fbb2 	bl	8000638 <__aeabi_dmul>
 8008ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed8:	3501      	adds	r5, #1
 8008eda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ede:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7f7 fb3e 	bl	8000564 <__aeabi_i2d>
 8008ee8:	4632      	mov	r2, r6
 8008eea:	463b      	mov	r3, r7
 8008eec:	f7f7 fba4 	bl	8000638 <__aeabi_dmul>
 8008ef0:	4b88      	ldr	r3, [pc, #544]	; (8009114 <_dtoa_r+0x654>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 f9ea 	bl	80002cc <__adddf3>
 8008ef8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d15c      	bne.n	8008fc2 <_dtoa_r+0x502>
 8008f08:	4b83      	ldr	r3, [pc, #524]	; (8009118 <_dtoa_r+0x658>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 f9da 	bl	80002c8 <__aeabi_dsub>
 8008f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f18:	4606      	mov	r6, r0
 8008f1a:	460f      	mov	r7, r1
 8008f1c:	f7f7 fe1c 	bl	8000b58 <__aeabi_dcmpgt>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f040 8296 	bne.w	8009452 <_dtoa_r+0x992>
 8008f26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 fdf3 	bl	8000b1c <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f040 8288 	bne.w	800944c <_dtoa_r+0x98c>
 8008f3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f2c0 8158 	blt.w	80091fc <_dtoa_r+0x73c>
 8008f4c:	f1ba 0f0e 	cmp.w	sl, #14
 8008f50:	f300 8154 	bgt.w	80091fc <_dtoa_r+0x73c>
 8008f54:	4b6b      	ldr	r3, [pc, #428]	; (8009104 <_dtoa_r+0x644>)
 8008f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f280 80e3 	bge.w	800912c <_dtoa_r+0x66c>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f300 80df 	bgt.w	800912c <_dtoa_r+0x66c>
 8008f6e:	f040 826d 	bne.w	800944c <_dtoa_r+0x98c>
 8008f72:	4b69      	ldr	r3, [pc, #420]	; (8009118 <_dtoa_r+0x658>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 fb5d 	bl	8000638 <__aeabi_dmul>
 8008f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f82:	f7f7 fddf 	bl	8000b44 <__aeabi_dcmpge>
 8008f86:	9e01      	ldr	r6, [sp, #4]
 8008f88:	4637      	mov	r7, r6
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f040 8243 	bne.w	8009416 <_dtoa_r+0x956>
 8008f90:	9d00      	ldr	r5, [sp, #0]
 8008f92:	2331      	movs	r3, #49	; 0x31
 8008f94:	f805 3b01 	strb.w	r3, [r5], #1
 8008f98:	f10a 0a01 	add.w	sl, sl, #1
 8008f9c:	e23f      	b.n	800941e <_dtoa_r+0x95e>
 8008f9e:	07f2      	lsls	r2, r6, #31
 8008fa0:	d505      	bpl.n	8008fae <_dtoa_r+0x4ee>
 8008fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa6:	f7f7 fb47 	bl	8000638 <__aeabi_dmul>
 8008faa:	3501      	adds	r5, #1
 8008fac:	2301      	movs	r3, #1
 8008fae:	1076      	asrs	r6, r6, #1
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	e76c      	b.n	8008e8e <_dtoa_r+0x3ce>
 8008fb4:	2502      	movs	r5, #2
 8008fb6:	e76f      	b.n	8008e98 <_dtoa_r+0x3d8>
 8008fb8:	9b01      	ldr	r3, [sp, #4]
 8008fba:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008fc0:	e78d      	b.n	8008ede <_dtoa_r+0x41e>
 8008fc2:	9900      	ldr	r1, [sp, #0]
 8008fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fc8:	4b4e      	ldr	r3, [pc, #312]	; (8009104 <_dtoa_r+0x644>)
 8008fca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fce:	4401      	add	r1, r0
 8008fd0:	9102      	str	r1, [sp, #8]
 8008fd2:	9908      	ldr	r1, [sp, #32]
 8008fd4:	eeb0 8a47 	vmov.f32	s16, s14
 8008fd8:	eef0 8a67 	vmov.f32	s17, s15
 8008fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d045      	beq.n	8009074 <_dtoa_r+0x5b4>
 8008fe8:	494c      	ldr	r1, [pc, #304]	; (800911c <_dtoa_r+0x65c>)
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7f7 fc4e 	bl	800088c <__aeabi_ddiv>
 8008ff0:	ec53 2b18 	vmov	r2, r3, d8
 8008ff4:	f7f7 f968 	bl	80002c8 <__aeabi_dsub>
 8008ff8:	9d00      	ldr	r5, [sp, #0]
 8008ffa:	ec41 0b18 	vmov	d8, r0, r1
 8008ffe:	4639      	mov	r1, r7
 8009000:	4630      	mov	r0, r6
 8009002:	f7f7 fdc9 	bl	8000b98 <__aeabi_d2iz>
 8009006:	900c      	str	r0, [sp, #48]	; 0x30
 8009008:	f7f7 faac 	bl	8000564 <__aeabi_i2d>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 f958 	bl	80002c8 <__aeabi_dsub>
 8009018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800901a:	3330      	adds	r3, #48	; 0x30
 800901c:	f805 3b01 	strb.w	r3, [r5], #1
 8009020:	ec53 2b18 	vmov	r2, r3, d8
 8009024:	4606      	mov	r6, r0
 8009026:	460f      	mov	r7, r1
 8009028:	f7f7 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	d165      	bne.n	80090fc <_dtoa_r+0x63c>
 8009030:	4632      	mov	r2, r6
 8009032:	463b      	mov	r3, r7
 8009034:	4935      	ldr	r1, [pc, #212]	; (800910c <_dtoa_r+0x64c>)
 8009036:	2000      	movs	r0, #0
 8009038:	f7f7 f946 	bl	80002c8 <__aeabi_dsub>
 800903c:	ec53 2b18 	vmov	r2, r3, d8
 8009040:	f7f7 fd6c 	bl	8000b1c <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	f040 80b9 	bne.w	80091bc <_dtoa_r+0x6fc>
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	429d      	cmp	r5, r3
 800904e:	f43f af75 	beq.w	8008f3c <_dtoa_r+0x47c>
 8009052:	4b2f      	ldr	r3, [pc, #188]	; (8009110 <_dtoa_r+0x650>)
 8009054:	ec51 0b18 	vmov	r0, r1, d8
 8009058:	2200      	movs	r2, #0
 800905a:	f7f7 faed 	bl	8000638 <__aeabi_dmul>
 800905e:	4b2c      	ldr	r3, [pc, #176]	; (8009110 <_dtoa_r+0x650>)
 8009060:	ec41 0b18 	vmov	d8, r0, r1
 8009064:	2200      	movs	r2, #0
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fae5 	bl	8000638 <__aeabi_dmul>
 800906e:	4606      	mov	r6, r0
 8009070:	460f      	mov	r7, r1
 8009072:	e7c4      	b.n	8008ffe <_dtoa_r+0x53e>
 8009074:	ec51 0b17 	vmov	r0, r1, d7
 8009078:	f7f7 fade 	bl	8000638 <__aeabi_dmul>
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	9d00      	ldr	r5, [sp, #0]
 8009080:	930c      	str	r3, [sp, #48]	; 0x30
 8009082:	ec41 0b18 	vmov	d8, r0, r1
 8009086:	4639      	mov	r1, r7
 8009088:	4630      	mov	r0, r6
 800908a:	f7f7 fd85 	bl	8000b98 <__aeabi_d2iz>
 800908e:	9011      	str	r0, [sp, #68]	; 0x44
 8009090:	f7f7 fa68 	bl	8000564 <__aeabi_i2d>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 f914 	bl	80002c8 <__aeabi_dsub>
 80090a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090a2:	3330      	adds	r3, #48	; 0x30
 80090a4:	f805 3b01 	strb.w	r3, [r5], #1
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	429d      	cmp	r5, r3
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	d134      	bne.n	8009120 <_dtoa_r+0x660>
 80090b6:	4b19      	ldr	r3, [pc, #100]	; (800911c <_dtoa_r+0x65c>)
 80090b8:	ec51 0b18 	vmov	r0, r1, d8
 80090bc:	f7f7 f906 	bl	80002cc <__adddf3>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 fd46 	bl	8000b58 <__aeabi_dcmpgt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d175      	bne.n	80091bc <_dtoa_r+0x6fc>
 80090d0:	ec53 2b18 	vmov	r2, r3, d8
 80090d4:	4911      	ldr	r1, [pc, #68]	; (800911c <_dtoa_r+0x65c>)
 80090d6:	2000      	movs	r0, #0
 80090d8:	f7f7 f8f6 	bl	80002c8 <__aeabi_dsub>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fd1a 	bl	8000b1c <__aeabi_dcmplt>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	f43f af27 	beq.w	8008f3c <_dtoa_r+0x47c>
 80090ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f0:	1e6b      	subs	r3, r5, #1
 80090f2:	930c      	str	r3, [sp, #48]	; 0x30
 80090f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090f8:	2b30      	cmp	r3, #48	; 0x30
 80090fa:	d0f8      	beq.n	80090ee <_dtoa_r+0x62e>
 80090fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009100:	e04a      	b.n	8009198 <_dtoa_r+0x6d8>
 8009102:	bf00      	nop
 8009104:	0800bae0 	.word	0x0800bae0
 8009108:	0800bab8 	.word	0x0800bab8
 800910c:	3ff00000 	.word	0x3ff00000
 8009110:	40240000 	.word	0x40240000
 8009114:	401c0000 	.word	0x401c0000
 8009118:	40140000 	.word	0x40140000
 800911c:	3fe00000 	.word	0x3fe00000
 8009120:	4baf      	ldr	r3, [pc, #700]	; (80093e0 <_dtoa_r+0x920>)
 8009122:	f7f7 fa89 	bl	8000638 <__aeabi_dmul>
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	e7ac      	b.n	8009086 <_dtoa_r+0x5c6>
 800912c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009130:	9d00      	ldr	r5, [sp, #0]
 8009132:	4642      	mov	r2, r8
 8009134:	464b      	mov	r3, r9
 8009136:	4630      	mov	r0, r6
 8009138:	4639      	mov	r1, r7
 800913a:	f7f7 fba7 	bl	800088c <__aeabi_ddiv>
 800913e:	f7f7 fd2b 	bl	8000b98 <__aeabi_d2iz>
 8009142:	9002      	str	r0, [sp, #8]
 8009144:	f7f7 fa0e 	bl	8000564 <__aeabi_i2d>
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	f7f7 fa74 	bl	8000638 <__aeabi_dmul>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 f8b6 	bl	80002c8 <__aeabi_dsub>
 800915c:	9e02      	ldr	r6, [sp, #8]
 800915e:	9f01      	ldr	r7, [sp, #4]
 8009160:	3630      	adds	r6, #48	; 0x30
 8009162:	f805 6b01 	strb.w	r6, [r5], #1
 8009166:	9e00      	ldr	r6, [sp, #0]
 8009168:	1bae      	subs	r6, r5, r6
 800916a:	42b7      	cmp	r7, r6
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	d137      	bne.n	80091e2 <_dtoa_r+0x722>
 8009172:	f7f7 f8ab 	bl	80002cc <__adddf3>
 8009176:	4642      	mov	r2, r8
 8009178:	464b      	mov	r3, r9
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	f7f7 fceb 	bl	8000b58 <__aeabi_dcmpgt>
 8009182:	b9c8      	cbnz	r0, 80091b8 <_dtoa_r+0x6f8>
 8009184:	4642      	mov	r2, r8
 8009186:	464b      	mov	r3, r9
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 fcbc 	bl	8000b08 <__aeabi_dcmpeq>
 8009190:	b110      	cbz	r0, 8009198 <_dtoa_r+0x6d8>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	07d9      	lsls	r1, r3, #31
 8009196:	d40f      	bmi.n	80091b8 <_dtoa_r+0x6f8>
 8009198:	4620      	mov	r0, r4
 800919a:	4659      	mov	r1, fp
 800919c:	f000 fe58 	bl	8009e50 <_Bfree>
 80091a0:	2300      	movs	r3, #0
 80091a2:	702b      	strb	r3, [r5, #0]
 80091a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091a6:	f10a 0001 	add.w	r0, sl, #1
 80091aa:	6018      	str	r0, [r3, #0]
 80091ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f43f acd8 	beq.w	8008b64 <_dtoa_r+0xa4>
 80091b4:	601d      	str	r5, [r3, #0]
 80091b6:	e4d5      	b.n	8008b64 <_dtoa_r+0xa4>
 80091b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80091bc:	462b      	mov	r3, r5
 80091be:	461d      	mov	r5, r3
 80091c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091c4:	2a39      	cmp	r2, #57	; 0x39
 80091c6:	d108      	bne.n	80091da <_dtoa_r+0x71a>
 80091c8:	9a00      	ldr	r2, [sp, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d1f7      	bne.n	80091be <_dtoa_r+0x6fe>
 80091ce:	9a07      	ldr	r2, [sp, #28]
 80091d0:	9900      	ldr	r1, [sp, #0]
 80091d2:	3201      	adds	r2, #1
 80091d4:	9207      	str	r2, [sp, #28]
 80091d6:	2230      	movs	r2, #48	; 0x30
 80091d8:	700a      	strb	r2, [r1, #0]
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	3201      	adds	r2, #1
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e78c      	b.n	80090fc <_dtoa_r+0x63c>
 80091e2:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <_dtoa_r+0x920>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	f7f7 fa27 	bl	8000638 <__aeabi_dmul>
 80091ea:	2200      	movs	r2, #0
 80091ec:	2300      	movs	r3, #0
 80091ee:	4606      	mov	r6, r0
 80091f0:	460f      	mov	r7, r1
 80091f2:	f7f7 fc89 	bl	8000b08 <__aeabi_dcmpeq>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d09b      	beq.n	8009132 <_dtoa_r+0x672>
 80091fa:	e7cd      	b.n	8009198 <_dtoa_r+0x6d8>
 80091fc:	9a08      	ldr	r2, [sp, #32]
 80091fe:	2a00      	cmp	r2, #0
 8009200:	f000 80c4 	beq.w	800938c <_dtoa_r+0x8cc>
 8009204:	9a05      	ldr	r2, [sp, #20]
 8009206:	2a01      	cmp	r2, #1
 8009208:	f300 80a8 	bgt.w	800935c <_dtoa_r+0x89c>
 800920c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800920e:	2a00      	cmp	r2, #0
 8009210:	f000 80a0 	beq.w	8009354 <_dtoa_r+0x894>
 8009214:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009218:	9e06      	ldr	r6, [sp, #24]
 800921a:	4645      	mov	r5, r8
 800921c:	9a04      	ldr	r2, [sp, #16]
 800921e:	2101      	movs	r1, #1
 8009220:	441a      	add	r2, r3
 8009222:	4620      	mov	r0, r4
 8009224:	4498      	add	r8, r3
 8009226:	9204      	str	r2, [sp, #16]
 8009228:	f000 ff18 	bl	800a05c <__i2b>
 800922c:	4607      	mov	r7, r0
 800922e:	2d00      	cmp	r5, #0
 8009230:	dd0b      	ble.n	800924a <_dtoa_r+0x78a>
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	dd08      	ble.n	800924a <_dtoa_r+0x78a>
 8009238:	42ab      	cmp	r3, r5
 800923a:	9a04      	ldr	r2, [sp, #16]
 800923c:	bfa8      	it	ge
 800923e:	462b      	movge	r3, r5
 8009240:	eba8 0803 	sub.w	r8, r8, r3
 8009244:	1aed      	subs	r5, r5, r3
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	b1fb      	cbz	r3, 800928e <_dtoa_r+0x7ce>
 800924e:	9b08      	ldr	r3, [sp, #32]
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 809f 	beq.w	8009394 <_dtoa_r+0x8d4>
 8009256:	2e00      	cmp	r6, #0
 8009258:	dd11      	ble.n	800927e <_dtoa_r+0x7be>
 800925a:	4639      	mov	r1, r7
 800925c:	4632      	mov	r2, r6
 800925e:	4620      	mov	r0, r4
 8009260:	f000 ffb8 	bl	800a1d4 <__pow5mult>
 8009264:	465a      	mov	r2, fp
 8009266:	4601      	mov	r1, r0
 8009268:	4607      	mov	r7, r0
 800926a:	4620      	mov	r0, r4
 800926c:	f000 ff0c 	bl	800a088 <__multiply>
 8009270:	4659      	mov	r1, fp
 8009272:	9007      	str	r0, [sp, #28]
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fdeb 	bl	8009e50 <_Bfree>
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	469b      	mov	fp, r3
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	1b9a      	subs	r2, r3, r6
 8009282:	d004      	beq.n	800928e <_dtoa_r+0x7ce>
 8009284:	4659      	mov	r1, fp
 8009286:	4620      	mov	r0, r4
 8009288:	f000 ffa4 	bl	800a1d4 <__pow5mult>
 800928c:	4683      	mov	fp, r0
 800928e:	2101      	movs	r1, #1
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fee3 	bl	800a05c <__i2b>
 8009296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009298:	2b00      	cmp	r3, #0
 800929a:	4606      	mov	r6, r0
 800929c:	dd7c      	ble.n	8009398 <_dtoa_r+0x8d8>
 800929e:	461a      	mov	r2, r3
 80092a0:	4601      	mov	r1, r0
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 ff96 	bl	800a1d4 <__pow5mult>
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	4606      	mov	r6, r0
 80092ae:	dd76      	ble.n	800939e <_dtoa_r+0x8de>
 80092b0:	2300      	movs	r3, #0
 80092b2:	9306      	str	r3, [sp, #24]
 80092b4:	6933      	ldr	r3, [r6, #16]
 80092b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092ba:	6918      	ldr	r0, [r3, #16]
 80092bc:	f000 fe7e 	bl	8009fbc <__hi0bits>
 80092c0:	f1c0 0020 	rsb	r0, r0, #32
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	4418      	add	r0, r3
 80092c8:	f010 001f 	ands.w	r0, r0, #31
 80092cc:	f000 8086 	beq.w	80093dc <_dtoa_r+0x91c>
 80092d0:	f1c0 0320 	rsb	r3, r0, #32
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	dd7f      	ble.n	80093d8 <_dtoa_r+0x918>
 80092d8:	f1c0 001c 	rsb	r0, r0, #28
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	4403      	add	r3, r0
 80092e0:	4480      	add	r8, r0
 80092e2:	4405      	add	r5, r0
 80092e4:	9304      	str	r3, [sp, #16]
 80092e6:	f1b8 0f00 	cmp.w	r8, #0
 80092ea:	dd05      	ble.n	80092f8 <_dtoa_r+0x838>
 80092ec:	4659      	mov	r1, fp
 80092ee:	4642      	mov	r2, r8
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 ffc9 	bl	800a288 <__lshift>
 80092f6:	4683      	mov	fp, r0
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dd05      	ble.n	800930a <_dtoa_r+0x84a>
 80092fe:	4631      	mov	r1, r6
 8009300:	461a      	mov	r2, r3
 8009302:	4620      	mov	r0, r4
 8009304:	f000 ffc0 	bl	800a288 <__lshift>
 8009308:	4606      	mov	r6, r0
 800930a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800930c:	2b00      	cmp	r3, #0
 800930e:	d069      	beq.n	80093e4 <_dtoa_r+0x924>
 8009310:	4631      	mov	r1, r6
 8009312:	4658      	mov	r0, fp
 8009314:	f001 f824 	bl	800a360 <__mcmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	da63      	bge.n	80093e4 <_dtoa_r+0x924>
 800931c:	2300      	movs	r3, #0
 800931e:	4659      	mov	r1, fp
 8009320:	220a      	movs	r2, #10
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fdb6 	bl	8009e94 <__multadd>
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800932e:	4683      	mov	fp, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 818f 	beq.w	8009654 <_dtoa_r+0xb94>
 8009336:	4639      	mov	r1, r7
 8009338:	2300      	movs	r3, #0
 800933a:	220a      	movs	r2, #10
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fda9 	bl	8009e94 <__multadd>
 8009342:	f1b9 0f00 	cmp.w	r9, #0
 8009346:	4607      	mov	r7, r0
 8009348:	f300 808e 	bgt.w	8009468 <_dtoa_r+0x9a8>
 800934c:	9b05      	ldr	r3, [sp, #20]
 800934e:	2b02      	cmp	r3, #2
 8009350:	dc50      	bgt.n	80093f4 <_dtoa_r+0x934>
 8009352:	e089      	b.n	8009468 <_dtoa_r+0x9a8>
 8009354:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800935a:	e75d      	b.n	8009218 <_dtoa_r+0x758>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	1e5e      	subs	r6, r3, #1
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	42b3      	cmp	r3, r6
 8009364:	bfbf      	itttt	lt
 8009366:	9b06      	ldrlt	r3, [sp, #24]
 8009368:	9606      	strlt	r6, [sp, #24]
 800936a:	1af2      	sublt	r2, r6, r3
 800936c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800936e:	bfb6      	itet	lt
 8009370:	189b      	addlt	r3, r3, r2
 8009372:	1b9e      	subge	r6, r3, r6
 8009374:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	bfb8      	it	lt
 800937a:	2600      	movlt	r6, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfb5      	itete	lt
 8009380:	eba8 0503 	sublt.w	r5, r8, r3
 8009384:	9b01      	ldrge	r3, [sp, #4]
 8009386:	2300      	movlt	r3, #0
 8009388:	4645      	movge	r5, r8
 800938a:	e747      	b.n	800921c <_dtoa_r+0x75c>
 800938c:	9e06      	ldr	r6, [sp, #24]
 800938e:	9f08      	ldr	r7, [sp, #32]
 8009390:	4645      	mov	r5, r8
 8009392:	e74c      	b.n	800922e <_dtoa_r+0x76e>
 8009394:	9a06      	ldr	r2, [sp, #24]
 8009396:	e775      	b.n	8009284 <_dtoa_r+0x7c4>
 8009398:	9b05      	ldr	r3, [sp, #20]
 800939a:	2b01      	cmp	r3, #1
 800939c:	dc18      	bgt.n	80093d0 <_dtoa_r+0x910>
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	b9b3      	cbnz	r3, 80093d0 <_dtoa_r+0x910>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a8:	b9a3      	cbnz	r3, 80093d4 <_dtoa_r+0x914>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	051b      	lsls	r3, r3, #20
 80093b4:	b12b      	cbz	r3, 80093c2 <_dtoa_r+0x902>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	f108 0801 	add.w	r8, r8, #1
 80093c0:	2301      	movs	r3, #1
 80093c2:	9306      	str	r3, [sp, #24]
 80093c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f47f af74 	bne.w	80092b4 <_dtoa_r+0x7f4>
 80093cc:	2001      	movs	r0, #1
 80093ce:	e779      	b.n	80092c4 <_dtoa_r+0x804>
 80093d0:	2300      	movs	r3, #0
 80093d2:	e7f6      	b.n	80093c2 <_dtoa_r+0x902>
 80093d4:	9b02      	ldr	r3, [sp, #8]
 80093d6:	e7f4      	b.n	80093c2 <_dtoa_r+0x902>
 80093d8:	d085      	beq.n	80092e6 <_dtoa_r+0x826>
 80093da:	4618      	mov	r0, r3
 80093dc:	301c      	adds	r0, #28
 80093de:	e77d      	b.n	80092dc <_dtoa_r+0x81c>
 80093e0:	40240000 	.word	0x40240000
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dc38      	bgt.n	800945c <_dtoa_r+0x99c>
 80093ea:	9b05      	ldr	r3, [sp, #20]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	dd35      	ble.n	800945c <_dtoa_r+0x99c>
 80093f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093f4:	f1b9 0f00 	cmp.w	r9, #0
 80093f8:	d10d      	bne.n	8009416 <_dtoa_r+0x956>
 80093fa:	4631      	mov	r1, r6
 80093fc:	464b      	mov	r3, r9
 80093fe:	2205      	movs	r2, #5
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fd47 	bl	8009e94 <__multadd>
 8009406:	4601      	mov	r1, r0
 8009408:	4606      	mov	r6, r0
 800940a:	4658      	mov	r0, fp
 800940c:	f000 ffa8 	bl	800a360 <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	f73f adbd 	bgt.w	8008f90 <_dtoa_r+0x4d0>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	9d00      	ldr	r5, [sp, #0]
 800941a:	ea6f 0a03 	mvn.w	sl, r3
 800941e:	f04f 0800 	mov.w	r8, #0
 8009422:	4631      	mov	r1, r6
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fd13 	bl	8009e50 <_Bfree>
 800942a:	2f00      	cmp	r7, #0
 800942c:	f43f aeb4 	beq.w	8009198 <_dtoa_r+0x6d8>
 8009430:	f1b8 0f00 	cmp.w	r8, #0
 8009434:	d005      	beq.n	8009442 <_dtoa_r+0x982>
 8009436:	45b8      	cmp	r8, r7
 8009438:	d003      	beq.n	8009442 <_dtoa_r+0x982>
 800943a:	4641      	mov	r1, r8
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fd07 	bl	8009e50 <_Bfree>
 8009442:	4639      	mov	r1, r7
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fd03 	bl	8009e50 <_Bfree>
 800944a:	e6a5      	b.n	8009198 <_dtoa_r+0x6d8>
 800944c:	2600      	movs	r6, #0
 800944e:	4637      	mov	r7, r6
 8009450:	e7e1      	b.n	8009416 <_dtoa_r+0x956>
 8009452:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009454:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009458:	4637      	mov	r7, r6
 800945a:	e599      	b.n	8008f90 <_dtoa_r+0x4d0>
 800945c:	9b08      	ldr	r3, [sp, #32]
 800945e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 80fd 	beq.w	8009662 <_dtoa_r+0xba2>
 8009468:	2d00      	cmp	r5, #0
 800946a:	dd05      	ble.n	8009478 <_dtoa_r+0x9b8>
 800946c:	4639      	mov	r1, r7
 800946e:	462a      	mov	r2, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 ff09 	bl	800a288 <__lshift>
 8009476:	4607      	mov	r7, r0
 8009478:	9b06      	ldr	r3, [sp, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d05c      	beq.n	8009538 <_dtoa_r+0xa78>
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fca5 	bl	8009dd0 <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b928      	cbnz	r0, 8009496 <_dtoa_r+0x9d6>
 800948a:	4b80      	ldr	r3, [pc, #512]	; (800968c <_dtoa_r+0xbcc>)
 800948c:	4602      	mov	r2, r0
 800948e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009492:	f7ff bb2e 	b.w	8008af2 <_dtoa_r+0x32>
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	f107 010c 	add.w	r1, r7, #12
 80094a0:	300c      	adds	r0, #12
 80094a2:	f000 fc87 	bl	8009db4 <memcpy>
 80094a6:	2201      	movs	r2, #1
 80094a8:	4629      	mov	r1, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 feec 	bl	800a288 <__lshift>
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	9b00      	ldr	r3, [sp, #0]
 80094b8:	444b      	add	r3, r9
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	46b8      	mov	r8, r7
 80094c4:	9306      	str	r3, [sp, #24]
 80094c6:	4607      	mov	r7, r0
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	4631      	mov	r1, r6
 80094cc:	3b01      	subs	r3, #1
 80094ce:	4658      	mov	r0, fp
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	f7ff fa67 	bl	80089a4 <quorem>
 80094d6:	4603      	mov	r3, r0
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	9004      	str	r0, [sp, #16]
 80094dc:	4641      	mov	r1, r8
 80094de:	4658      	mov	r0, fp
 80094e0:	9308      	str	r3, [sp, #32]
 80094e2:	f000 ff3d 	bl	800a360 <__mcmp>
 80094e6:	463a      	mov	r2, r7
 80094e8:	4681      	mov	r9, r0
 80094ea:	4631      	mov	r1, r6
 80094ec:	4620      	mov	r0, r4
 80094ee:	f000 ff53 	bl	800a398 <__mdiff>
 80094f2:	68c2      	ldr	r2, [r0, #12]
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	4605      	mov	r5, r0
 80094f8:	bb02      	cbnz	r2, 800953c <_dtoa_r+0xa7c>
 80094fa:	4601      	mov	r1, r0
 80094fc:	4658      	mov	r0, fp
 80094fe:	f000 ff2f 	bl	800a360 <__mcmp>
 8009502:	9b08      	ldr	r3, [sp, #32]
 8009504:	4602      	mov	r2, r0
 8009506:	4629      	mov	r1, r5
 8009508:	4620      	mov	r0, r4
 800950a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800950e:	f000 fc9f 	bl	8009e50 <_Bfree>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009516:	9d01      	ldr	r5, [sp, #4]
 8009518:	ea43 0102 	orr.w	r1, r3, r2
 800951c:	9b06      	ldr	r3, [sp, #24]
 800951e:	430b      	orrs	r3, r1
 8009520:	9b08      	ldr	r3, [sp, #32]
 8009522:	d10d      	bne.n	8009540 <_dtoa_r+0xa80>
 8009524:	2b39      	cmp	r3, #57	; 0x39
 8009526:	d029      	beq.n	800957c <_dtoa_r+0xabc>
 8009528:	f1b9 0f00 	cmp.w	r9, #0
 800952c:	dd01      	ble.n	8009532 <_dtoa_r+0xa72>
 800952e:	9b04      	ldr	r3, [sp, #16]
 8009530:	3331      	adds	r3, #49	; 0x31
 8009532:	9a02      	ldr	r2, [sp, #8]
 8009534:	7013      	strb	r3, [r2, #0]
 8009536:	e774      	b.n	8009422 <_dtoa_r+0x962>
 8009538:	4638      	mov	r0, r7
 800953a:	e7b9      	b.n	80094b0 <_dtoa_r+0x9f0>
 800953c:	2201      	movs	r2, #1
 800953e:	e7e2      	b.n	8009506 <_dtoa_r+0xa46>
 8009540:	f1b9 0f00 	cmp.w	r9, #0
 8009544:	db06      	blt.n	8009554 <_dtoa_r+0xa94>
 8009546:	9905      	ldr	r1, [sp, #20]
 8009548:	ea41 0909 	orr.w	r9, r1, r9
 800954c:	9906      	ldr	r1, [sp, #24]
 800954e:	ea59 0101 	orrs.w	r1, r9, r1
 8009552:	d120      	bne.n	8009596 <_dtoa_r+0xad6>
 8009554:	2a00      	cmp	r2, #0
 8009556:	ddec      	ble.n	8009532 <_dtoa_r+0xa72>
 8009558:	4659      	mov	r1, fp
 800955a:	2201      	movs	r2, #1
 800955c:	4620      	mov	r0, r4
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	f000 fe92 	bl	800a288 <__lshift>
 8009564:	4631      	mov	r1, r6
 8009566:	4683      	mov	fp, r0
 8009568:	f000 fefa 	bl	800a360 <__mcmp>
 800956c:	2800      	cmp	r0, #0
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	dc02      	bgt.n	8009578 <_dtoa_r+0xab8>
 8009572:	d1de      	bne.n	8009532 <_dtoa_r+0xa72>
 8009574:	07da      	lsls	r2, r3, #31
 8009576:	d5dc      	bpl.n	8009532 <_dtoa_r+0xa72>
 8009578:	2b39      	cmp	r3, #57	; 0x39
 800957a:	d1d8      	bne.n	800952e <_dtoa_r+0xa6e>
 800957c:	9a02      	ldr	r2, [sp, #8]
 800957e:	2339      	movs	r3, #57	; 0x39
 8009580:	7013      	strb	r3, [r2, #0]
 8009582:	462b      	mov	r3, r5
 8009584:	461d      	mov	r5, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800958c:	2a39      	cmp	r2, #57	; 0x39
 800958e:	d050      	beq.n	8009632 <_dtoa_r+0xb72>
 8009590:	3201      	adds	r2, #1
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	e745      	b.n	8009422 <_dtoa_r+0x962>
 8009596:	2a00      	cmp	r2, #0
 8009598:	dd03      	ble.n	80095a2 <_dtoa_r+0xae2>
 800959a:	2b39      	cmp	r3, #57	; 0x39
 800959c:	d0ee      	beq.n	800957c <_dtoa_r+0xabc>
 800959e:	3301      	adds	r3, #1
 80095a0:	e7c7      	b.n	8009532 <_dtoa_r+0xa72>
 80095a2:	9a01      	ldr	r2, [sp, #4]
 80095a4:	9907      	ldr	r1, [sp, #28]
 80095a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095aa:	428a      	cmp	r2, r1
 80095ac:	d02a      	beq.n	8009604 <_dtoa_r+0xb44>
 80095ae:	4659      	mov	r1, fp
 80095b0:	2300      	movs	r3, #0
 80095b2:	220a      	movs	r2, #10
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fc6d 	bl	8009e94 <__multadd>
 80095ba:	45b8      	cmp	r8, r7
 80095bc:	4683      	mov	fp, r0
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	f04f 020a 	mov.w	r2, #10
 80095c6:	4641      	mov	r1, r8
 80095c8:	4620      	mov	r0, r4
 80095ca:	d107      	bne.n	80095dc <_dtoa_r+0xb1c>
 80095cc:	f000 fc62 	bl	8009e94 <__multadd>
 80095d0:	4680      	mov	r8, r0
 80095d2:	4607      	mov	r7, r0
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	3301      	adds	r3, #1
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	e775      	b.n	80094c8 <_dtoa_r+0xa08>
 80095dc:	f000 fc5a 	bl	8009e94 <__multadd>
 80095e0:	4639      	mov	r1, r7
 80095e2:	4680      	mov	r8, r0
 80095e4:	2300      	movs	r3, #0
 80095e6:	220a      	movs	r2, #10
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fc53 	bl	8009e94 <__multadd>
 80095ee:	4607      	mov	r7, r0
 80095f0:	e7f0      	b.n	80095d4 <_dtoa_r+0xb14>
 80095f2:	f1b9 0f00 	cmp.w	r9, #0
 80095f6:	9a00      	ldr	r2, [sp, #0]
 80095f8:	bfcc      	ite	gt
 80095fa:	464d      	movgt	r5, r9
 80095fc:	2501      	movle	r5, #1
 80095fe:	4415      	add	r5, r2
 8009600:	f04f 0800 	mov.w	r8, #0
 8009604:	4659      	mov	r1, fp
 8009606:	2201      	movs	r2, #1
 8009608:	4620      	mov	r0, r4
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	f000 fe3c 	bl	800a288 <__lshift>
 8009610:	4631      	mov	r1, r6
 8009612:	4683      	mov	fp, r0
 8009614:	f000 fea4 	bl	800a360 <__mcmp>
 8009618:	2800      	cmp	r0, #0
 800961a:	dcb2      	bgt.n	8009582 <_dtoa_r+0xac2>
 800961c:	d102      	bne.n	8009624 <_dtoa_r+0xb64>
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	07db      	lsls	r3, r3, #31
 8009622:	d4ae      	bmi.n	8009582 <_dtoa_r+0xac2>
 8009624:	462b      	mov	r3, r5
 8009626:	461d      	mov	r5, r3
 8009628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800962c:	2a30      	cmp	r2, #48	; 0x30
 800962e:	d0fa      	beq.n	8009626 <_dtoa_r+0xb66>
 8009630:	e6f7      	b.n	8009422 <_dtoa_r+0x962>
 8009632:	9a00      	ldr	r2, [sp, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d1a5      	bne.n	8009584 <_dtoa_r+0xac4>
 8009638:	f10a 0a01 	add.w	sl, sl, #1
 800963c:	2331      	movs	r3, #49	; 0x31
 800963e:	e779      	b.n	8009534 <_dtoa_r+0xa74>
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <_dtoa_r+0xbd0>)
 8009642:	f7ff baaf 	b.w	8008ba4 <_dtoa_r+0xe4>
 8009646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009648:	2b00      	cmp	r3, #0
 800964a:	f47f aa86 	bne.w	8008b5a <_dtoa_r+0x9a>
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <_dtoa_r+0xbd4>)
 8009650:	f7ff baa8 	b.w	8008ba4 <_dtoa_r+0xe4>
 8009654:	f1b9 0f00 	cmp.w	r9, #0
 8009658:	dc03      	bgt.n	8009662 <_dtoa_r+0xba2>
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	2b02      	cmp	r3, #2
 800965e:	f73f aec9 	bgt.w	80093f4 <_dtoa_r+0x934>
 8009662:	9d00      	ldr	r5, [sp, #0]
 8009664:	4631      	mov	r1, r6
 8009666:	4658      	mov	r0, fp
 8009668:	f7ff f99c 	bl	80089a4 <quorem>
 800966c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009670:	f805 3b01 	strb.w	r3, [r5], #1
 8009674:	9a00      	ldr	r2, [sp, #0]
 8009676:	1aaa      	subs	r2, r5, r2
 8009678:	4591      	cmp	r9, r2
 800967a:	ddba      	ble.n	80095f2 <_dtoa_r+0xb32>
 800967c:	4659      	mov	r1, fp
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fc06 	bl	8009e94 <__multadd>
 8009688:	4683      	mov	fp, r0
 800968a:	e7eb      	b.n	8009664 <_dtoa_r+0xba4>
 800968c:	0800b9c4 	.word	0x0800b9c4
 8009690:	0800b7c4 	.word	0x0800b7c4
 8009694:	0800b941 	.word	0x0800b941

08009698 <rshift>:
 8009698:	6903      	ldr	r3, [r0, #16]
 800969a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800969e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096a6:	f100 0414 	add.w	r4, r0, #20
 80096aa:	dd45      	ble.n	8009738 <rshift+0xa0>
 80096ac:	f011 011f 	ands.w	r1, r1, #31
 80096b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096b8:	d10c      	bne.n	80096d4 <rshift+0x3c>
 80096ba:	f100 0710 	add.w	r7, r0, #16
 80096be:	4629      	mov	r1, r5
 80096c0:	42b1      	cmp	r1, r6
 80096c2:	d334      	bcc.n	800972e <rshift+0x96>
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	1eea      	subs	r2, r5, #3
 80096ca:	4296      	cmp	r6, r2
 80096cc:	bf38      	it	cc
 80096ce:	2300      	movcc	r3, #0
 80096d0:	4423      	add	r3, r4
 80096d2:	e015      	b.n	8009700 <rshift+0x68>
 80096d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096d8:	f1c1 0820 	rsb	r8, r1, #32
 80096dc:	40cf      	lsrs	r7, r1
 80096de:	f105 0e04 	add.w	lr, r5, #4
 80096e2:	46a1      	mov	r9, r4
 80096e4:	4576      	cmp	r6, lr
 80096e6:	46f4      	mov	ip, lr
 80096e8:	d815      	bhi.n	8009716 <rshift+0x7e>
 80096ea:	1a9b      	subs	r3, r3, r2
 80096ec:	009a      	lsls	r2, r3, #2
 80096ee:	3a04      	subs	r2, #4
 80096f0:	3501      	adds	r5, #1
 80096f2:	42ae      	cmp	r6, r5
 80096f4:	bf38      	it	cc
 80096f6:	2200      	movcc	r2, #0
 80096f8:	18a3      	adds	r3, r4, r2
 80096fa:	50a7      	str	r7, [r4, r2]
 80096fc:	b107      	cbz	r7, 8009700 <rshift+0x68>
 80096fe:	3304      	adds	r3, #4
 8009700:	1b1a      	subs	r2, r3, r4
 8009702:	42a3      	cmp	r3, r4
 8009704:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009708:	bf08      	it	eq
 800970a:	2300      	moveq	r3, #0
 800970c:	6102      	str	r2, [r0, #16]
 800970e:	bf08      	it	eq
 8009710:	6143      	streq	r3, [r0, #20]
 8009712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009716:	f8dc c000 	ldr.w	ip, [ip]
 800971a:	fa0c fc08 	lsl.w	ip, ip, r8
 800971e:	ea4c 0707 	orr.w	r7, ip, r7
 8009722:	f849 7b04 	str.w	r7, [r9], #4
 8009726:	f85e 7b04 	ldr.w	r7, [lr], #4
 800972a:	40cf      	lsrs	r7, r1
 800972c:	e7da      	b.n	80096e4 <rshift+0x4c>
 800972e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009732:	f847 cf04 	str.w	ip, [r7, #4]!
 8009736:	e7c3      	b.n	80096c0 <rshift+0x28>
 8009738:	4623      	mov	r3, r4
 800973a:	e7e1      	b.n	8009700 <rshift+0x68>

0800973c <__hexdig_fun>:
 800973c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009740:	2b09      	cmp	r3, #9
 8009742:	d802      	bhi.n	800974a <__hexdig_fun+0xe>
 8009744:	3820      	subs	r0, #32
 8009746:	b2c0      	uxtb	r0, r0
 8009748:	4770      	bx	lr
 800974a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800974e:	2b05      	cmp	r3, #5
 8009750:	d801      	bhi.n	8009756 <__hexdig_fun+0x1a>
 8009752:	3847      	subs	r0, #71	; 0x47
 8009754:	e7f7      	b.n	8009746 <__hexdig_fun+0xa>
 8009756:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800975a:	2b05      	cmp	r3, #5
 800975c:	d801      	bhi.n	8009762 <__hexdig_fun+0x26>
 800975e:	3827      	subs	r0, #39	; 0x27
 8009760:	e7f1      	b.n	8009746 <__hexdig_fun+0xa>
 8009762:	2000      	movs	r0, #0
 8009764:	4770      	bx	lr
	...

08009768 <__gethex>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	ed2d 8b02 	vpush	{d8}
 8009770:	b089      	sub	sp, #36	; 0x24
 8009772:	ee08 0a10 	vmov	s16, r0
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	4bbc      	ldr	r3, [pc, #752]	; (8009a6c <__gethex+0x304>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	4618      	mov	r0, r3
 8009780:	468b      	mov	fp, r1
 8009782:	4690      	mov	r8, r2
 8009784:	f7f6 fd44 	bl	8000210 <strlen>
 8009788:	9b01      	ldr	r3, [sp, #4]
 800978a:	f8db 2000 	ldr.w	r2, [fp]
 800978e:	4403      	add	r3, r0
 8009790:	4682      	mov	sl, r0
 8009792:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009796:	9305      	str	r3, [sp, #20]
 8009798:	1c93      	adds	r3, r2, #2
 800979a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800979e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097a2:	32fe      	adds	r2, #254	; 0xfe
 80097a4:	18d1      	adds	r1, r2, r3
 80097a6:	461f      	mov	r7, r3
 80097a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097ac:	9100      	str	r1, [sp, #0]
 80097ae:	2830      	cmp	r0, #48	; 0x30
 80097b0:	d0f8      	beq.n	80097a4 <__gethex+0x3c>
 80097b2:	f7ff ffc3 	bl	800973c <__hexdig_fun>
 80097b6:	4604      	mov	r4, r0
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d13a      	bne.n	8009832 <__gethex+0xca>
 80097bc:	9901      	ldr	r1, [sp, #4]
 80097be:	4652      	mov	r2, sl
 80097c0:	4638      	mov	r0, r7
 80097c2:	f001 f9ed 	bl	800aba0 <strncmp>
 80097c6:	4605      	mov	r5, r0
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d168      	bne.n	800989e <__gethex+0x136>
 80097cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097d0:	eb07 060a 	add.w	r6, r7, sl
 80097d4:	f7ff ffb2 	bl	800973c <__hexdig_fun>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d062      	beq.n	80098a2 <__gethex+0x13a>
 80097dc:	4633      	mov	r3, r6
 80097de:	7818      	ldrb	r0, [r3, #0]
 80097e0:	2830      	cmp	r0, #48	; 0x30
 80097e2:	461f      	mov	r7, r3
 80097e4:	f103 0301 	add.w	r3, r3, #1
 80097e8:	d0f9      	beq.n	80097de <__gethex+0x76>
 80097ea:	f7ff ffa7 	bl	800973c <__hexdig_fun>
 80097ee:	2301      	movs	r3, #1
 80097f0:	fab0 f480 	clz	r4, r0
 80097f4:	0964      	lsrs	r4, r4, #5
 80097f6:	4635      	mov	r5, r6
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	463a      	mov	r2, r7
 80097fc:	4616      	mov	r6, r2
 80097fe:	3201      	adds	r2, #1
 8009800:	7830      	ldrb	r0, [r6, #0]
 8009802:	f7ff ff9b 	bl	800973c <__hexdig_fun>
 8009806:	2800      	cmp	r0, #0
 8009808:	d1f8      	bne.n	80097fc <__gethex+0x94>
 800980a:	9901      	ldr	r1, [sp, #4]
 800980c:	4652      	mov	r2, sl
 800980e:	4630      	mov	r0, r6
 8009810:	f001 f9c6 	bl	800aba0 <strncmp>
 8009814:	b980      	cbnz	r0, 8009838 <__gethex+0xd0>
 8009816:	b94d      	cbnz	r5, 800982c <__gethex+0xc4>
 8009818:	eb06 050a 	add.w	r5, r6, sl
 800981c:	462a      	mov	r2, r5
 800981e:	4616      	mov	r6, r2
 8009820:	3201      	adds	r2, #1
 8009822:	7830      	ldrb	r0, [r6, #0]
 8009824:	f7ff ff8a 	bl	800973c <__hexdig_fun>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f8      	bne.n	800981e <__gethex+0xb6>
 800982c:	1bad      	subs	r5, r5, r6
 800982e:	00ad      	lsls	r5, r5, #2
 8009830:	e004      	b.n	800983c <__gethex+0xd4>
 8009832:	2400      	movs	r4, #0
 8009834:	4625      	mov	r5, r4
 8009836:	e7e0      	b.n	80097fa <__gethex+0x92>
 8009838:	2d00      	cmp	r5, #0
 800983a:	d1f7      	bne.n	800982c <__gethex+0xc4>
 800983c:	7833      	ldrb	r3, [r6, #0]
 800983e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009842:	2b50      	cmp	r3, #80	; 0x50
 8009844:	d13b      	bne.n	80098be <__gethex+0x156>
 8009846:	7873      	ldrb	r3, [r6, #1]
 8009848:	2b2b      	cmp	r3, #43	; 0x2b
 800984a:	d02c      	beq.n	80098a6 <__gethex+0x13e>
 800984c:	2b2d      	cmp	r3, #45	; 0x2d
 800984e:	d02e      	beq.n	80098ae <__gethex+0x146>
 8009850:	1c71      	adds	r1, r6, #1
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	7808      	ldrb	r0, [r1, #0]
 8009858:	f7ff ff70 	bl	800973c <__hexdig_fun>
 800985c:	1e43      	subs	r3, r0, #1
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b18      	cmp	r3, #24
 8009862:	d82c      	bhi.n	80098be <__gethex+0x156>
 8009864:	f1a0 0210 	sub.w	r2, r0, #16
 8009868:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800986c:	f7ff ff66 	bl	800973c <__hexdig_fun>
 8009870:	1e43      	subs	r3, r0, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b18      	cmp	r3, #24
 8009876:	d91d      	bls.n	80098b4 <__gethex+0x14c>
 8009878:	f1b9 0f00 	cmp.w	r9, #0
 800987c:	d000      	beq.n	8009880 <__gethex+0x118>
 800987e:	4252      	negs	r2, r2
 8009880:	4415      	add	r5, r2
 8009882:	f8cb 1000 	str.w	r1, [fp]
 8009886:	b1e4      	cbz	r4, 80098c2 <__gethex+0x15a>
 8009888:	9b00      	ldr	r3, [sp, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	bf14      	ite	ne
 800988e:	2700      	movne	r7, #0
 8009890:	2706      	moveq	r7, #6
 8009892:	4638      	mov	r0, r7
 8009894:	b009      	add	sp, #36	; 0x24
 8009896:	ecbd 8b02 	vpop	{d8}
 800989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989e:	463e      	mov	r6, r7
 80098a0:	4625      	mov	r5, r4
 80098a2:	2401      	movs	r4, #1
 80098a4:	e7ca      	b.n	800983c <__gethex+0xd4>
 80098a6:	f04f 0900 	mov.w	r9, #0
 80098aa:	1cb1      	adds	r1, r6, #2
 80098ac:	e7d3      	b.n	8009856 <__gethex+0xee>
 80098ae:	f04f 0901 	mov.w	r9, #1
 80098b2:	e7fa      	b.n	80098aa <__gethex+0x142>
 80098b4:	230a      	movs	r3, #10
 80098b6:	fb03 0202 	mla	r2, r3, r2, r0
 80098ba:	3a10      	subs	r2, #16
 80098bc:	e7d4      	b.n	8009868 <__gethex+0x100>
 80098be:	4631      	mov	r1, r6
 80098c0:	e7df      	b.n	8009882 <__gethex+0x11a>
 80098c2:	1bf3      	subs	r3, r6, r7
 80098c4:	3b01      	subs	r3, #1
 80098c6:	4621      	mov	r1, r4
 80098c8:	2b07      	cmp	r3, #7
 80098ca:	dc0b      	bgt.n	80098e4 <__gethex+0x17c>
 80098cc:	ee18 0a10 	vmov	r0, s16
 80098d0:	f000 fa7e 	bl	8009dd0 <_Balloc>
 80098d4:	4604      	mov	r4, r0
 80098d6:	b940      	cbnz	r0, 80098ea <__gethex+0x182>
 80098d8:	4b65      	ldr	r3, [pc, #404]	; (8009a70 <__gethex+0x308>)
 80098da:	4602      	mov	r2, r0
 80098dc:	21de      	movs	r1, #222	; 0xde
 80098de:	4865      	ldr	r0, [pc, #404]	; (8009a74 <__gethex+0x30c>)
 80098e0:	f001 f97e 	bl	800abe0 <__assert_func>
 80098e4:	3101      	adds	r1, #1
 80098e6:	105b      	asrs	r3, r3, #1
 80098e8:	e7ee      	b.n	80098c8 <__gethex+0x160>
 80098ea:	f100 0914 	add.w	r9, r0, #20
 80098ee:	f04f 0b00 	mov.w	fp, #0
 80098f2:	f1ca 0301 	rsb	r3, sl, #1
 80098f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80098fa:	f8cd b000 	str.w	fp, [sp]
 80098fe:	9306      	str	r3, [sp, #24]
 8009900:	42b7      	cmp	r7, r6
 8009902:	d340      	bcc.n	8009986 <__gethex+0x21e>
 8009904:	9802      	ldr	r0, [sp, #8]
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	f840 3b04 	str.w	r3, [r0], #4
 800990c:	eba0 0009 	sub.w	r0, r0, r9
 8009910:	1080      	asrs	r0, r0, #2
 8009912:	0146      	lsls	r6, r0, #5
 8009914:	6120      	str	r0, [r4, #16]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fb50 	bl	8009fbc <__hi0bits>
 800991c:	1a30      	subs	r0, r6, r0
 800991e:	f8d8 6000 	ldr.w	r6, [r8]
 8009922:	42b0      	cmp	r0, r6
 8009924:	dd63      	ble.n	80099ee <__gethex+0x286>
 8009926:	1b87      	subs	r7, r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	4620      	mov	r0, r4
 800992c:	f000 feea 	bl	800a704 <__any_on>
 8009930:	4682      	mov	sl, r0
 8009932:	b1a8      	cbz	r0, 8009960 <__gethex+0x1f8>
 8009934:	1e7b      	subs	r3, r7, #1
 8009936:	1159      	asrs	r1, r3, #5
 8009938:	f003 021f 	and.w	r2, r3, #31
 800993c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009940:	f04f 0a01 	mov.w	sl, #1
 8009944:	fa0a f202 	lsl.w	r2, sl, r2
 8009948:	420a      	tst	r2, r1
 800994a:	d009      	beq.n	8009960 <__gethex+0x1f8>
 800994c:	4553      	cmp	r3, sl
 800994e:	dd05      	ble.n	800995c <__gethex+0x1f4>
 8009950:	1eb9      	subs	r1, r7, #2
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fed6 	bl	800a704 <__any_on>
 8009958:	2800      	cmp	r0, #0
 800995a:	d145      	bne.n	80099e8 <__gethex+0x280>
 800995c:	f04f 0a02 	mov.w	sl, #2
 8009960:	4639      	mov	r1, r7
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff fe98 	bl	8009698 <rshift>
 8009968:	443d      	add	r5, r7
 800996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800996e:	42ab      	cmp	r3, r5
 8009970:	da4c      	bge.n	8009a0c <__gethex+0x2a4>
 8009972:	ee18 0a10 	vmov	r0, s16
 8009976:	4621      	mov	r1, r4
 8009978:	f000 fa6a 	bl	8009e50 <_Bfree>
 800997c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800997e:	2300      	movs	r3, #0
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	27a3      	movs	r7, #163	; 0xa3
 8009984:	e785      	b.n	8009892 <__gethex+0x12a>
 8009986:	1e73      	subs	r3, r6, #1
 8009988:	9a05      	ldr	r2, [sp, #20]
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009990:	4293      	cmp	r3, r2
 8009992:	d019      	beq.n	80099c8 <__gethex+0x260>
 8009994:	f1bb 0f20 	cmp.w	fp, #32
 8009998:	d107      	bne.n	80099aa <__gethex+0x242>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	9a00      	ldr	r2, [sp, #0]
 800999e:	f843 2b04 	str.w	r2, [r3], #4
 80099a2:	9302      	str	r3, [sp, #8]
 80099a4:	2300      	movs	r3, #0
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	469b      	mov	fp, r3
 80099aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099ae:	f7ff fec5 	bl	800973c <__hexdig_fun>
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	f000 000f 	and.w	r0, r0, #15
 80099b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80099bc:	4303      	orrs	r3, r0
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	f10b 0b04 	add.w	fp, fp, #4
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	e00d      	b.n	80099e4 <__gethex+0x27c>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	9a06      	ldr	r2, [sp, #24]
 80099cc:	4413      	add	r3, r2
 80099ce:	42bb      	cmp	r3, r7
 80099d0:	d3e0      	bcc.n	8009994 <__gethex+0x22c>
 80099d2:	4618      	mov	r0, r3
 80099d4:	9901      	ldr	r1, [sp, #4]
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	4652      	mov	r2, sl
 80099da:	f001 f8e1 	bl	800aba0 <strncmp>
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1d7      	bne.n	8009994 <__gethex+0x22c>
 80099e4:	461e      	mov	r6, r3
 80099e6:	e78b      	b.n	8009900 <__gethex+0x198>
 80099e8:	f04f 0a03 	mov.w	sl, #3
 80099ec:	e7b8      	b.n	8009960 <__gethex+0x1f8>
 80099ee:	da0a      	bge.n	8009a06 <__gethex+0x29e>
 80099f0:	1a37      	subs	r7, r6, r0
 80099f2:	4621      	mov	r1, r4
 80099f4:	ee18 0a10 	vmov	r0, s16
 80099f8:	463a      	mov	r2, r7
 80099fa:	f000 fc45 	bl	800a288 <__lshift>
 80099fe:	1bed      	subs	r5, r5, r7
 8009a00:	4604      	mov	r4, r0
 8009a02:	f100 0914 	add.w	r9, r0, #20
 8009a06:	f04f 0a00 	mov.w	sl, #0
 8009a0a:	e7ae      	b.n	800996a <__gethex+0x202>
 8009a0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a10:	42a8      	cmp	r0, r5
 8009a12:	dd72      	ble.n	8009afa <__gethex+0x392>
 8009a14:	1b45      	subs	r5, r0, r5
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	dc36      	bgt.n	8009a88 <__gethex+0x320>
 8009a1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d02a      	beq.n	8009a78 <__gethex+0x310>
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d02c      	beq.n	8009a80 <__gethex+0x318>
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d115      	bne.n	8009a56 <__gethex+0x2ee>
 8009a2a:	42ae      	cmp	r6, r5
 8009a2c:	d113      	bne.n	8009a56 <__gethex+0x2ee>
 8009a2e:	2e01      	cmp	r6, #1
 8009a30:	d10b      	bne.n	8009a4a <__gethex+0x2e2>
 8009a32:	9a04      	ldr	r2, [sp, #16]
 8009a34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	f8c9 3000 	str.w	r3, [r9]
 8009a42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a44:	2762      	movs	r7, #98	; 0x62
 8009a46:	601c      	str	r4, [r3, #0]
 8009a48:	e723      	b.n	8009892 <__gethex+0x12a>
 8009a4a:	1e71      	subs	r1, r6, #1
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 fe59 	bl	800a704 <__any_on>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1ed      	bne.n	8009a32 <__gethex+0x2ca>
 8009a56:	ee18 0a10 	vmov	r0, s16
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	f000 f9f8 	bl	8009e50 <_Bfree>
 8009a60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a62:	2300      	movs	r3, #0
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	2750      	movs	r7, #80	; 0x50
 8009a68:	e713      	b.n	8009892 <__gethex+0x12a>
 8009a6a:	bf00      	nop
 8009a6c:	0800ba40 	.word	0x0800ba40
 8009a70:	0800b9c4 	.word	0x0800b9c4
 8009a74:	0800b9d5 	.word	0x0800b9d5
 8009a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1eb      	bne.n	8009a56 <__gethex+0x2ee>
 8009a7e:	e7d8      	b.n	8009a32 <__gethex+0x2ca>
 8009a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d5      	bne.n	8009a32 <__gethex+0x2ca>
 8009a86:	e7e6      	b.n	8009a56 <__gethex+0x2ee>
 8009a88:	1e6f      	subs	r7, r5, #1
 8009a8a:	f1ba 0f00 	cmp.w	sl, #0
 8009a8e:	d131      	bne.n	8009af4 <__gethex+0x38c>
 8009a90:	b127      	cbz	r7, 8009a9c <__gethex+0x334>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fe35 	bl	800a704 <__any_on>
 8009a9a:	4682      	mov	sl, r0
 8009a9c:	117b      	asrs	r3, r7, #5
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009aa4:	f007 071f 	and.w	r7, r7, #31
 8009aa8:	fa01 f707 	lsl.w	r7, r1, r7
 8009aac:	421f      	tst	r7, r3
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	bf18      	it	ne
 8009ab4:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ab8:	1b76      	subs	r6, r6, r5
 8009aba:	f7ff fded 	bl	8009698 <rshift>
 8009abe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ac2:	2702      	movs	r7, #2
 8009ac4:	f1ba 0f00 	cmp.w	sl, #0
 8009ac8:	d048      	beq.n	8009b5c <__gethex+0x3f4>
 8009aca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d015      	beq.n	8009afe <__gethex+0x396>
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d017      	beq.n	8009b06 <__gethex+0x39e>
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d109      	bne.n	8009aee <__gethex+0x386>
 8009ada:	f01a 0f02 	tst.w	sl, #2
 8009ade:	d006      	beq.n	8009aee <__gethex+0x386>
 8009ae0:	f8d9 0000 	ldr.w	r0, [r9]
 8009ae4:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ae8:	f01a 0f01 	tst.w	sl, #1
 8009aec:	d10e      	bne.n	8009b0c <__gethex+0x3a4>
 8009aee:	f047 0710 	orr.w	r7, r7, #16
 8009af2:	e033      	b.n	8009b5c <__gethex+0x3f4>
 8009af4:	f04f 0a01 	mov.w	sl, #1
 8009af8:	e7d0      	b.n	8009a9c <__gethex+0x334>
 8009afa:	2701      	movs	r7, #1
 8009afc:	e7e2      	b.n	8009ac4 <__gethex+0x35c>
 8009afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b00:	f1c3 0301 	rsb	r3, r3, #1
 8009b04:	9315      	str	r3, [sp, #84]	; 0x54
 8009b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0f0      	beq.n	8009aee <__gethex+0x386>
 8009b0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b10:	f104 0314 	add.w	r3, r4, #20
 8009b14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b1c:	f04f 0c00 	mov.w	ip, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b2a:	d01c      	beq.n	8009b66 <__gethex+0x3fe>
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	6002      	str	r2, [r0, #0]
 8009b30:	2f02      	cmp	r7, #2
 8009b32:	f104 0314 	add.w	r3, r4, #20
 8009b36:	d13f      	bne.n	8009bb8 <__gethex+0x450>
 8009b38:	f8d8 2000 	ldr.w	r2, [r8]
 8009b3c:	3a01      	subs	r2, #1
 8009b3e:	42b2      	cmp	r2, r6
 8009b40:	d10a      	bne.n	8009b58 <__gethex+0x3f0>
 8009b42:	1171      	asrs	r1, r6, #5
 8009b44:	2201      	movs	r2, #1
 8009b46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b4a:	f006 061f 	and.w	r6, r6, #31
 8009b4e:	fa02 f606 	lsl.w	r6, r2, r6
 8009b52:	421e      	tst	r6, r3
 8009b54:	bf18      	it	ne
 8009b56:	4617      	movne	r7, r2
 8009b58:	f047 0720 	orr.w	r7, r7, #32
 8009b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b5e:	601c      	str	r4, [r3, #0]
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	601d      	str	r5, [r3, #0]
 8009b64:	e695      	b.n	8009892 <__gethex+0x12a>
 8009b66:	4299      	cmp	r1, r3
 8009b68:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b6c:	d8d8      	bhi.n	8009b20 <__gethex+0x3b8>
 8009b6e:	68a3      	ldr	r3, [r4, #8]
 8009b70:	459b      	cmp	fp, r3
 8009b72:	db19      	blt.n	8009ba8 <__gethex+0x440>
 8009b74:	6861      	ldr	r1, [r4, #4]
 8009b76:	ee18 0a10 	vmov	r0, s16
 8009b7a:	3101      	adds	r1, #1
 8009b7c:	f000 f928 	bl	8009dd0 <_Balloc>
 8009b80:	4681      	mov	r9, r0
 8009b82:	b918      	cbnz	r0, 8009b8c <__gethex+0x424>
 8009b84:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <__gethex+0x488>)
 8009b86:	4602      	mov	r2, r0
 8009b88:	2184      	movs	r1, #132	; 0x84
 8009b8a:	e6a8      	b.n	80098de <__gethex+0x176>
 8009b8c:	6922      	ldr	r2, [r4, #16]
 8009b8e:	3202      	adds	r2, #2
 8009b90:	f104 010c 	add.w	r1, r4, #12
 8009b94:	0092      	lsls	r2, r2, #2
 8009b96:	300c      	adds	r0, #12
 8009b98:	f000 f90c 	bl	8009db4 <memcpy>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	ee18 0a10 	vmov	r0, s16
 8009ba2:	f000 f955 	bl	8009e50 <_Bfree>
 8009ba6:	464c      	mov	r4, r9
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bb0:	6122      	str	r2, [r4, #16]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	615a      	str	r2, [r3, #20]
 8009bb6:	e7bb      	b.n	8009b30 <__gethex+0x3c8>
 8009bb8:	6922      	ldr	r2, [r4, #16]
 8009bba:	455a      	cmp	r2, fp
 8009bbc:	dd0b      	ble.n	8009bd6 <__gethex+0x46e>
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fd69 	bl	8009698 <rshift>
 8009bc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bca:	3501      	adds	r5, #1
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	f6ff aed0 	blt.w	8009972 <__gethex+0x20a>
 8009bd2:	2701      	movs	r7, #1
 8009bd4:	e7c0      	b.n	8009b58 <__gethex+0x3f0>
 8009bd6:	f016 061f 	ands.w	r6, r6, #31
 8009bda:	d0fa      	beq.n	8009bd2 <__gethex+0x46a>
 8009bdc:	449a      	add	sl, r3
 8009bde:	f1c6 0620 	rsb	r6, r6, #32
 8009be2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009be6:	f000 f9e9 	bl	8009fbc <__hi0bits>
 8009bea:	42b0      	cmp	r0, r6
 8009bec:	dbe7      	blt.n	8009bbe <__gethex+0x456>
 8009bee:	e7f0      	b.n	8009bd2 <__gethex+0x46a>
 8009bf0:	0800b9c4 	.word	0x0800b9c4

08009bf4 <L_shift>:
 8009bf4:	f1c2 0208 	rsb	r2, r2, #8
 8009bf8:	0092      	lsls	r2, r2, #2
 8009bfa:	b570      	push	{r4, r5, r6, lr}
 8009bfc:	f1c2 0620 	rsb	r6, r2, #32
 8009c00:	6843      	ldr	r3, [r0, #4]
 8009c02:	6804      	ldr	r4, [r0, #0]
 8009c04:	fa03 f506 	lsl.w	r5, r3, r6
 8009c08:	432c      	orrs	r4, r5
 8009c0a:	40d3      	lsrs	r3, r2
 8009c0c:	6004      	str	r4, [r0, #0]
 8009c0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c12:	4288      	cmp	r0, r1
 8009c14:	d3f4      	bcc.n	8009c00 <L_shift+0xc>
 8009c16:	bd70      	pop	{r4, r5, r6, pc}

08009c18 <__match>:
 8009c18:	b530      	push	{r4, r5, lr}
 8009c1a:	6803      	ldr	r3, [r0, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c22:	b914      	cbnz	r4, 8009c2a <__match+0x12>
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	2001      	movs	r0, #1
 8009c28:	bd30      	pop	{r4, r5, pc}
 8009c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c32:	2d19      	cmp	r5, #25
 8009c34:	bf98      	it	ls
 8009c36:	3220      	addls	r2, #32
 8009c38:	42a2      	cmp	r2, r4
 8009c3a:	d0f0      	beq.n	8009c1e <__match+0x6>
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7f3      	b.n	8009c28 <__match+0x10>

08009c40 <__hexnan>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	680b      	ldr	r3, [r1, #0]
 8009c46:	6801      	ldr	r1, [r0, #0]
 8009c48:	115e      	asrs	r6, r3, #5
 8009c4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c4e:	f013 031f 	ands.w	r3, r3, #31
 8009c52:	b087      	sub	sp, #28
 8009c54:	bf18      	it	ne
 8009c56:	3604      	addne	r6, #4
 8009c58:	2500      	movs	r5, #0
 8009c5a:	1f37      	subs	r7, r6, #4
 8009c5c:	4682      	mov	sl, r0
 8009c5e:	4690      	mov	r8, r2
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c66:	46b9      	mov	r9, r7
 8009c68:	463c      	mov	r4, r7
 8009c6a:	9502      	str	r5, [sp, #8]
 8009c6c:	46ab      	mov	fp, r5
 8009c6e:	784a      	ldrb	r2, [r1, #1]
 8009c70:	1c4b      	adds	r3, r1, #1
 8009c72:	9303      	str	r3, [sp, #12]
 8009c74:	b342      	cbz	r2, 8009cc8 <__hexnan+0x88>
 8009c76:	4610      	mov	r0, r2
 8009c78:	9105      	str	r1, [sp, #20]
 8009c7a:	9204      	str	r2, [sp, #16]
 8009c7c:	f7ff fd5e 	bl	800973c <__hexdig_fun>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d14f      	bne.n	8009d24 <__hexnan+0xe4>
 8009c84:	9a04      	ldr	r2, [sp, #16]
 8009c86:	9905      	ldr	r1, [sp, #20]
 8009c88:	2a20      	cmp	r2, #32
 8009c8a:	d818      	bhi.n	8009cbe <__hexnan+0x7e>
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	459b      	cmp	fp, r3
 8009c90:	dd13      	ble.n	8009cba <__hexnan+0x7a>
 8009c92:	454c      	cmp	r4, r9
 8009c94:	d206      	bcs.n	8009ca4 <__hexnan+0x64>
 8009c96:	2d07      	cmp	r5, #7
 8009c98:	dc04      	bgt.n	8009ca4 <__hexnan+0x64>
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff ffa8 	bl	8009bf4 <L_shift>
 8009ca4:	4544      	cmp	r4, r8
 8009ca6:	d950      	bls.n	8009d4a <__hexnan+0x10a>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f1a4 0904 	sub.w	r9, r4, #4
 8009cae:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cb2:	f8cd b008 	str.w	fp, [sp, #8]
 8009cb6:	464c      	mov	r4, r9
 8009cb8:	461d      	mov	r5, r3
 8009cba:	9903      	ldr	r1, [sp, #12]
 8009cbc:	e7d7      	b.n	8009c6e <__hexnan+0x2e>
 8009cbe:	2a29      	cmp	r2, #41	; 0x29
 8009cc0:	d156      	bne.n	8009d70 <__hexnan+0x130>
 8009cc2:	3102      	adds	r1, #2
 8009cc4:	f8ca 1000 	str.w	r1, [sl]
 8009cc8:	f1bb 0f00 	cmp.w	fp, #0
 8009ccc:	d050      	beq.n	8009d70 <__hexnan+0x130>
 8009cce:	454c      	cmp	r4, r9
 8009cd0:	d206      	bcs.n	8009ce0 <__hexnan+0xa0>
 8009cd2:	2d07      	cmp	r5, #7
 8009cd4:	dc04      	bgt.n	8009ce0 <__hexnan+0xa0>
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4649      	mov	r1, r9
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff ff8a 	bl	8009bf4 <L_shift>
 8009ce0:	4544      	cmp	r4, r8
 8009ce2:	d934      	bls.n	8009d4e <__hexnan+0x10e>
 8009ce4:	f1a8 0204 	sub.w	r2, r8, #4
 8009ce8:	4623      	mov	r3, r4
 8009cea:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cee:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cf2:	429f      	cmp	r7, r3
 8009cf4:	d2f9      	bcs.n	8009cea <__hexnan+0xaa>
 8009cf6:	1b3b      	subs	r3, r7, r4
 8009cf8:	f023 0303 	bic.w	r3, r3, #3
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	3401      	adds	r4, #1
 8009d00:	3e03      	subs	r6, #3
 8009d02:	42b4      	cmp	r4, r6
 8009d04:	bf88      	it	hi
 8009d06:	2304      	movhi	r3, #4
 8009d08:	4443      	add	r3, r8
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f843 2b04 	str.w	r2, [r3], #4
 8009d10:	429f      	cmp	r7, r3
 8009d12:	d2fb      	bcs.n	8009d0c <__hexnan+0xcc>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	b91b      	cbnz	r3, 8009d20 <__hexnan+0xe0>
 8009d18:	4547      	cmp	r7, r8
 8009d1a:	d127      	bne.n	8009d6c <__hexnan+0x12c>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	2005      	movs	r0, #5
 8009d22:	e026      	b.n	8009d72 <__hexnan+0x132>
 8009d24:	3501      	adds	r5, #1
 8009d26:	2d08      	cmp	r5, #8
 8009d28:	f10b 0b01 	add.w	fp, fp, #1
 8009d2c:	dd06      	ble.n	8009d3c <__hexnan+0xfc>
 8009d2e:	4544      	cmp	r4, r8
 8009d30:	d9c3      	bls.n	8009cba <__hexnan+0x7a>
 8009d32:	2300      	movs	r3, #0
 8009d34:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d38:	2501      	movs	r5, #1
 8009d3a:	3c04      	subs	r4, #4
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	f000 000f 	and.w	r0, r0, #15
 8009d42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d46:	6022      	str	r2, [r4, #0]
 8009d48:	e7b7      	b.n	8009cba <__hexnan+0x7a>
 8009d4a:	2508      	movs	r5, #8
 8009d4c:	e7b5      	b.n	8009cba <__hexnan+0x7a>
 8009d4e:	9b01      	ldr	r3, [sp, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0df      	beq.n	8009d14 <__hexnan+0xd4>
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	f1c3 0320 	rsb	r3, r3, #32
 8009d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d64:	401a      	ands	r2, r3
 8009d66:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d6a:	e7d3      	b.n	8009d14 <__hexnan+0xd4>
 8009d6c:	3f04      	subs	r7, #4
 8009d6e:	e7d1      	b.n	8009d14 <__hexnan+0xd4>
 8009d70:	2004      	movs	r0, #4
 8009d72:	b007      	add	sp, #28
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d78 <_localeconv_r>:
 8009d78:	4800      	ldr	r0, [pc, #0]	; (8009d7c <_localeconv_r+0x4>)
 8009d7a:	4770      	bx	lr
 8009d7c:	20000164 	.word	0x20000164

08009d80 <malloc>:
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <malloc+0xc>)
 8009d82:	4601      	mov	r1, r0
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	f000 bd3d 	b.w	800a804 <_malloc_r>
 8009d8a:	bf00      	nop
 8009d8c:	2000000c 	.word	0x2000000c

08009d90 <__ascii_mbtowc>:
 8009d90:	b082      	sub	sp, #8
 8009d92:	b901      	cbnz	r1, 8009d96 <__ascii_mbtowc+0x6>
 8009d94:	a901      	add	r1, sp, #4
 8009d96:	b142      	cbz	r2, 8009daa <__ascii_mbtowc+0x1a>
 8009d98:	b14b      	cbz	r3, 8009dae <__ascii_mbtowc+0x1e>
 8009d9a:	7813      	ldrb	r3, [r2, #0]
 8009d9c:	600b      	str	r3, [r1, #0]
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	1e10      	subs	r0, r2, #0
 8009da2:	bf18      	it	ne
 8009da4:	2001      	movne	r0, #1
 8009da6:	b002      	add	sp, #8
 8009da8:	4770      	bx	lr
 8009daa:	4610      	mov	r0, r2
 8009dac:	e7fb      	b.n	8009da6 <__ascii_mbtowc+0x16>
 8009dae:	f06f 0001 	mvn.w	r0, #1
 8009db2:	e7f8      	b.n	8009da6 <__ascii_mbtowc+0x16>

08009db4 <memcpy>:
 8009db4:	440a      	add	r2, r1
 8009db6:	4291      	cmp	r1, r2
 8009db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dbc:	d100      	bne.n	8009dc0 <memcpy+0xc>
 8009dbe:	4770      	bx	lr
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	d1f9      	bne.n	8009dc2 <memcpy+0xe>
 8009dce:	bd10      	pop	{r4, pc}

08009dd0 <_Balloc>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	b976      	cbnz	r6, 8009df8 <_Balloc+0x28>
 8009dda:	2010      	movs	r0, #16
 8009ddc:	f7ff ffd0 	bl	8009d80 <malloc>
 8009de0:	4602      	mov	r2, r0
 8009de2:	6260      	str	r0, [r4, #36]	; 0x24
 8009de4:	b920      	cbnz	r0, 8009df0 <_Balloc+0x20>
 8009de6:	4b18      	ldr	r3, [pc, #96]	; (8009e48 <_Balloc+0x78>)
 8009de8:	4818      	ldr	r0, [pc, #96]	; (8009e4c <_Balloc+0x7c>)
 8009dea:	2166      	movs	r1, #102	; 0x66
 8009dec:	f000 fef8 	bl	800abe0 <__assert_func>
 8009df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009df4:	6006      	str	r6, [r0, #0]
 8009df6:	60c6      	str	r6, [r0, #12]
 8009df8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dfa:	68f3      	ldr	r3, [r6, #12]
 8009dfc:	b183      	cbz	r3, 8009e20 <_Balloc+0x50>
 8009dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e06:	b9b8      	cbnz	r0, 8009e38 <_Balloc+0x68>
 8009e08:	2101      	movs	r1, #1
 8009e0a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e0e:	1d72      	adds	r2, r6, #5
 8009e10:	0092      	lsls	r2, r2, #2
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fc97 	bl	800a746 <_calloc_r>
 8009e18:	b160      	cbz	r0, 8009e34 <_Balloc+0x64>
 8009e1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e1e:	e00e      	b.n	8009e3e <_Balloc+0x6e>
 8009e20:	2221      	movs	r2, #33	; 0x21
 8009e22:	2104      	movs	r1, #4
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fc8e 	bl	800a746 <_calloc_r>
 8009e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e2c:	60f0      	str	r0, [r6, #12]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e4      	bne.n	8009dfe <_Balloc+0x2e>
 8009e34:	2000      	movs	r0, #0
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	6802      	ldr	r2, [r0, #0]
 8009e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e44:	e7f7      	b.n	8009e36 <_Balloc+0x66>
 8009e46:	bf00      	nop
 8009e48:	0800b94e 	.word	0x0800b94e
 8009e4c:	0800ba54 	.word	0x0800ba54

08009e50 <_Bfree>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b976      	cbnz	r6, 8009e78 <_Bfree+0x28>
 8009e5a:	2010      	movs	r0, #16
 8009e5c:	f7ff ff90 	bl	8009d80 <malloc>
 8009e60:	4602      	mov	r2, r0
 8009e62:	6268      	str	r0, [r5, #36]	; 0x24
 8009e64:	b920      	cbnz	r0, 8009e70 <_Bfree+0x20>
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <_Bfree+0x3c>)
 8009e68:	4809      	ldr	r0, [pc, #36]	; (8009e90 <_Bfree+0x40>)
 8009e6a:	218a      	movs	r1, #138	; 0x8a
 8009e6c:	f000 feb8 	bl	800abe0 <__assert_func>
 8009e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e74:	6006      	str	r6, [r0, #0]
 8009e76:	60c6      	str	r6, [r0, #12]
 8009e78:	b13c      	cbz	r4, 8009e8a <_Bfree+0x3a>
 8009e7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e7c:	6862      	ldr	r2, [r4, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e84:	6021      	str	r1, [r4, #0]
 8009e86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	0800b94e 	.word	0x0800b94e
 8009e90:	0800ba54 	.word	0x0800ba54

08009e94 <__multadd>:
 8009e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e98:	690e      	ldr	r6, [r1, #16]
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	f101 0014 	add.w	r0, r1, #20
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6805      	ldr	r5, [r0, #0]
 8009ea8:	b2a9      	uxth	r1, r5
 8009eaa:	fb02 8101 	mla	r1, r2, r1, r8
 8009eae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009eb2:	0c2d      	lsrs	r5, r5, #16
 8009eb4:	fb02 c505 	mla	r5, r2, r5, ip
 8009eb8:	b289      	uxth	r1, r1
 8009eba:	3301      	adds	r3, #1
 8009ebc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ec0:	429e      	cmp	r6, r3
 8009ec2:	f840 1b04 	str.w	r1, [r0], #4
 8009ec6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009eca:	dcec      	bgt.n	8009ea6 <__multadd+0x12>
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	d022      	beq.n	8009f18 <__multadd+0x84>
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	42b3      	cmp	r3, r6
 8009ed6:	dc19      	bgt.n	8009f0c <__multadd+0x78>
 8009ed8:	6861      	ldr	r1, [r4, #4]
 8009eda:	4638      	mov	r0, r7
 8009edc:	3101      	adds	r1, #1
 8009ede:	f7ff ff77 	bl	8009dd0 <_Balloc>
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	b928      	cbnz	r0, 8009ef2 <__multadd+0x5e>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <__multadd+0x8c>)
 8009eea:	480e      	ldr	r0, [pc, #56]	; (8009f24 <__multadd+0x90>)
 8009eec:	21b5      	movs	r1, #181	; 0xb5
 8009eee:	f000 fe77 	bl	800abe0 <__assert_func>
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	3202      	adds	r2, #2
 8009ef6:	f104 010c 	add.w	r1, r4, #12
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	300c      	adds	r0, #12
 8009efe:	f7ff ff59 	bl	8009db4 <memcpy>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff ffa3 	bl	8009e50 <_Bfree>
 8009f0a:	462c      	mov	r4, r5
 8009f0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f10:	3601      	adds	r6, #1
 8009f12:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f16:	6126      	str	r6, [r4, #16]
 8009f18:	4620      	mov	r0, r4
 8009f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800b9c4 	.word	0x0800b9c4
 8009f24:	0800ba54 	.word	0x0800ba54

08009f28 <__s2b>:
 8009f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4615      	mov	r5, r2
 8009f30:	461f      	mov	r7, r3
 8009f32:	2209      	movs	r2, #9
 8009f34:	3308      	adds	r3, #8
 8009f36:	4606      	mov	r6, r0
 8009f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	2201      	movs	r2, #1
 8009f40:	429a      	cmp	r2, r3
 8009f42:	db09      	blt.n	8009f58 <__s2b+0x30>
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff ff43 	bl	8009dd0 <_Balloc>
 8009f4a:	b940      	cbnz	r0, 8009f5e <__s2b+0x36>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	4b19      	ldr	r3, [pc, #100]	; (8009fb4 <__s2b+0x8c>)
 8009f50:	4819      	ldr	r0, [pc, #100]	; (8009fb8 <__s2b+0x90>)
 8009f52:	21ce      	movs	r1, #206	; 0xce
 8009f54:	f000 fe44 	bl	800abe0 <__assert_func>
 8009f58:	0052      	lsls	r2, r2, #1
 8009f5a:	3101      	adds	r1, #1
 8009f5c:	e7f0      	b.n	8009f40 <__s2b+0x18>
 8009f5e:	9b08      	ldr	r3, [sp, #32]
 8009f60:	6143      	str	r3, [r0, #20]
 8009f62:	2d09      	cmp	r5, #9
 8009f64:	f04f 0301 	mov.w	r3, #1
 8009f68:	6103      	str	r3, [r0, #16]
 8009f6a:	dd16      	ble.n	8009f9a <__s2b+0x72>
 8009f6c:	f104 0909 	add.w	r9, r4, #9
 8009f70:	46c8      	mov	r8, r9
 8009f72:	442c      	add	r4, r5
 8009f74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f78:	4601      	mov	r1, r0
 8009f7a:	3b30      	subs	r3, #48	; 0x30
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7ff ff88 	bl	8009e94 <__multadd>
 8009f84:	45a0      	cmp	r8, r4
 8009f86:	d1f5      	bne.n	8009f74 <__s2b+0x4c>
 8009f88:	f1a5 0408 	sub.w	r4, r5, #8
 8009f8c:	444c      	add	r4, r9
 8009f8e:	1b2d      	subs	r5, r5, r4
 8009f90:	1963      	adds	r3, r4, r5
 8009f92:	42bb      	cmp	r3, r7
 8009f94:	db04      	blt.n	8009fa0 <__s2b+0x78>
 8009f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	340a      	adds	r4, #10
 8009f9c:	2509      	movs	r5, #9
 8009f9e:	e7f6      	b.n	8009f8e <__s2b+0x66>
 8009fa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	3b30      	subs	r3, #48	; 0x30
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff72 	bl	8009e94 <__multadd>
 8009fb0:	e7ee      	b.n	8009f90 <__s2b+0x68>
 8009fb2:	bf00      	nop
 8009fb4:	0800b9c4 	.word	0x0800b9c4
 8009fb8:	0800ba54 	.word	0x0800ba54

08009fbc <__hi0bits>:
 8009fbc:	0c03      	lsrs	r3, r0, #16
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	b9d3      	cbnz	r3, 8009ff8 <__hi0bits+0x3c>
 8009fc2:	0400      	lsls	r0, r0, #16
 8009fc4:	2310      	movs	r3, #16
 8009fc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fca:	bf04      	itt	eq
 8009fcc:	0200      	lsleq	r0, r0, #8
 8009fce:	3308      	addeq	r3, #8
 8009fd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fd4:	bf04      	itt	eq
 8009fd6:	0100      	lsleq	r0, r0, #4
 8009fd8:	3304      	addeq	r3, #4
 8009fda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fde:	bf04      	itt	eq
 8009fe0:	0080      	lsleq	r0, r0, #2
 8009fe2:	3302      	addeq	r3, #2
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	db05      	blt.n	8009ff4 <__hi0bits+0x38>
 8009fe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fec:	f103 0301 	add.w	r3, r3, #1
 8009ff0:	bf08      	it	eq
 8009ff2:	2320      	moveq	r3, #32
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	4770      	bx	lr
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e7e4      	b.n	8009fc6 <__hi0bits+0xa>

08009ffc <__lo0bits>:
 8009ffc:	6803      	ldr	r3, [r0, #0]
 8009ffe:	f013 0207 	ands.w	r2, r3, #7
 800a002:	4601      	mov	r1, r0
 800a004:	d00b      	beq.n	800a01e <__lo0bits+0x22>
 800a006:	07da      	lsls	r2, r3, #31
 800a008:	d424      	bmi.n	800a054 <__lo0bits+0x58>
 800a00a:	0798      	lsls	r0, r3, #30
 800a00c:	bf49      	itett	mi
 800a00e:	085b      	lsrmi	r3, r3, #1
 800a010:	089b      	lsrpl	r3, r3, #2
 800a012:	2001      	movmi	r0, #1
 800a014:	600b      	strmi	r3, [r1, #0]
 800a016:	bf5c      	itt	pl
 800a018:	600b      	strpl	r3, [r1, #0]
 800a01a:	2002      	movpl	r0, #2
 800a01c:	4770      	bx	lr
 800a01e:	b298      	uxth	r0, r3
 800a020:	b9b0      	cbnz	r0, 800a050 <__lo0bits+0x54>
 800a022:	0c1b      	lsrs	r3, r3, #16
 800a024:	2010      	movs	r0, #16
 800a026:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a02a:	bf04      	itt	eq
 800a02c:	0a1b      	lsreq	r3, r3, #8
 800a02e:	3008      	addeq	r0, #8
 800a030:	071a      	lsls	r2, r3, #28
 800a032:	bf04      	itt	eq
 800a034:	091b      	lsreq	r3, r3, #4
 800a036:	3004      	addeq	r0, #4
 800a038:	079a      	lsls	r2, r3, #30
 800a03a:	bf04      	itt	eq
 800a03c:	089b      	lsreq	r3, r3, #2
 800a03e:	3002      	addeq	r0, #2
 800a040:	07da      	lsls	r2, r3, #31
 800a042:	d403      	bmi.n	800a04c <__lo0bits+0x50>
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	f100 0001 	add.w	r0, r0, #1
 800a04a:	d005      	beq.n	800a058 <__lo0bits+0x5c>
 800a04c:	600b      	str	r3, [r1, #0]
 800a04e:	4770      	bx	lr
 800a050:	4610      	mov	r0, r2
 800a052:	e7e8      	b.n	800a026 <__lo0bits+0x2a>
 800a054:	2000      	movs	r0, #0
 800a056:	4770      	bx	lr
 800a058:	2020      	movs	r0, #32
 800a05a:	4770      	bx	lr

0800a05c <__i2b>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	460c      	mov	r4, r1
 800a060:	2101      	movs	r1, #1
 800a062:	f7ff feb5 	bl	8009dd0 <_Balloc>
 800a066:	4602      	mov	r2, r0
 800a068:	b928      	cbnz	r0, 800a076 <__i2b+0x1a>
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <__i2b+0x24>)
 800a06c:	4805      	ldr	r0, [pc, #20]	; (800a084 <__i2b+0x28>)
 800a06e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a072:	f000 fdb5 	bl	800abe0 <__assert_func>
 800a076:	2301      	movs	r3, #1
 800a078:	6144      	str	r4, [r0, #20]
 800a07a:	6103      	str	r3, [r0, #16]
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	0800b9c4 	.word	0x0800b9c4
 800a084:	0800ba54 	.word	0x0800ba54

0800a088 <__multiply>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4614      	mov	r4, r2
 800a08e:	690a      	ldr	r2, [r1, #16]
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	bfb8      	it	lt
 800a096:	460b      	movlt	r3, r1
 800a098:	460d      	mov	r5, r1
 800a09a:	bfbc      	itt	lt
 800a09c:	4625      	movlt	r5, r4
 800a09e:	461c      	movlt	r4, r3
 800a0a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a0a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a0a8:	68ab      	ldr	r3, [r5, #8]
 800a0aa:	6869      	ldr	r1, [r5, #4]
 800a0ac:	eb0a 0709 	add.w	r7, sl, r9
 800a0b0:	42bb      	cmp	r3, r7
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	bfb8      	it	lt
 800a0b6:	3101      	addlt	r1, #1
 800a0b8:	f7ff fe8a 	bl	8009dd0 <_Balloc>
 800a0bc:	b930      	cbnz	r0, 800a0cc <__multiply+0x44>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	4b42      	ldr	r3, [pc, #264]	; (800a1cc <__multiply+0x144>)
 800a0c2:	4843      	ldr	r0, [pc, #268]	; (800a1d0 <__multiply+0x148>)
 800a0c4:	f240 115d 	movw	r1, #349	; 0x15d
 800a0c8:	f000 fd8a 	bl	800abe0 <__assert_func>
 800a0cc:	f100 0614 	add.w	r6, r0, #20
 800a0d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a0d4:	4633      	mov	r3, r6
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4543      	cmp	r3, r8
 800a0da:	d31e      	bcc.n	800a11a <__multiply+0x92>
 800a0dc:	f105 0c14 	add.w	ip, r5, #20
 800a0e0:	f104 0314 	add.w	r3, r4, #20
 800a0e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a0e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a0ec:	9202      	str	r2, [sp, #8]
 800a0ee:	ebac 0205 	sub.w	r2, ip, r5
 800a0f2:	3a15      	subs	r2, #21
 800a0f4:	f022 0203 	bic.w	r2, r2, #3
 800a0f8:	3204      	adds	r2, #4
 800a0fa:	f105 0115 	add.w	r1, r5, #21
 800a0fe:	458c      	cmp	ip, r1
 800a100:	bf38      	it	cc
 800a102:	2204      	movcc	r2, #4
 800a104:	9201      	str	r2, [sp, #4]
 800a106:	9a02      	ldr	r2, [sp, #8]
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d808      	bhi.n	800a120 <__multiply+0x98>
 800a10e:	2f00      	cmp	r7, #0
 800a110:	dc55      	bgt.n	800a1be <__multiply+0x136>
 800a112:	6107      	str	r7, [r0, #16]
 800a114:	b005      	add	sp, #20
 800a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11a:	f843 2b04 	str.w	r2, [r3], #4
 800a11e:	e7db      	b.n	800a0d8 <__multiply+0x50>
 800a120:	f8b3 a000 	ldrh.w	sl, [r3]
 800a124:	f1ba 0f00 	cmp.w	sl, #0
 800a128:	d020      	beq.n	800a16c <__multiply+0xe4>
 800a12a:	f105 0e14 	add.w	lr, r5, #20
 800a12e:	46b1      	mov	r9, r6
 800a130:	2200      	movs	r2, #0
 800a132:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a136:	f8d9 b000 	ldr.w	fp, [r9]
 800a13a:	b2a1      	uxth	r1, r4
 800a13c:	fa1f fb8b 	uxth.w	fp, fp
 800a140:	fb0a b101 	mla	r1, sl, r1, fp
 800a144:	4411      	add	r1, r2
 800a146:	f8d9 2000 	ldr.w	r2, [r9]
 800a14a:	0c24      	lsrs	r4, r4, #16
 800a14c:	0c12      	lsrs	r2, r2, #16
 800a14e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a152:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a156:	b289      	uxth	r1, r1
 800a158:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a15c:	45f4      	cmp	ip, lr
 800a15e:	f849 1b04 	str.w	r1, [r9], #4
 800a162:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a166:	d8e4      	bhi.n	800a132 <__multiply+0xaa>
 800a168:	9901      	ldr	r1, [sp, #4]
 800a16a:	5072      	str	r2, [r6, r1]
 800a16c:	9a03      	ldr	r2, [sp, #12]
 800a16e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a172:	3304      	adds	r3, #4
 800a174:	f1b9 0f00 	cmp.w	r9, #0
 800a178:	d01f      	beq.n	800a1ba <__multiply+0x132>
 800a17a:	6834      	ldr	r4, [r6, #0]
 800a17c:	f105 0114 	add.w	r1, r5, #20
 800a180:	46b6      	mov	lr, r6
 800a182:	f04f 0a00 	mov.w	sl, #0
 800a186:	880a      	ldrh	r2, [r1, #0]
 800a188:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a18c:	fb09 b202 	mla	r2, r9, r2, fp
 800a190:	4492      	add	sl, r2
 800a192:	b2a4      	uxth	r4, r4
 800a194:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a198:	f84e 4b04 	str.w	r4, [lr], #4
 800a19c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1a0:	f8be 2000 	ldrh.w	r2, [lr]
 800a1a4:	0c24      	lsrs	r4, r4, #16
 800a1a6:	fb09 2404 	mla	r4, r9, r4, r2
 800a1aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a1ae:	458c      	cmp	ip, r1
 800a1b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1b4:	d8e7      	bhi.n	800a186 <__multiply+0xfe>
 800a1b6:	9a01      	ldr	r2, [sp, #4]
 800a1b8:	50b4      	str	r4, [r6, r2]
 800a1ba:	3604      	adds	r6, #4
 800a1bc:	e7a3      	b.n	800a106 <__multiply+0x7e>
 800a1be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1a5      	bne.n	800a112 <__multiply+0x8a>
 800a1c6:	3f01      	subs	r7, #1
 800a1c8:	e7a1      	b.n	800a10e <__multiply+0x86>
 800a1ca:	bf00      	nop
 800a1cc:	0800b9c4 	.word	0x0800b9c4
 800a1d0:	0800ba54 	.word	0x0800ba54

0800a1d4 <__pow5mult>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	4615      	mov	r5, r2
 800a1da:	f012 0203 	ands.w	r2, r2, #3
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	d007      	beq.n	800a1f4 <__pow5mult+0x20>
 800a1e4:	4c25      	ldr	r4, [pc, #148]	; (800a27c <__pow5mult+0xa8>)
 800a1e6:	3a01      	subs	r2, #1
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ee:	f7ff fe51 	bl	8009e94 <__multadd>
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	10ad      	asrs	r5, r5, #2
 800a1f6:	d03d      	beq.n	800a274 <__pow5mult+0xa0>
 800a1f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1fa:	b97c      	cbnz	r4, 800a21c <__pow5mult+0x48>
 800a1fc:	2010      	movs	r0, #16
 800a1fe:	f7ff fdbf 	bl	8009d80 <malloc>
 800a202:	4602      	mov	r2, r0
 800a204:	6270      	str	r0, [r6, #36]	; 0x24
 800a206:	b928      	cbnz	r0, 800a214 <__pow5mult+0x40>
 800a208:	4b1d      	ldr	r3, [pc, #116]	; (800a280 <__pow5mult+0xac>)
 800a20a:	481e      	ldr	r0, [pc, #120]	; (800a284 <__pow5mult+0xb0>)
 800a20c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a210:	f000 fce6 	bl	800abe0 <__assert_func>
 800a214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a218:	6004      	str	r4, [r0, #0]
 800a21a:	60c4      	str	r4, [r0, #12]
 800a21c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a224:	b94c      	cbnz	r4, 800a23a <__pow5mult+0x66>
 800a226:	f240 2171 	movw	r1, #625	; 0x271
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7ff ff16 	bl	800a05c <__i2b>
 800a230:	2300      	movs	r3, #0
 800a232:	f8c8 0008 	str.w	r0, [r8, #8]
 800a236:	4604      	mov	r4, r0
 800a238:	6003      	str	r3, [r0, #0]
 800a23a:	f04f 0900 	mov.w	r9, #0
 800a23e:	07eb      	lsls	r3, r5, #31
 800a240:	d50a      	bpl.n	800a258 <__pow5mult+0x84>
 800a242:	4639      	mov	r1, r7
 800a244:	4622      	mov	r2, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff ff1e 	bl	800a088 <__multiply>
 800a24c:	4639      	mov	r1, r7
 800a24e:	4680      	mov	r8, r0
 800a250:	4630      	mov	r0, r6
 800a252:	f7ff fdfd 	bl	8009e50 <_Bfree>
 800a256:	4647      	mov	r7, r8
 800a258:	106d      	asrs	r5, r5, #1
 800a25a:	d00b      	beq.n	800a274 <__pow5mult+0xa0>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	b938      	cbnz	r0, 800a270 <__pow5mult+0x9c>
 800a260:	4622      	mov	r2, r4
 800a262:	4621      	mov	r1, r4
 800a264:	4630      	mov	r0, r6
 800a266:	f7ff ff0f 	bl	800a088 <__multiply>
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	f8c0 9000 	str.w	r9, [r0]
 800a270:	4604      	mov	r4, r0
 800a272:	e7e4      	b.n	800a23e <__pow5mult+0x6a>
 800a274:	4638      	mov	r0, r7
 800a276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27a:	bf00      	nop
 800a27c:	0800bba8 	.word	0x0800bba8
 800a280:	0800b94e 	.word	0x0800b94e
 800a284:	0800ba54 	.word	0x0800ba54

0800a288 <__lshift>:
 800a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a28c:	460c      	mov	r4, r1
 800a28e:	6849      	ldr	r1, [r1, #4]
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	4607      	mov	r7, r0
 800a29a:	4691      	mov	r9, r2
 800a29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2a0:	f108 0601 	add.w	r6, r8, #1
 800a2a4:	42b3      	cmp	r3, r6
 800a2a6:	db0b      	blt.n	800a2c0 <__lshift+0x38>
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff fd91 	bl	8009dd0 <_Balloc>
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	b948      	cbnz	r0, 800a2c6 <__lshift+0x3e>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b28      	ldr	r3, [pc, #160]	; (800a358 <__lshift+0xd0>)
 800a2b6:	4829      	ldr	r0, [pc, #164]	; (800a35c <__lshift+0xd4>)
 800a2b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2bc:	f000 fc90 	bl	800abe0 <__assert_func>
 800a2c0:	3101      	adds	r1, #1
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	e7ee      	b.n	800a2a4 <__lshift+0x1c>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f100 0114 	add.w	r1, r0, #20
 800a2cc:	f100 0210 	add.w	r2, r0, #16
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	4553      	cmp	r3, sl
 800a2d4:	db33      	blt.n	800a33e <__lshift+0xb6>
 800a2d6:	6920      	ldr	r0, [r4, #16]
 800a2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2dc:	f104 0314 	add.w	r3, r4, #20
 800a2e0:	f019 091f 	ands.w	r9, r9, #31
 800a2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2ec:	d02b      	beq.n	800a346 <__lshift+0xbe>
 800a2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a2f2:	468a      	mov	sl, r1
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a2fc:	4302      	orrs	r2, r0
 800a2fe:	f84a 2b04 	str.w	r2, [sl], #4
 800a302:	f853 2b04 	ldr.w	r2, [r3], #4
 800a306:	459c      	cmp	ip, r3
 800a308:	fa22 f20e 	lsr.w	r2, r2, lr
 800a30c:	d8f3      	bhi.n	800a2f6 <__lshift+0x6e>
 800a30e:	ebac 0304 	sub.w	r3, ip, r4
 800a312:	3b15      	subs	r3, #21
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3304      	adds	r3, #4
 800a31a:	f104 0015 	add.w	r0, r4, #21
 800a31e:	4584      	cmp	ip, r0
 800a320:	bf38      	it	cc
 800a322:	2304      	movcc	r3, #4
 800a324:	50ca      	str	r2, [r1, r3]
 800a326:	b10a      	cbz	r2, 800a32c <__lshift+0xa4>
 800a328:	f108 0602 	add.w	r6, r8, #2
 800a32c:	3e01      	subs	r6, #1
 800a32e:	4638      	mov	r0, r7
 800a330:	612e      	str	r6, [r5, #16]
 800a332:	4621      	mov	r1, r4
 800a334:	f7ff fd8c 	bl	8009e50 <_Bfree>
 800a338:	4628      	mov	r0, r5
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a342:	3301      	adds	r3, #1
 800a344:	e7c5      	b.n	800a2d2 <__lshift+0x4a>
 800a346:	3904      	subs	r1, #4
 800a348:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a350:	459c      	cmp	ip, r3
 800a352:	d8f9      	bhi.n	800a348 <__lshift+0xc0>
 800a354:	e7ea      	b.n	800a32c <__lshift+0xa4>
 800a356:	bf00      	nop
 800a358:	0800b9c4 	.word	0x0800b9c4
 800a35c:	0800ba54 	.word	0x0800ba54

0800a360 <__mcmp>:
 800a360:	b530      	push	{r4, r5, lr}
 800a362:	6902      	ldr	r2, [r0, #16]
 800a364:	690c      	ldr	r4, [r1, #16]
 800a366:	1b12      	subs	r2, r2, r4
 800a368:	d10e      	bne.n	800a388 <__mcmp+0x28>
 800a36a:	f100 0314 	add.w	r3, r0, #20
 800a36e:	3114      	adds	r1, #20
 800a370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a37c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a380:	42a5      	cmp	r5, r4
 800a382:	d003      	beq.n	800a38c <__mcmp+0x2c>
 800a384:	d305      	bcc.n	800a392 <__mcmp+0x32>
 800a386:	2201      	movs	r2, #1
 800a388:	4610      	mov	r0, r2
 800a38a:	bd30      	pop	{r4, r5, pc}
 800a38c:	4283      	cmp	r3, r0
 800a38e:	d3f3      	bcc.n	800a378 <__mcmp+0x18>
 800a390:	e7fa      	b.n	800a388 <__mcmp+0x28>
 800a392:	f04f 32ff 	mov.w	r2, #4294967295
 800a396:	e7f7      	b.n	800a388 <__mcmp+0x28>

0800a398 <__mdiff>:
 800a398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	460c      	mov	r4, r1
 800a39e:	4606      	mov	r6, r0
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4617      	mov	r7, r2
 800a3a6:	f7ff ffdb 	bl	800a360 <__mcmp>
 800a3aa:	1e05      	subs	r5, r0, #0
 800a3ac:	d110      	bne.n	800a3d0 <__mdiff+0x38>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7ff fd0d 	bl	8009dd0 <_Balloc>
 800a3b6:	b930      	cbnz	r0, 800a3c6 <__mdiff+0x2e>
 800a3b8:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <__mdiff+0x108>)
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	f240 2132 	movw	r1, #562	; 0x232
 800a3c0:	4838      	ldr	r0, [pc, #224]	; (800a4a4 <__mdiff+0x10c>)
 800a3c2:	f000 fc0d 	bl	800abe0 <__assert_func>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d0:	bfa4      	itt	ge
 800a3d2:	463b      	movge	r3, r7
 800a3d4:	4627      	movge	r7, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	bfa6      	itte	ge
 800a3dc:	461c      	movge	r4, r3
 800a3de:	2500      	movge	r5, #0
 800a3e0:	2501      	movlt	r5, #1
 800a3e2:	f7ff fcf5 	bl	8009dd0 <_Balloc>
 800a3e6:	b920      	cbnz	r0, 800a3f2 <__mdiff+0x5a>
 800a3e8:	4b2d      	ldr	r3, [pc, #180]	; (800a4a0 <__mdiff+0x108>)
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3f0:	e7e6      	b.n	800a3c0 <__mdiff+0x28>
 800a3f2:	693e      	ldr	r6, [r7, #16]
 800a3f4:	60c5      	str	r5, [r0, #12]
 800a3f6:	6925      	ldr	r5, [r4, #16]
 800a3f8:	f107 0114 	add.w	r1, r7, #20
 800a3fc:	f104 0914 	add.w	r9, r4, #20
 800a400:	f100 0e14 	add.w	lr, r0, #20
 800a404:	f107 0210 	add.w	r2, r7, #16
 800a408:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a40c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a410:	46f2      	mov	sl, lr
 800a412:	2700      	movs	r7, #0
 800a414:	f859 3b04 	ldr.w	r3, [r9], #4
 800a418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a41c:	fa1f f883 	uxth.w	r8, r3
 800a420:	fa17 f78b 	uxtah	r7, r7, fp
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	eba7 0808 	sub.w	r8, r7, r8
 800a42a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a42e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a432:	fa1f f888 	uxth.w	r8, r8
 800a436:	141f      	asrs	r7, r3, #16
 800a438:	454d      	cmp	r5, r9
 800a43a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a43e:	f84a 3b04 	str.w	r3, [sl], #4
 800a442:	d8e7      	bhi.n	800a414 <__mdiff+0x7c>
 800a444:	1b2b      	subs	r3, r5, r4
 800a446:	3b15      	subs	r3, #21
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	3415      	adds	r4, #21
 800a450:	42a5      	cmp	r5, r4
 800a452:	bf38      	it	cc
 800a454:	2304      	movcc	r3, #4
 800a456:	4419      	add	r1, r3
 800a458:	4473      	add	r3, lr
 800a45a:	469e      	mov	lr, r3
 800a45c:	460d      	mov	r5, r1
 800a45e:	4565      	cmp	r5, ip
 800a460:	d30e      	bcc.n	800a480 <__mdiff+0xe8>
 800a462:	f10c 0203 	add.w	r2, ip, #3
 800a466:	1a52      	subs	r2, r2, r1
 800a468:	f022 0203 	bic.w	r2, r2, #3
 800a46c:	3903      	subs	r1, #3
 800a46e:	458c      	cmp	ip, r1
 800a470:	bf38      	it	cc
 800a472:	2200      	movcc	r2, #0
 800a474:	441a      	add	r2, r3
 800a476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a47a:	b17b      	cbz	r3, 800a49c <__mdiff+0x104>
 800a47c:	6106      	str	r6, [r0, #16]
 800a47e:	e7a5      	b.n	800a3cc <__mdiff+0x34>
 800a480:	f855 8b04 	ldr.w	r8, [r5], #4
 800a484:	fa17 f488 	uxtah	r4, r7, r8
 800a488:	1422      	asrs	r2, r4, #16
 800a48a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a48e:	b2a4      	uxth	r4, r4
 800a490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a494:	f84e 4b04 	str.w	r4, [lr], #4
 800a498:	1417      	asrs	r7, r2, #16
 800a49a:	e7e0      	b.n	800a45e <__mdiff+0xc6>
 800a49c:	3e01      	subs	r6, #1
 800a49e:	e7ea      	b.n	800a476 <__mdiff+0xde>
 800a4a0:	0800b9c4 	.word	0x0800b9c4
 800a4a4:	0800ba54 	.word	0x0800ba54

0800a4a8 <__ulp>:
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	ed8d 0b00 	vstr	d0, [sp]
 800a4ae:	9b01      	ldr	r3, [sp, #4]
 800a4b0:	4912      	ldr	r1, [pc, #72]	; (800a4fc <__ulp+0x54>)
 800a4b2:	4019      	ands	r1, r3
 800a4b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a4b8:	2900      	cmp	r1, #0
 800a4ba:	dd05      	ble.n	800a4c8 <__ulp+0x20>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	ec43 2b10 	vmov	d0, r2, r3
 800a4c4:	b002      	add	sp, #8
 800a4c6:	4770      	bx	lr
 800a4c8:	4249      	negs	r1, r1
 800a4ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a4ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	f04f 0300 	mov.w	r3, #0
 800a4da:	da04      	bge.n	800a4e6 <__ulp+0x3e>
 800a4dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a4e0:	fa41 f300 	asr.w	r3, r1, r0
 800a4e4:	e7ec      	b.n	800a4c0 <__ulp+0x18>
 800a4e6:	f1a0 0114 	sub.w	r1, r0, #20
 800a4ea:	291e      	cmp	r1, #30
 800a4ec:	bfda      	itte	le
 800a4ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a4f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a4f6:	2101      	movgt	r1, #1
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	e7e1      	b.n	800a4c0 <__ulp+0x18>
 800a4fc:	7ff00000 	.word	0x7ff00000

0800a500 <__b2d>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	6905      	ldr	r5, [r0, #16]
 800a504:	f100 0714 	add.w	r7, r0, #20
 800a508:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a50c:	1f2e      	subs	r6, r5, #4
 800a50e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff fd52 	bl	8009fbc <__hi0bits>
 800a518:	f1c0 0320 	rsb	r3, r0, #32
 800a51c:	280a      	cmp	r0, #10
 800a51e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a59c <__b2d+0x9c>
 800a522:	600b      	str	r3, [r1, #0]
 800a524:	dc14      	bgt.n	800a550 <__b2d+0x50>
 800a526:	f1c0 0e0b 	rsb	lr, r0, #11
 800a52a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a52e:	42b7      	cmp	r7, r6
 800a530:	ea41 030c 	orr.w	r3, r1, ip
 800a534:	bf34      	ite	cc
 800a536:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a53a:	2100      	movcs	r1, #0
 800a53c:	3015      	adds	r0, #21
 800a53e:	fa04 f000 	lsl.w	r0, r4, r0
 800a542:	fa21 f10e 	lsr.w	r1, r1, lr
 800a546:	ea40 0201 	orr.w	r2, r0, r1
 800a54a:	ec43 2b10 	vmov	d0, r2, r3
 800a54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a550:	42b7      	cmp	r7, r6
 800a552:	bf3a      	itte	cc
 800a554:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a558:	f1a5 0608 	subcc.w	r6, r5, #8
 800a55c:	2100      	movcs	r1, #0
 800a55e:	380b      	subs	r0, #11
 800a560:	d017      	beq.n	800a592 <__b2d+0x92>
 800a562:	f1c0 0c20 	rsb	ip, r0, #32
 800a566:	fa04 f500 	lsl.w	r5, r4, r0
 800a56a:	42be      	cmp	r6, r7
 800a56c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a570:	ea45 0504 	orr.w	r5, r5, r4
 800a574:	bf8c      	ite	hi
 800a576:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a57a:	2400      	movls	r4, #0
 800a57c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a580:	fa01 f000 	lsl.w	r0, r1, r0
 800a584:	fa24 f40c 	lsr.w	r4, r4, ip
 800a588:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a58c:	ea40 0204 	orr.w	r2, r0, r4
 800a590:	e7db      	b.n	800a54a <__b2d+0x4a>
 800a592:	ea44 030c 	orr.w	r3, r4, ip
 800a596:	460a      	mov	r2, r1
 800a598:	e7d7      	b.n	800a54a <__b2d+0x4a>
 800a59a:	bf00      	nop
 800a59c:	3ff00000 	.word	0x3ff00000

0800a5a0 <__d2b>:
 800a5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a4:	4689      	mov	r9, r1
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	ec57 6b10 	vmov	r6, r7, d0
 800a5ac:	4690      	mov	r8, r2
 800a5ae:	f7ff fc0f 	bl	8009dd0 <_Balloc>
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	b930      	cbnz	r0, 800a5c4 <__d2b+0x24>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <__d2b+0xb0>)
 800a5ba:	4826      	ldr	r0, [pc, #152]	; (800a654 <__d2b+0xb4>)
 800a5bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a5c0:	f000 fb0e 	bl	800abe0 <__assert_func>
 800a5c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a5c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5cc:	bb35      	cbnz	r5, 800a61c <__d2b+0x7c>
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	d028      	beq.n	800a626 <__d2b+0x86>
 800a5d4:	4668      	mov	r0, sp
 800a5d6:	9600      	str	r6, [sp, #0]
 800a5d8:	f7ff fd10 	bl	8009ffc <__lo0bits>
 800a5dc:	9900      	ldr	r1, [sp, #0]
 800a5de:	b300      	cbz	r0, 800a622 <__d2b+0x82>
 800a5e0:	9a01      	ldr	r2, [sp, #4]
 800a5e2:	f1c0 0320 	rsb	r3, r0, #32
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	40c2      	lsrs	r2, r0
 800a5ee:	6163      	str	r3, [r4, #20]
 800a5f0:	9201      	str	r2, [sp, #4]
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	61a3      	str	r3, [r4, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bf14      	ite	ne
 800a5fa:	2202      	movne	r2, #2
 800a5fc:	2201      	moveq	r2, #1
 800a5fe:	6122      	str	r2, [r4, #16]
 800a600:	b1d5      	cbz	r5, 800a638 <__d2b+0x98>
 800a602:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a606:	4405      	add	r5, r0
 800a608:	f8c9 5000 	str.w	r5, [r9]
 800a60c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a610:	f8c8 0000 	str.w	r0, [r8]
 800a614:	4620      	mov	r0, r4
 800a616:	b003      	add	sp, #12
 800a618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a620:	e7d5      	b.n	800a5ce <__d2b+0x2e>
 800a622:	6161      	str	r1, [r4, #20]
 800a624:	e7e5      	b.n	800a5f2 <__d2b+0x52>
 800a626:	a801      	add	r0, sp, #4
 800a628:	f7ff fce8 	bl	8009ffc <__lo0bits>
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	6163      	str	r3, [r4, #20]
 800a630:	2201      	movs	r2, #1
 800a632:	6122      	str	r2, [r4, #16]
 800a634:	3020      	adds	r0, #32
 800a636:	e7e3      	b.n	800a600 <__d2b+0x60>
 800a638:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a63c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a640:	f8c9 0000 	str.w	r0, [r9]
 800a644:	6918      	ldr	r0, [r3, #16]
 800a646:	f7ff fcb9 	bl	8009fbc <__hi0bits>
 800a64a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a64e:	e7df      	b.n	800a610 <__d2b+0x70>
 800a650:	0800b9c4 	.word	0x0800b9c4
 800a654:	0800ba54 	.word	0x0800ba54

0800a658 <__ratio>:
 800a658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4688      	mov	r8, r1
 800a65e:	4669      	mov	r1, sp
 800a660:	4681      	mov	r9, r0
 800a662:	f7ff ff4d 	bl	800a500 <__b2d>
 800a666:	a901      	add	r1, sp, #4
 800a668:	4640      	mov	r0, r8
 800a66a:	ec55 4b10 	vmov	r4, r5, d0
 800a66e:	f7ff ff47 	bl	800a500 <__b2d>
 800a672:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a676:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a67a:	eba3 0c02 	sub.w	ip, r3, r2
 800a67e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a688:	ec51 0b10 	vmov	r0, r1, d0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfd6      	itet	le
 800a690:	460a      	movle	r2, r1
 800a692:	462a      	movgt	r2, r5
 800a694:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a698:	468b      	mov	fp, r1
 800a69a:	462f      	mov	r7, r5
 800a69c:	bfd4      	ite	le
 800a69e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	ee10 2a10 	vmov	r2, s0
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f6 f8ec 	bl	800088c <__aeabi_ddiv>
 800a6b4:	ec41 0b10 	vmov	d0, r0, r1
 800a6b8:	b003      	add	sp, #12
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6be <__copybits>:
 800a6be:	3901      	subs	r1, #1
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	1149      	asrs	r1, r1, #5
 800a6c4:	6914      	ldr	r4, [r2, #16]
 800a6c6:	3101      	adds	r1, #1
 800a6c8:	f102 0314 	add.w	r3, r2, #20
 800a6cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6d4:	1f05      	subs	r5, r0, #4
 800a6d6:	42a3      	cmp	r3, r4
 800a6d8:	d30c      	bcc.n	800a6f4 <__copybits+0x36>
 800a6da:	1aa3      	subs	r3, r4, r2
 800a6dc:	3b11      	subs	r3, #17
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	3211      	adds	r2, #17
 800a6e4:	42a2      	cmp	r2, r4
 800a6e6:	bf88      	it	hi
 800a6e8:	2300      	movhi	r3, #0
 800a6ea:	4418      	add	r0, r3
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4288      	cmp	r0, r1
 800a6f0:	d305      	bcc.n	800a6fe <__copybits+0x40>
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6fc:	e7eb      	b.n	800a6d6 <__copybits+0x18>
 800a6fe:	f840 3b04 	str.w	r3, [r0], #4
 800a702:	e7f4      	b.n	800a6ee <__copybits+0x30>

0800a704 <__any_on>:
 800a704:	f100 0214 	add.w	r2, r0, #20
 800a708:	6900      	ldr	r0, [r0, #16]
 800a70a:	114b      	asrs	r3, r1, #5
 800a70c:	4298      	cmp	r0, r3
 800a70e:	b510      	push	{r4, lr}
 800a710:	db11      	blt.n	800a736 <__any_on+0x32>
 800a712:	dd0a      	ble.n	800a72a <__any_on+0x26>
 800a714:	f011 011f 	ands.w	r1, r1, #31
 800a718:	d007      	beq.n	800a72a <__any_on+0x26>
 800a71a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a71e:	fa24 f001 	lsr.w	r0, r4, r1
 800a722:	fa00 f101 	lsl.w	r1, r0, r1
 800a726:	428c      	cmp	r4, r1
 800a728:	d10b      	bne.n	800a742 <__any_on+0x3e>
 800a72a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a72e:	4293      	cmp	r3, r2
 800a730:	d803      	bhi.n	800a73a <__any_on+0x36>
 800a732:	2000      	movs	r0, #0
 800a734:	bd10      	pop	{r4, pc}
 800a736:	4603      	mov	r3, r0
 800a738:	e7f7      	b.n	800a72a <__any_on+0x26>
 800a73a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a73e:	2900      	cmp	r1, #0
 800a740:	d0f5      	beq.n	800a72e <__any_on+0x2a>
 800a742:	2001      	movs	r0, #1
 800a744:	e7f6      	b.n	800a734 <__any_on+0x30>

0800a746 <_calloc_r>:
 800a746:	b513      	push	{r0, r1, r4, lr}
 800a748:	434a      	muls	r2, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	9201      	str	r2, [sp, #4]
 800a74e:	f000 f859 	bl	800a804 <_malloc_r>
 800a752:	4604      	mov	r4, r0
 800a754:	b118      	cbz	r0, 800a75e <_calloc_r+0x18>
 800a756:	9a01      	ldr	r2, [sp, #4]
 800a758:	2100      	movs	r1, #0
 800a75a:	f7fc fbc9 	bl	8006ef0 <memset>
 800a75e:	4620      	mov	r0, r4
 800a760:	b002      	add	sp, #8
 800a762:	bd10      	pop	{r4, pc}

0800a764 <_free_r>:
 800a764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a766:	2900      	cmp	r1, #0
 800a768:	d048      	beq.n	800a7fc <_free_r+0x98>
 800a76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76e:	9001      	str	r0, [sp, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f1a1 0404 	sub.w	r4, r1, #4
 800a776:	bfb8      	it	lt
 800a778:	18e4      	addlt	r4, r4, r3
 800a77a:	f000 fa7b 	bl	800ac74 <__malloc_lock>
 800a77e:	4a20      	ldr	r2, [pc, #128]	; (800a800 <_free_r+0x9c>)
 800a780:	9801      	ldr	r0, [sp, #4]
 800a782:	6813      	ldr	r3, [r2, #0]
 800a784:	4615      	mov	r5, r2
 800a786:	b933      	cbnz	r3, 800a796 <_free_r+0x32>
 800a788:	6063      	str	r3, [r4, #4]
 800a78a:	6014      	str	r4, [r2, #0]
 800a78c:	b003      	add	sp, #12
 800a78e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a792:	f000 ba75 	b.w	800ac80 <__malloc_unlock>
 800a796:	42a3      	cmp	r3, r4
 800a798:	d90b      	bls.n	800a7b2 <_free_r+0x4e>
 800a79a:	6821      	ldr	r1, [r4, #0]
 800a79c:	1862      	adds	r2, r4, r1
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	bf04      	itt	eq
 800a7a2:	681a      	ldreq	r2, [r3, #0]
 800a7a4:	685b      	ldreq	r3, [r3, #4]
 800a7a6:	6063      	str	r3, [r4, #4]
 800a7a8:	bf04      	itt	eq
 800a7aa:	1852      	addeq	r2, r2, r1
 800a7ac:	6022      	streq	r2, [r4, #0]
 800a7ae:	602c      	str	r4, [r5, #0]
 800a7b0:	e7ec      	b.n	800a78c <_free_r+0x28>
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	b10b      	cbz	r3, 800a7bc <_free_r+0x58>
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	d9fa      	bls.n	800a7b2 <_free_r+0x4e>
 800a7bc:	6811      	ldr	r1, [r2, #0]
 800a7be:	1855      	adds	r5, r2, r1
 800a7c0:	42a5      	cmp	r5, r4
 800a7c2:	d10b      	bne.n	800a7dc <_free_r+0x78>
 800a7c4:	6824      	ldr	r4, [r4, #0]
 800a7c6:	4421      	add	r1, r4
 800a7c8:	1854      	adds	r4, r2, r1
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	6011      	str	r1, [r2, #0]
 800a7ce:	d1dd      	bne.n	800a78c <_free_r+0x28>
 800a7d0:	681c      	ldr	r4, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	6053      	str	r3, [r2, #4]
 800a7d6:	4421      	add	r1, r4
 800a7d8:	6011      	str	r1, [r2, #0]
 800a7da:	e7d7      	b.n	800a78c <_free_r+0x28>
 800a7dc:	d902      	bls.n	800a7e4 <_free_r+0x80>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	e7d3      	b.n	800a78c <_free_r+0x28>
 800a7e4:	6825      	ldr	r5, [r4, #0]
 800a7e6:	1961      	adds	r1, r4, r5
 800a7e8:	428b      	cmp	r3, r1
 800a7ea:	bf04      	itt	eq
 800a7ec:	6819      	ldreq	r1, [r3, #0]
 800a7ee:	685b      	ldreq	r3, [r3, #4]
 800a7f0:	6063      	str	r3, [r4, #4]
 800a7f2:	bf04      	itt	eq
 800a7f4:	1949      	addeq	r1, r1, r5
 800a7f6:	6021      	streq	r1, [r4, #0]
 800a7f8:	6054      	str	r4, [r2, #4]
 800a7fa:	e7c7      	b.n	800a78c <_free_r+0x28>
 800a7fc:	b003      	add	sp, #12
 800a7fe:	bd30      	pop	{r4, r5, pc}
 800a800:	20000218 	.word	0x20000218

0800a804 <_malloc_r>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	1ccd      	adds	r5, r1, #3
 800a808:	f025 0503 	bic.w	r5, r5, #3
 800a80c:	3508      	adds	r5, #8
 800a80e:	2d0c      	cmp	r5, #12
 800a810:	bf38      	it	cc
 800a812:	250c      	movcc	r5, #12
 800a814:	2d00      	cmp	r5, #0
 800a816:	4606      	mov	r6, r0
 800a818:	db01      	blt.n	800a81e <_malloc_r+0x1a>
 800a81a:	42a9      	cmp	r1, r5
 800a81c:	d903      	bls.n	800a826 <_malloc_r+0x22>
 800a81e:	230c      	movs	r3, #12
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	2000      	movs	r0, #0
 800a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a826:	f000 fa25 	bl	800ac74 <__malloc_lock>
 800a82a:	4921      	ldr	r1, [pc, #132]	; (800a8b0 <_malloc_r+0xac>)
 800a82c:	680a      	ldr	r2, [r1, #0]
 800a82e:	4614      	mov	r4, r2
 800a830:	b99c      	cbnz	r4, 800a85a <_malloc_r+0x56>
 800a832:	4f20      	ldr	r7, [pc, #128]	; (800a8b4 <_malloc_r+0xb0>)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	b923      	cbnz	r3, 800a842 <_malloc_r+0x3e>
 800a838:	4621      	mov	r1, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f9a0 	bl	800ab80 <_sbrk_r>
 800a840:	6038      	str	r0, [r7, #0]
 800a842:	4629      	mov	r1, r5
 800a844:	4630      	mov	r0, r6
 800a846:	f000 f99b 	bl	800ab80 <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d123      	bne.n	800a896 <_malloc_r+0x92>
 800a84e:	230c      	movs	r3, #12
 800a850:	6033      	str	r3, [r6, #0]
 800a852:	4630      	mov	r0, r6
 800a854:	f000 fa14 	bl	800ac80 <__malloc_unlock>
 800a858:	e7e3      	b.n	800a822 <_malloc_r+0x1e>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	1b5b      	subs	r3, r3, r5
 800a85e:	d417      	bmi.n	800a890 <_malloc_r+0x8c>
 800a860:	2b0b      	cmp	r3, #11
 800a862:	d903      	bls.n	800a86c <_malloc_r+0x68>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	441c      	add	r4, r3
 800a868:	6025      	str	r5, [r4, #0]
 800a86a:	e004      	b.n	800a876 <_malloc_r+0x72>
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	42a2      	cmp	r2, r4
 800a870:	bf0c      	ite	eq
 800a872:	600b      	streq	r3, [r1, #0]
 800a874:	6053      	strne	r3, [r2, #4]
 800a876:	4630      	mov	r0, r6
 800a878:	f000 fa02 	bl	800ac80 <__malloc_unlock>
 800a87c:	f104 000b 	add.w	r0, r4, #11
 800a880:	1d23      	adds	r3, r4, #4
 800a882:	f020 0007 	bic.w	r0, r0, #7
 800a886:	1ac2      	subs	r2, r0, r3
 800a888:	d0cc      	beq.n	800a824 <_malloc_r+0x20>
 800a88a:	1a1b      	subs	r3, r3, r0
 800a88c:	50a3      	str	r3, [r4, r2]
 800a88e:	e7c9      	b.n	800a824 <_malloc_r+0x20>
 800a890:	4622      	mov	r2, r4
 800a892:	6864      	ldr	r4, [r4, #4]
 800a894:	e7cc      	b.n	800a830 <_malloc_r+0x2c>
 800a896:	1cc4      	adds	r4, r0, #3
 800a898:	f024 0403 	bic.w	r4, r4, #3
 800a89c:	42a0      	cmp	r0, r4
 800a89e:	d0e3      	beq.n	800a868 <_malloc_r+0x64>
 800a8a0:	1a21      	subs	r1, r4, r0
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f000 f96c 	bl	800ab80 <_sbrk_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d1dd      	bne.n	800a868 <_malloc_r+0x64>
 800a8ac:	e7cf      	b.n	800a84e <_malloc_r+0x4a>
 800a8ae:	bf00      	nop
 800a8b0:	20000218 	.word	0x20000218
 800a8b4:	2000021c 	.word	0x2000021c

0800a8b8 <__ssputs_r>:
 800a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	688e      	ldr	r6, [r1, #8]
 800a8be:	429e      	cmp	r6, r3
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4690      	mov	r8, r2
 800a8c6:	461f      	mov	r7, r3
 800a8c8:	d838      	bhi.n	800a93c <__ssputs_r+0x84>
 800a8ca:	898a      	ldrh	r2, [r1, #12]
 800a8cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8d0:	d032      	beq.n	800a938 <__ssputs_r+0x80>
 800a8d2:	6825      	ldr	r5, [r4, #0]
 800a8d4:	6909      	ldr	r1, [r1, #16]
 800a8d6:	eba5 0901 	sub.w	r9, r5, r1
 800a8da:	6965      	ldr	r5, [r4, #20]
 800a8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	444b      	add	r3, r9
 800a8e8:	106d      	asrs	r5, r5, #1
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf38      	it	cc
 800a8ee:	461d      	movcc	r5, r3
 800a8f0:	0553      	lsls	r3, r2, #21
 800a8f2:	d531      	bpl.n	800a958 <__ssputs_r+0xa0>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7ff ff85 	bl	800a804 <_malloc_r>
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b950      	cbnz	r0, 800a914 <__ssputs_r+0x5c>
 800a8fe:	230c      	movs	r3, #12
 800a900:	f8ca 3000 	str.w	r3, [sl]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a914:	6921      	ldr	r1, [r4, #16]
 800a916:	464a      	mov	r2, r9
 800a918:	f7ff fa4c 	bl	8009db4 <memcpy>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	6126      	str	r6, [r4, #16]
 800a92a:	6165      	str	r5, [r4, #20]
 800a92c:	444e      	add	r6, r9
 800a92e:	eba5 0509 	sub.w	r5, r5, r9
 800a932:	6026      	str	r6, [r4, #0]
 800a934:	60a5      	str	r5, [r4, #8]
 800a936:	463e      	mov	r6, r7
 800a938:	42be      	cmp	r6, r7
 800a93a:	d900      	bls.n	800a93e <__ssputs_r+0x86>
 800a93c:	463e      	mov	r6, r7
 800a93e:	4632      	mov	r2, r6
 800a940:	6820      	ldr	r0, [r4, #0]
 800a942:	4641      	mov	r1, r8
 800a944:	f000 f97c 	bl	800ac40 <memmove>
 800a948:	68a3      	ldr	r3, [r4, #8]
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	1b9b      	subs	r3, r3, r6
 800a94e:	4432      	add	r2, r6
 800a950:	60a3      	str	r3, [r4, #8]
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	2000      	movs	r0, #0
 800a956:	e7db      	b.n	800a910 <__ssputs_r+0x58>
 800a958:	462a      	mov	r2, r5
 800a95a:	f000 f997 	bl	800ac8c <_realloc_r>
 800a95e:	4606      	mov	r6, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d1e1      	bne.n	800a928 <__ssputs_r+0x70>
 800a964:	6921      	ldr	r1, [r4, #16]
 800a966:	4650      	mov	r0, sl
 800a968:	f7ff fefc 	bl	800a764 <_free_r>
 800a96c:	e7c7      	b.n	800a8fe <__ssputs_r+0x46>
	...

0800a970 <_svfiprintf_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	4698      	mov	r8, r3
 800a976:	898b      	ldrh	r3, [r1, #12]
 800a978:	061b      	lsls	r3, r3, #24
 800a97a:	b09d      	sub	sp, #116	; 0x74
 800a97c:	4607      	mov	r7, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	4614      	mov	r4, r2
 800a982:	d50e      	bpl.n	800a9a2 <_svfiprintf_r+0x32>
 800a984:	690b      	ldr	r3, [r1, #16]
 800a986:	b963      	cbnz	r3, 800a9a2 <_svfiprintf_r+0x32>
 800a988:	2140      	movs	r1, #64	; 0x40
 800a98a:	f7ff ff3b 	bl	800a804 <_malloc_r>
 800a98e:	6028      	str	r0, [r5, #0]
 800a990:	6128      	str	r0, [r5, #16]
 800a992:	b920      	cbnz	r0, 800a99e <_svfiprintf_r+0x2e>
 800a994:	230c      	movs	r3, #12
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e0d1      	b.n	800ab42 <_svfiprintf_r+0x1d2>
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	616b      	str	r3, [r5, #20]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b0:	2330      	movs	r3, #48	; 0x30
 800a9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab5c <_svfiprintf_r+0x1ec>
 800a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ba:	f04f 0901 	mov.w	r9, #1
 800a9be:	4623      	mov	r3, r4
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c6:	b10a      	cbz	r2, 800a9cc <_svfiprintf_r+0x5c>
 800a9c8:	2a25      	cmp	r2, #37	; 0x25
 800a9ca:	d1f9      	bne.n	800a9c0 <_svfiprintf_r+0x50>
 800a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d0:	d00b      	beq.n	800a9ea <_svfiprintf_r+0x7a>
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ff6d 	bl	800a8b8 <__ssputs_r>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f000 80aa 	beq.w	800ab38 <_svfiprintf_r+0x1c8>
 800a9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e6:	445a      	add	r2, fp
 800a9e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 80a2 	beq.w	800ab38 <_svfiprintf_r+0x1c8>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fe:	f10a 0a01 	add.w	sl, sl, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	9307      	str	r3, [sp, #28]
 800aa06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa0a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	2205      	movs	r2, #5
 800aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa14:	4851      	ldr	r0, [pc, #324]	; (800ab5c <_svfiprintf_r+0x1ec>)
 800aa16:	f7f5 fc03 	bl	8000220 <memchr>
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	b9d8      	cbnz	r0, 800aa56 <_svfiprintf_r+0xe6>
 800aa1e:	06d0      	lsls	r0, r2, #27
 800aa20:	bf44      	itt	mi
 800aa22:	2320      	movmi	r3, #32
 800aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa28:	0711      	lsls	r1, r2, #28
 800aa2a:	bf44      	itt	mi
 800aa2c:	232b      	movmi	r3, #43	; 0x2b
 800aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa32:	f89a 3000 	ldrb.w	r3, [sl]
 800aa36:	2b2a      	cmp	r3, #42	; 0x2a
 800aa38:	d015      	beq.n	800aa66 <_svfiprintf_r+0xf6>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	4654      	mov	r4, sl
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f04f 0c0a 	mov.w	ip, #10
 800aa44:	4621      	mov	r1, r4
 800aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa4a:	3b30      	subs	r3, #48	; 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d94e      	bls.n	800aaee <_svfiprintf_r+0x17e>
 800aa50:	b1b0      	cbz	r0, 800aa80 <_svfiprintf_r+0x110>
 800aa52:	9207      	str	r2, [sp, #28]
 800aa54:	e014      	b.n	800aa80 <_svfiprintf_r+0x110>
 800aa56:	eba0 0308 	sub.w	r3, r0, r8
 800aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	46a2      	mov	sl, r4
 800aa64:	e7d2      	b.n	800aa0c <_svfiprintf_r+0x9c>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	1d19      	adds	r1, r3, #4
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	9103      	str	r1, [sp, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfbb      	ittet	lt
 800aa72:	425b      	neglt	r3, r3
 800aa74:	f042 0202 	orrlt.w	r2, r2, #2
 800aa78:	9307      	strge	r3, [sp, #28]
 800aa7a:	9307      	strlt	r3, [sp, #28]
 800aa7c:	bfb8      	it	lt
 800aa7e:	9204      	strlt	r2, [sp, #16]
 800aa80:	7823      	ldrb	r3, [r4, #0]
 800aa82:	2b2e      	cmp	r3, #46	; 0x2e
 800aa84:	d10c      	bne.n	800aaa0 <_svfiprintf_r+0x130>
 800aa86:	7863      	ldrb	r3, [r4, #1]
 800aa88:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8a:	d135      	bne.n	800aaf8 <_svfiprintf_r+0x188>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bfb8      	it	lt
 800aa98:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa9c:	3402      	adds	r4, #2
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab6c <_svfiprintf_r+0x1fc>
 800aaa4:	7821      	ldrb	r1, [r4, #0]
 800aaa6:	2203      	movs	r2, #3
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	f7f5 fbb9 	bl	8000220 <memchr>
 800aaae:	b140      	cbz	r0, 800aac2 <_svfiprintf_r+0x152>
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	eba0 000a 	sub.w	r0, r0, sl
 800aab6:	fa03 f000 	lsl.w	r0, r3, r0
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	4303      	orrs	r3, r0
 800aabe:	3401      	adds	r4, #1
 800aac0:	9304      	str	r3, [sp, #16]
 800aac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac6:	4826      	ldr	r0, [pc, #152]	; (800ab60 <_svfiprintf_r+0x1f0>)
 800aac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aacc:	2206      	movs	r2, #6
 800aace:	f7f5 fba7 	bl	8000220 <memchr>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d038      	beq.n	800ab48 <_svfiprintf_r+0x1d8>
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <_svfiprintf_r+0x1f4>)
 800aad8:	bb1b      	cbnz	r3, 800ab22 <_svfiprintf_r+0x1b2>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	3307      	adds	r3, #7
 800aade:	f023 0307 	bic.w	r3, r3, #7
 800aae2:	3308      	adds	r3, #8
 800aae4:	9303      	str	r3, [sp, #12]
 800aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae8:	4433      	add	r3, r6
 800aaea:	9309      	str	r3, [sp, #36]	; 0x24
 800aaec:	e767      	b.n	800a9be <_svfiprintf_r+0x4e>
 800aaee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	2001      	movs	r0, #1
 800aaf6:	e7a5      	b.n	800aa44 <_svfiprintf_r+0xd4>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	3401      	adds	r4, #1
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	4619      	mov	r1, r3
 800ab00:	f04f 0c0a 	mov.w	ip, #10
 800ab04:	4620      	mov	r0, r4
 800ab06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab0a:	3a30      	subs	r2, #48	; 0x30
 800ab0c:	2a09      	cmp	r2, #9
 800ab0e:	d903      	bls.n	800ab18 <_svfiprintf_r+0x1a8>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d0c5      	beq.n	800aaa0 <_svfiprintf_r+0x130>
 800ab14:	9105      	str	r1, [sp, #20]
 800ab16:	e7c3      	b.n	800aaa0 <_svfiprintf_r+0x130>
 800ab18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7f0      	b.n	800ab04 <_svfiprintf_r+0x194>
 800ab22:	ab03      	add	r3, sp, #12
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	462a      	mov	r2, r5
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <_svfiprintf_r+0x1f8>)
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7fc fa87 	bl	8007040 <_printf_float>
 800ab32:	1c42      	adds	r2, r0, #1
 800ab34:	4606      	mov	r6, r0
 800ab36:	d1d6      	bne.n	800aae6 <_svfiprintf_r+0x176>
 800ab38:	89ab      	ldrh	r3, [r5, #12]
 800ab3a:	065b      	lsls	r3, r3, #25
 800ab3c:	f53f af2c 	bmi.w	800a998 <_svfiprintf_r+0x28>
 800ab40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab42:	b01d      	add	sp, #116	; 0x74
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	ab03      	add	r3, sp, #12
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <_svfiprintf_r+0x1f8>)
 800ab50:	a904      	add	r1, sp, #16
 800ab52:	4638      	mov	r0, r7
 800ab54:	f7fc fd18 	bl	8007588 <_printf_i>
 800ab58:	e7eb      	b.n	800ab32 <_svfiprintf_r+0x1c2>
 800ab5a:	bf00      	nop
 800ab5c:	0800bbb4 	.word	0x0800bbb4
 800ab60:	0800bbbe 	.word	0x0800bbbe
 800ab64:	08007041 	.word	0x08007041
 800ab68:	0800a8b9 	.word	0x0800a8b9
 800ab6c:	0800bbba 	.word	0x0800bbba

0800ab70 <nan>:
 800ab70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab78 <nan+0x8>
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	7ff80000 	.word	0x7ff80000

0800ab80 <_sbrk_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d06      	ldr	r5, [pc, #24]	; (800ab9c <_sbrk_r+0x1c>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	f7f6 ffd0 	bl	8001b30 <_sbrk>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_sbrk_r+0x1a>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_sbrk_r+0x1a>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	200004b4 	.word	0x200004b4

0800aba0 <strncmp>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	b16a      	cbz	r2, 800abc0 <strncmp+0x20>
 800aba4:	3901      	subs	r1, #1
 800aba6:	1884      	adds	r4, r0, r2
 800aba8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d103      	bne.n	800abbc <strncmp+0x1c>
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	d001      	beq.n	800abbc <strncmp+0x1c>
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f5      	bne.n	800aba8 <strncmp+0x8>
 800abbc:	1a98      	subs	r0, r3, r2
 800abbe:	bd10      	pop	{r4, pc}
 800abc0:	4610      	mov	r0, r2
 800abc2:	e7fc      	b.n	800abbe <strncmp+0x1e>

0800abc4 <__ascii_wctomb>:
 800abc4:	b149      	cbz	r1, 800abda <__ascii_wctomb+0x16>
 800abc6:	2aff      	cmp	r2, #255	; 0xff
 800abc8:	bf85      	ittet	hi
 800abca:	238a      	movhi	r3, #138	; 0x8a
 800abcc:	6003      	strhi	r3, [r0, #0]
 800abce:	700a      	strbls	r2, [r1, #0]
 800abd0:	f04f 30ff 	movhi.w	r0, #4294967295
 800abd4:	bf98      	it	ls
 800abd6:	2001      	movls	r0, #1
 800abd8:	4770      	bx	lr
 800abda:	4608      	mov	r0, r1
 800abdc:	4770      	bx	lr
	...

0800abe0 <__assert_func>:
 800abe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abe2:	4614      	mov	r4, r2
 800abe4:	461a      	mov	r2, r3
 800abe6:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <__assert_func+0x2c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4605      	mov	r5, r0
 800abec:	68d8      	ldr	r0, [r3, #12]
 800abee:	b14c      	cbz	r4, 800ac04 <__assert_func+0x24>
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <__assert_func+0x30>)
 800abf2:	9100      	str	r1, [sp, #0]
 800abf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abf8:	4906      	ldr	r1, [pc, #24]	; (800ac14 <__assert_func+0x34>)
 800abfa:	462b      	mov	r3, r5
 800abfc:	f000 f80e 	bl	800ac1c <fiprintf>
 800ac00:	f000 fa84 	bl	800b10c <abort>
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <__assert_func+0x38>)
 800ac06:	461c      	mov	r4, r3
 800ac08:	e7f3      	b.n	800abf2 <__assert_func+0x12>
 800ac0a:	bf00      	nop
 800ac0c:	2000000c 	.word	0x2000000c
 800ac10:	0800bbc5 	.word	0x0800bbc5
 800ac14:	0800bbd2 	.word	0x0800bbd2
 800ac18:	0800bc00 	.word	0x0800bc00

0800ac1c <fiprintf>:
 800ac1c:	b40e      	push	{r1, r2, r3}
 800ac1e:	b503      	push	{r0, r1, lr}
 800ac20:	4601      	mov	r1, r0
 800ac22:	ab03      	add	r3, sp, #12
 800ac24:	4805      	ldr	r0, [pc, #20]	; (800ac3c <fiprintf+0x20>)
 800ac26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2a:	6800      	ldr	r0, [r0, #0]
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	f000 f87d 	bl	800ad2c <_vfiprintf_r>
 800ac32:	b002      	add	sp, #8
 800ac34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac38:	b003      	add	sp, #12
 800ac3a:	4770      	bx	lr
 800ac3c:	2000000c 	.word	0x2000000c

0800ac40 <memmove>:
 800ac40:	4288      	cmp	r0, r1
 800ac42:	b510      	push	{r4, lr}
 800ac44:	eb01 0402 	add.w	r4, r1, r2
 800ac48:	d902      	bls.n	800ac50 <memmove+0x10>
 800ac4a:	4284      	cmp	r4, r0
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	d807      	bhi.n	800ac60 <memmove+0x20>
 800ac50:	1e43      	subs	r3, r0, #1
 800ac52:	42a1      	cmp	r1, r4
 800ac54:	d008      	beq.n	800ac68 <memmove+0x28>
 800ac56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac5e:	e7f8      	b.n	800ac52 <memmove+0x12>
 800ac60:	4402      	add	r2, r0
 800ac62:	4601      	mov	r1, r0
 800ac64:	428a      	cmp	r2, r1
 800ac66:	d100      	bne.n	800ac6a <memmove+0x2a>
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac72:	e7f7      	b.n	800ac64 <memmove+0x24>

0800ac74 <__malloc_lock>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__malloc_lock+0x8>)
 800ac76:	f000 bc09 	b.w	800b48c <__retarget_lock_acquire_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	200004bc 	.word	0x200004bc

0800ac80 <__malloc_unlock>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__malloc_unlock+0x8>)
 800ac82:	f000 bc04 	b.w	800b48e <__retarget_lock_release_recursive>
 800ac86:	bf00      	nop
 800ac88:	200004bc 	.word	0x200004bc

0800ac8c <_realloc_r>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	4607      	mov	r7, r0
 800ac90:	4614      	mov	r4, r2
 800ac92:	460e      	mov	r6, r1
 800ac94:	b921      	cbnz	r1, 800aca0 <_realloc_r+0x14>
 800ac96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	f7ff bdb2 	b.w	800a804 <_malloc_r>
 800aca0:	b922      	cbnz	r2, 800acac <_realloc_r+0x20>
 800aca2:	f7ff fd5f 	bl	800a764 <_free_r>
 800aca6:	4625      	mov	r5, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acac:	f000 fc54 	bl	800b558 <_malloc_usable_size_r>
 800acb0:	42a0      	cmp	r0, r4
 800acb2:	d20f      	bcs.n	800acd4 <_realloc_r+0x48>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4638      	mov	r0, r7
 800acb8:	f7ff fda4 	bl	800a804 <_malloc_r>
 800acbc:	4605      	mov	r5, r0
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0f2      	beq.n	800aca8 <_realloc_r+0x1c>
 800acc2:	4631      	mov	r1, r6
 800acc4:	4622      	mov	r2, r4
 800acc6:	f7ff f875 	bl	8009db4 <memcpy>
 800acca:	4631      	mov	r1, r6
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fd49 	bl	800a764 <_free_r>
 800acd2:	e7e9      	b.n	800aca8 <_realloc_r+0x1c>
 800acd4:	4635      	mov	r5, r6
 800acd6:	e7e7      	b.n	800aca8 <_realloc_r+0x1c>

0800acd8 <__sfputc_r>:
 800acd8:	6893      	ldr	r3, [r2, #8]
 800acda:	3b01      	subs	r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	b410      	push	{r4}
 800ace0:	6093      	str	r3, [r2, #8]
 800ace2:	da08      	bge.n	800acf6 <__sfputc_r+0x1e>
 800ace4:	6994      	ldr	r4, [r2, #24]
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	db01      	blt.n	800acee <__sfputc_r+0x16>
 800acea:	290a      	cmp	r1, #10
 800acec:	d103      	bne.n	800acf6 <__sfputc_r+0x1e>
 800acee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acf2:	f000 b94b 	b.w	800af8c <__swbuf_r>
 800acf6:	6813      	ldr	r3, [r2, #0]
 800acf8:	1c58      	adds	r0, r3, #1
 800acfa:	6010      	str	r0, [r2, #0]
 800acfc:	7019      	strb	r1, [r3, #0]
 800acfe:	4608      	mov	r0, r1
 800ad00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <__sfputs_r>:
 800ad06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	4614      	mov	r4, r2
 800ad0e:	18d5      	adds	r5, r2, r3
 800ad10:	42ac      	cmp	r4, r5
 800ad12:	d101      	bne.n	800ad18 <__sfputs_r+0x12>
 800ad14:	2000      	movs	r0, #0
 800ad16:	e007      	b.n	800ad28 <__sfputs_r+0x22>
 800ad18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ffda 	bl	800acd8 <__sfputc_r>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d1f3      	bne.n	800ad10 <__sfputs_r+0xa>
 800ad28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad2c <_vfiprintf_r>:
 800ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	460d      	mov	r5, r1
 800ad32:	b09d      	sub	sp, #116	; 0x74
 800ad34:	4614      	mov	r4, r2
 800ad36:	4698      	mov	r8, r3
 800ad38:	4606      	mov	r6, r0
 800ad3a:	b118      	cbz	r0, 800ad44 <_vfiprintf_r+0x18>
 800ad3c:	6983      	ldr	r3, [r0, #24]
 800ad3e:	b90b      	cbnz	r3, 800ad44 <_vfiprintf_r+0x18>
 800ad40:	f000 fb06 	bl	800b350 <__sinit>
 800ad44:	4b89      	ldr	r3, [pc, #548]	; (800af6c <_vfiprintf_r+0x240>)
 800ad46:	429d      	cmp	r5, r3
 800ad48:	d11b      	bne.n	800ad82 <_vfiprintf_r+0x56>
 800ad4a:	6875      	ldr	r5, [r6, #4]
 800ad4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	d405      	bmi.n	800ad5e <_vfiprintf_r+0x32>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	059a      	lsls	r2, r3, #22
 800ad56:	d402      	bmi.n	800ad5e <_vfiprintf_r+0x32>
 800ad58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad5a:	f000 fb97 	bl	800b48c <__retarget_lock_acquire_recursive>
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	071b      	lsls	r3, r3, #28
 800ad62:	d501      	bpl.n	800ad68 <_vfiprintf_r+0x3c>
 800ad64:	692b      	ldr	r3, [r5, #16]
 800ad66:	b9eb      	cbnz	r3, 800ada4 <_vfiprintf_r+0x78>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 f960 	bl	800b030 <__swsetup_r>
 800ad70:	b1c0      	cbz	r0, 800ada4 <_vfiprintf_r+0x78>
 800ad72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad74:	07dc      	lsls	r4, r3, #31
 800ad76:	d50e      	bpl.n	800ad96 <_vfiprintf_r+0x6a>
 800ad78:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7c:	b01d      	add	sp, #116	; 0x74
 800ad7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad82:	4b7b      	ldr	r3, [pc, #492]	; (800af70 <_vfiprintf_r+0x244>)
 800ad84:	429d      	cmp	r5, r3
 800ad86:	d101      	bne.n	800ad8c <_vfiprintf_r+0x60>
 800ad88:	68b5      	ldr	r5, [r6, #8]
 800ad8a:	e7df      	b.n	800ad4c <_vfiprintf_r+0x20>
 800ad8c:	4b79      	ldr	r3, [pc, #484]	; (800af74 <_vfiprintf_r+0x248>)
 800ad8e:	429d      	cmp	r5, r3
 800ad90:	bf08      	it	eq
 800ad92:	68f5      	ldreq	r5, [r6, #12]
 800ad94:	e7da      	b.n	800ad4c <_vfiprintf_r+0x20>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	0598      	lsls	r0, r3, #22
 800ad9a:	d4ed      	bmi.n	800ad78 <_vfiprintf_r+0x4c>
 800ad9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9e:	f000 fb76 	bl	800b48e <__retarget_lock_release_recursive>
 800ada2:	e7e9      	b.n	800ad78 <_vfiprintf_r+0x4c>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9309      	str	r3, [sp, #36]	; 0x24
 800ada8:	2320      	movs	r3, #32
 800adaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adae:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb2:	2330      	movs	r3, #48	; 0x30
 800adb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af78 <_vfiprintf_r+0x24c>
 800adb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adbc:	f04f 0901 	mov.w	r9, #1
 800adc0:	4623      	mov	r3, r4
 800adc2:	469a      	mov	sl, r3
 800adc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc8:	b10a      	cbz	r2, 800adce <_vfiprintf_r+0xa2>
 800adca:	2a25      	cmp	r2, #37	; 0x25
 800adcc:	d1f9      	bne.n	800adc2 <_vfiprintf_r+0x96>
 800adce:	ebba 0b04 	subs.w	fp, sl, r4
 800add2:	d00b      	beq.n	800adec <_vfiprintf_r+0xc0>
 800add4:	465b      	mov	r3, fp
 800add6:	4622      	mov	r2, r4
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ff93 	bl	800ad06 <__sfputs_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	f000 80aa 	beq.w	800af3a <_vfiprintf_r+0x20e>
 800ade6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade8:	445a      	add	r2, fp
 800adea:	9209      	str	r2, [sp, #36]	; 0x24
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 80a2 	beq.w	800af3a <_vfiprintf_r+0x20e>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae00:	f10a 0a01 	add.w	sl, sl, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0e:	4654      	mov	r4, sl
 800ae10:	2205      	movs	r2, #5
 800ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae16:	4858      	ldr	r0, [pc, #352]	; (800af78 <_vfiprintf_r+0x24c>)
 800ae18:	f7f5 fa02 	bl	8000220 <memchr>
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	b9d8      	cbnz	r0, 800ae58 <_vfiprintf_r+0x12c>
 800ae20:	06d1      	lsls	r1, r2, #27
 800ae22:	bf44      	itt	mi
 800ae24:	2320      	movmi	r3, #32
 800ae26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae2a:	0713      	lsls	r3, r2, #28
 800ae2c:	bf44      	itt	mi
 800ae2e:	232b      	movmi	r3, #43	; 0x2b
 800ae30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae34:	f89a 3000 	ldrb.w	r3, [sl]
 800ae38:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3a:	d015      	beq.n	800ae68 <_vfiprintf_r+0x13c>
 800ae3c:	9a07      	ldr	r2, [sp, #28]
 800ae3e:	4654      	mov	r4, sl
 800ae40:	2000      	movs	r0, #0
 800ae42:	f04f 0c0a 	mov.w	ip, #10
 800ae46:	4621      	mov	r1, r4
 800ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4c:	3b30      	subs	r3, #48	; 0x30
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	d94e      	bls.n	800aef0 <_vfiprintf_r+0x1c4>
 800ae52:	b1b0      	cbz	r0, 800ae82 <_vfiprintf_r+0x156>
 800ae54:	9207      	str	r2, [sp, #28]
 800ae56:	e014      	b.n	800ae82 <_vfiprintf_r+0x156>
 800ae58:	eba0 0308 	sub.w	r3, r0, r8
 800ae5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	46a2      	mov	sl, r4
 800ae66:	e7d2      	b.n	800ae0e <_vfiprintf_r+0xe2>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	1d19      	adds	r1, r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	9103      	str	r1, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbb      	ittet	lt
 800ae74:	425b      	neglt	r3, r3
 800ae76:	f042 0202 	orrlt.w	r2, r2, #2
 800ae7a:	9307      	strge	r3, [sp, #28]
 800ae7c:	9307      	strlt	r3, [sp, #28]
 800ae7e:	bfb8      	it	lt
 800ae80:	9204      	strlt	r2, [sp, #16]
 800ae82:	7823      	ldrb	r3, [r4, #0]
 800ae84:	2b2e      	cmp	r3, #46	; 0x2e
 800ae86:	d10c      	bne.n	800aea2 <_vfiprintf_r+0x176>
 800ae88:	7863      	ldrb	r3, [r4, #1]
 800ae8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae8c:	d135      	bne.n	800aefa <_vfiprintf_r+0x1ce>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	1d1a      	adds	r2, r3, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9203      	str	r2, [sp, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bfb8      	it	lt
 800ae9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9e:	3402      	adds	r4, #2
 800aea0:	9305      	str	r3, [sp, #20]
 800aea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af88 <_vfiprintf_r+0x25c>
 800aea6:	7821      	ldrb	r1, [r4, #0]
 800aea8:	2203      	movs	r2, #3
 800aeaa:	4650      	mov	r0, sl
 800aeac:	f7f5 f9b8 	bl	8000220 <memchr>
 800aeb0:	b140      	cbz	r0, 800aec4 <_vfiprintf_r+0x198>
 800aeb2:	2340      	movs	r3, #64	; 0x40
 800aeb4:	eba0 000a 	sub.w	r0, r0, sl
 800aeb8:	fa03 f000 	lsl.w	r0, r3, r0
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	4303      	orrs	r3, r0
 800aec0:	3401      	adds	r4, #1
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec8:	482c      	ldr	r0, [pc, #176]	; (800af7c <_vfiprintf_r+0x250>)
 800aeca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aece:	2206      	movs	r2, #6
 800aed0:	f7f5 f9a6 	bl	8000220 <memchr>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d03f      	beq.n	800af58 <_vfiprintf_r+0x22c>
 800aed8:	4b29      	ldr	r3, [pc, #164]	; (800af80 <_vfiprintf_r+0x254>)
 800aeda:	bb1b      	cbnz	r3, 800af24 <_vfiprintf_r+0x1f8>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	3307      	adds	r3, #7
 800aee0:	f023 0307 	bic.w	r3, r3, #7
 800aee4:	3308      	adds	r3, #8
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	443b      	add	r3, r7
 800aeec:	9309      	str	r3, [sp, #36]	; 0x24
 800aeee:	e767      	b.n	800adc0 <_vfiprintf_r+0x94>
 800aef0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef4:	460c      	mov	r4, r1
 800aef6:	2001      	movs	r0, #1
 800aef8:	e7a5      	b.n	800ae46 <_vfiprintf_r+0x11a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	3401      	adds	r4, #1
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	4619      	mov	r1, r3
 800af02:	f04f 0c0a 	mov.w	ip, #10
 800af06:	4620      	mov	r0, r4
 800af08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0c:	3a30      	subs	r2, #48	; 0x30
 800af0e:	2a09      	cmp	r2, #9
 800af10:	d903      	bls.n	800af1a <_vfiprintf_r+0x1ee>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0c5      	beq.n	800aea2 <_vfiprintf_r+0x176>
 800af16:	9105      	str	r1, [sp, #20]
 800af18:	e7c3      	b.n	800aea2 <_vfiprintf_r+0x176>
 800af1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1e:	4604      	mov	r4, r0
 800af20:	2301      	movs	r3, #1
 800af22:	e7f0      	b.n	800af06 <_vfiprintf_r+0x1da>
 800af24:	ab03      	add	r3, sp, #12
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	462a      	mov	r2, r5
 800af2a:	4b16      	ldr	r3, [pc, #88]	; (800af84 <_vfiprintf_r+0x258>)
 800af2c:	a904      	add	r1, sp, #16
 800af2e:	4630      	mov	r0, r6
 800af30:	f7fc f886 	bl	8007040 <_printf_float>
 800af34:	4607      	mov	r7, r0
 800af36:	1c78      	adds	r0, r7, #1
 800af38:	d1d6      	bne.n	800aee8 <_vfiprintf_r+0x1bc>
 800af3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af3c:	07d9      	lsls	r1, r3, #31
 800af3e:	d405      	bmi.n	800af4c <_vfiprintf_r+0x220>
 800af40:	89ab      	ldrh	r3, [r5, #12]
 800af42:	059a      	lsls	r2, r3, #22
 800af44:	d402      	bmi.n	800af4c <_vfiprintf_r+0x220>
 800af46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af48:	f000 faa1 	bl	800b48e <__retarget_lock_release_recursive>
 800af4c:	89ab      	ldrh	r3, [r5, #12]
 800af4e:	065b      	lsls	r3, r3, #25
 800af50:	f53f af12 	bmi.w	800ad78 <_vfiprintf_r+0x4c>
 800af54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af56:	e711      	b.n	800ad7c <_vfiprintf_r+0x50>
 800af58:	ab03      	add	r3, sp, #12
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	462a      	mov	r2, r5
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <_vfiprintf_r+0x258>)
 800af60:	a904      	add	r1, sp, #16
 800af62:	4630      	mov	r0, r6
 800af64:	f7fc fb10 	bl	8007588 <_printf_i>
 800af68:	e7e4      	b.n	800af34 <_vfiprintf_r+0x208>
 800af6a:	bf00      	nop
 800af6c:	0800bc24 	.word	0x0800bc24
 800af70:	0800bc44 	.word	0x0800bc44
 800af74:	0800bc04 	.word	0x0800bc04
 800af78:	0800bbb4 	.word	0x0800bbb4
 800af7c:	0800bbbe 	.word	0x0800bbbe
 800af80:	08007041 	.word	0x08007041
 800af84:	0800ad07 	.word	0x0800ad07
 800af88:	0800bbba 	.word	0x0800bbba

0800af8c <__swbuf_r>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	460e      	mov	r6, r1
 800af90:	4614      	mov	r4, r2
 800af92:	4605      	mov	r5, r0
 800af94:	b118      	cbz	r0, 800af9e <__swbuf_r+0x12>
 800af96:	6983      	ldr	r3, [r0, #24]
 800af98:	b90b      	cbnz	r3, 800af9e <__swbuf_r+0x12>
 800af9a:	f000 f9d9 	bl	800b350 <__sinit>
 800af9e:	4b21      	ldr	r3, [pc, #132]	; (800b024 <__swbuf_r+0x98>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d12b      	bne.n	800affc <__swbuf_r+0x70>
 800afa4:	686c      	ldr	r4, [r5, #4]
 800afa6:	69a3      	ldr	r3, [r4, #24]
 800afa8:	60a3      	str	r3, [r4, #8]
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	071a      	lsls	r2, r3, #28
 800afae:	d52f      	bpl.n	800b010 <__swbuf_r+0x84>
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	b36b      	cbz	r3, 800b010 <__swbuf_r+0x84>
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	6820      	ldr	r0, [r4, #0]
 800afb8:	1ac0      	subs	r0, r0, r3
 800afba:	6963      	ldr	r3, [r4, #20]
 800afbc:	b2f6      	uxtb	r6, r6
 800afbe:	4283      	cmp	r3, r0
 800afc0:	4637      	mov	r7, r6
 800afc2:	dc04      	bgt.n	800afce <__swbuf_r+0x42>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 f92e 	bl	800b228 <_fflush_r>
 800afcc:	bb30      	cbnz	r0, 800b01c <__swbuf_r+0x90>
 800afce:	68a3      	ldr	r3, [r4, #8]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	60a3      	str	r3, [r4, #8]
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	6022      	str	r2, [r4, #0]
 800afda:	701e      	strb	r6, [r3, #0]
 800afdc:	6963      	ldr	r3, [r4, #20]
 800afde:	3001      	adds	r0, #1
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d004      	beq.n	800afee <__swbuf_r+0x62>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	07db      	lsls	r3, r3, #31
 800afe8:	d506      	bpl.n	800aff8 <__swbuf_r+0x6c>
 800afea:	2e0a      	cmp	r6, #10
 800afec:	d104      	bne.n	800aff8 <__swbuf_r+0x6c>
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 f919 	bl	800b228 <_fflush_r>
 800aff6:	b988      	cbnz	r0, 800b01c <__swbuf_r+0x90>
 800aff8:	4638      	mov	r0, r7
 800affa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800affc:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <__swbuf_r+0x9c>)
 800affe:	429c      	cmp	r4, r3
 800b000:	d101      	bne.n	800b006 <__swbuf_r+0x7a>
 800b002:	68ac      	ldr	r4, [r5, #8]
 800b004:	e7cf      	b.n	800afa6 <__swbuf_r+0x1a>
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <__swbuf_r+0xa0>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	bf08      	it	eq
 800b00c:	68ec      	ldreq	r4, [r5, #12]
 800b00e:	e7ca      	b.n	800afa6 <__swbuf_r+0x1a>
 800b010:	4621      	mov	r1, r4
 800b012:	4628      	mov	r0, r5
 800b014:	f000 f80c 	bl	800b030 <__swsetup_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d0cb      	beq.n	800afb4 <__swbuf_r+0x28>
 800b01c:	f04f 37ff 	mov.w	r7, #4294967295
 800b020:	e7ea      	b.n	800aff8 <__swbuf_r+0x6c>
 800b022:	bf00      	nop
 800b024:	0800bc24 	.word	0x0800bc24
 800b028:	0800bc44 	.word	0x0800bc44
 800b02c:	0800bc04 	.word	0x0800bc04

0800b030 <__swsetup_r>:
 800b030:	4b32      	ldr	r3, [pc, #200]	; (800b0fc <__swsetup_r+0xcc>)
 800b032:	b570      	push	{r4, r5, r6, lr}
 800b034:	681d      	ldr	r5, [r3, #0]
 800b036:	4606      	mov	r6, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	b125      	cbz	r5, 800b046 <__swsetup_r+0x16>
 800b03c:	69ab      	ldr	r3, [r5, #24]
 800b03e:	b913      	cbnz	r3, 800b046 <__swsetup_r+0x16>
 800b040:	4628      	mov	r0, r5
 800b042:	f000 f985 	bl	800b350 <__sinit>
 800b046:	4b2e      	ldr	r3, [pc, #184]	; (800b100 <__swsetup_r+0xd0>)
 800b048:	429c      	cmp	r4, r3
 800b04a:	d10f      	bne.n	800b06c <__swsetup_r+0x3c>
 800b04c:	686c      	ldr	r4, [r5, #4]
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b054:	0719      	lsls	r1, r3, #28
 800b056:	d42c      	bmi.n	800b0b2 <__swsetup_r+0x82>
 800b058:	06dd      	lsls	r5, r3, #27
 800b05a:	d411      	bmi.n	800b080 <__swsetup_r+0x50>
 800b05c:	2309      	movs	r3, #9
 800b05e:	6033      	str	r3, [r6, #0]
 800b060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	f04f 30ff 	mov.w	r0, #4294967295
 800b06a:	e03e      	b.n	800b0ea <__swsetup_r+0xba>
 800b06c:	4b25      	ldr	r3, [pc, #148]	; (800b104 <__swsetup_r+0xd4>)
 800b06e:	429c      	cmp	r4, r3
 800b070:	d101      	bne.n	800b076 <__swsetup_r+0x46>
 800b072:	68ac      	ldr	r4, [r5, #8]
 800b074:	e7eb      	b.n	800b04e <__swsetup_r+0x1e>
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <__swsetup_r+0xd8>)
 800b078:	429c      	cmp	r4, r3
 800b07a:	bf08      	it	eq
 800b07c:	68ec      	ldreq	r4, [r5, #12]
 800b07e:	e7e6      	b.n	800b04e <__swsetup_r+0x1e>
 800b080:	0758      	lsls	r0, r3, #29
 800b082:	d512      	bpl.n	800b0aa <__swsetup_r+0x7a>
 800b084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b086:	b141      	cbz	r1, 800b09a <__swsetup_r+0x6a>
 800b088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b08c:	4299      	cmp	r1, r3
 800b08e:	d002      	beq.n	800b096 <__swsetup_r+0x66>
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff fb67 	bl	800a764 <_free_r>
 800b096:	2300      	movs	r3, #0
 800b098:	6363      	str	r3, [r4, #52]	; 0x34
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6063      	str	r3, [r4, #4]
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	f043 0308 	orr.w	r3, r3, #8
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	b94b      	cbnz	r3, 800b0ca <__swsetup_r+0x9a>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c0:	d003      	beq.n	800b0ca <__swsetup_r+0x9a>
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f000 fa07 	bl	800b4d8 <__smakebuf_r>
 800b0ca:	89a0      	ldrh	r0, [r4, #12]
 800b0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0d0:	f010 0301 	ands.w	r3, r0, #1
 800b0d4:	d00a      	beq.n	800b0ec <__swsetup_r+0xbc>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60a3      	str	r3, [r4, #8]
 800b0da:	6963      	ldr	r3, [r4, #20]
 800b0dc:	425b      	negs	r3, r3
 800b0de:	61a3      	str	r3, [r4, #24]
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	b943      	cbnz	r3, 800b0f6 <__swsetup_r+0xc6>
 800b0e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0e8:	d1ba      	bne.n	800b060 <__swsetup_r+0x30>
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	0781      	lsls	r1, r0, #30
 800b0ee:	bf58      	it	pl
 800b0f0:	6963      	ldrpl	r3, [r4, #20]
 800b0f2:	60a3      	str	r3, [r4, #8]
 800b0f4:	e7f4      	b.n	800b0e0 <__swsetup_r+0xb0>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e7f7      	b.n	800b0ea <__swsetup_r+0xba>
 800b0fa:	bf00      	nop
 800b0fc:	2000000c 	.word	0x2000000c
 800b100:	0800bc24 	.word	0x0800bc24
 800b104:	0800bc44 	.word	0x0800bc44
 800b108:	0800bc04 	.word	0x0800bc04

0800b10c <abort>:
 800b10c:	b508      	push	{r3, lr}
 800b10e:	2006      	movs	r0, #6
 800b110:	f000 fa52 	bl	800b5b8 <raise>
 800b114:	2001      	movs	r0, #1
 800b116:	f7f6 fc93 	bl	8001a40 <_exit>
	...

0800b11c <__sflush_r>:
 800b11c:	898a      	ldrh	r2, [r1, #12]
 800b11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b122:	4605      	mov	r5, r0
 800b124:	0710      	lsls	r0, r2, #28
 800b126:	460c      	mov	r4, r1
 800b128:	d458      	bmi.n	800b1dc <__sflush_r+0xc0>
 800b12a:	684b      	ldr	r3, [r1, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc05      	bgt.n	800b13c <__sflush_r+0x20>
 800b130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b132:	2b00      	cmp	r3, #0
 800b134:	dc02      	bgt.n	800b13c <__sflush_r+0x20>
 800b136:	2000      	movs	r0, #0
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b13e:	2e00      	cmp	r6, #0
 800b140:	d0f9      	beq.n	800b136 <__sflush_r+0x1a>
 800b142:	2300      	movs	r3, #0
 800b144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b148:	682f      	ldr	r7, [r5, #0]
 800b14a:	602b      	str	r3, [r5, #0]
 800b14c:	d032      	beq.n	800b1b4 <__sflush_r+0x98>
 800b14e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	075a      	lsls	r2, r3, #29
 800b154:	d505      	bpl.n	800b162 <__sflush_r+0x46>
 800b156:	6863      	ldr	r3, [r4, #4]
 800b158:	1ac0      	subs	r0, r0, r3
 800b15a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b15c:	b10b      	cbz	r3, 800b162 <__sflush_r+0x46>
 800b15e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b160:	1ac0      	subs	r0, r0, r3
 800b162:	2300      	movs	r3, #0
 800b164:	4602      	mov	r2, r0
 800b166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b168:	6a21      	ldr	r1, [r4, #32]
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b0      	blx	r6
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	d106      	bne.n	800b182 <__sflush_r+0x66>
 800b174:	6829      	ldr	r1, [r5, #0]
 800b176:	291d      	cmp	r1, #29
 800b178:	d82c      	bhi.n	800b1d4 <__sflush_r+0xb8>
 800b17a:	4a2a      	ldr	r2, [pc, #168]	; (800b224 <__sflush_r+0x108>)
 800b17c:	40ca      	lsrs	r2, r1
 800b17e:	07d6      	lsls	r6, r2, #31
 800b180:	d528      	bpl.n	800b1d4 <__sflush_r+0xb8>
 800b182:	2200      	movs	r2, #0
 800b184:	6062      	str	r2, [r4, #4]
 800b186:	04d9      	lsls	r1, r3, #19
 800b188:	6922      	ldr	r2, [r4, #16]
 800b18a:	6022      	str	r2, [r4, #0]
 800b18c:	d504      	bpl.n	800b198 <__sflush_r+0x7c>
 800b18e:	1c42      	adds	r2, r0, #1
 800b190:	d101      	bne.n	800b196 <__sflush_r+0x7a>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	b903      	cbnz	r3, 800b198 <__sflush_r+0x7c>
 800b196:	6560      	str	r0, [r4, #84]	; 0x54
 800b198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b19a:	602f      	str	r7, [r5, #0]
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d0ca      	beq.n	800b136 <__sflush_r+0x1a>
 800b1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1a4:	4299      	cmp	r1, r3
 800b1a6:	d002      	beq.n	800b1ae <__sflush_r+0x92>
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f7ff fadb 	bl	800a764 <_free_r>
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1b2:	e7c1      	b.n	800b138 <__sflush_r+0x1c>
 800b1b4:	6a21      	ldr	r1, [r4, #32]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b0      	blx	r6
 800b1bc:	1c41      	adds	r1, r0, #1
 800b1be:	d1c7      	bne.n	800b150 <__sflush_r+0x34>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0c4      	beq.n	800b150 <__sflush_r+0x34>
 800b1c6:	2b1d      	cmp	r3, #29
 800b1c8:	d001      	beq.n	800b1ce <__sflush_r+0xb2>
 800b1ca:	2b16      	cmp	r3, #22
 800b1cc:	d101      	bne.n	800b1d2 <__sflush_r+0xb6>
 800b1ce:	602f      	str	r7, [r5, #0]
 800b1d0:	e7b1      	b.n	800b136 <__sflush_r+0x1a>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	e7ad      	b.n	800b138 <__sflush_r+0x1c>
 800b1dc:	690f      	ldr	r7, [r1, #16]
 800b1de:	2f00      	cmp	r7, #0
 800b1e0:	d0a9      	beq.n	800b136 <__sflush_r+0x1a>
 800b1e2:	0793      	lsls	r3, r2, #30
 800b1e4:	680e      	ldr	r6, [r1, #0]
 800b1e6:	bf08      	it	eq
 800b1e8:	694b      	ldreq	r3, [r1, #20]
 800b1ea:	600f      	str	r7, [r1, #0]
 800b1ec:	bf18      	it	ne
 800b1ee:	2300      	movne	r3, #0
 800b1f0:	eba6 0807 	sub.w	r8, r6, r7
 800b1f4:	608b      	str	r3, [r1, #8]
 800b1f6:	f1b8 0f00 	cmp.w	r8, #0
 800b1fa:	dd9c      	ble.n	800b136 <__sflush_r+0x1a>
 800b1fc:	6a21      	ldr	r1, [r4, #32]
 800b1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b200:	4643      	mov	r3, r8
 800b202:	463a      	mov	r2, r7
 800b204:	4628      	mov	r0, r5
 800b206:	47b0      	blx	r6
 800b208:	2800      	cmp	r0, #0
 800b20a:	dc06      	bgt.n	800b21a <__sflush_r+0xfe>
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e78e      	b.n	800b138 <__sflush_r+0x1c>
 800b21a:	4407      	add	r7, r0
 800b21c:	eba8 0800 	sub.w	r8, r8, r0
 800b220:	e7e9      	b.n	800b1f6 <__sflush_r+0xda>
 800b222:	bf00      	nop
 800b224:	20400001 	.word	0x20400001

0800b228 <_fflush_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	690b      	ldr	r3, [r1, #16]
 800b22c:	4605      	mov	r5, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	b913      	cbnz	r3, 800b238 <_fflush_r+0x10>
 800b232:	2500      	movs	r5, #0
 800b234:	4628      	mov	r0, r5
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	b118      	cbz	r0, 800b242 <_fflush_r+0x1a>
 800b23a:	6983      	ldr	r3, [r0, #24]
 800b23c:	b90b      	cbnz	r3, 800b242 <_fflush_r+0x1a>
 800b23e:	f000 f887 	bl	800b350 <__sinit>
 800b242:	4b14      	ldr	r3, [pc, #80]	; (800b294 <_fflush_r+0x6c>)
 800b244:	429c      	cmp	r4, r3
 800b246:	d11b      	bne.n	800b280 <_fflush_r+0x58>
 800b248:	686c      	ldr	r4, [r5, #4]
 800b24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0ef      	beq.n	800b232 <_fflush_r+0xa>
 800b252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b254:	07d0      	lsls	r0, r2, #31
 800b256:	d404      	bmi.n	800b262 <_fflush_r+0x3a>
 800b258:	0599      	lsls	r1, r3, #22
 800b25a:	d402      	bmi.n	800b262 <_fflush_r+0x3a>
 800b25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25e:	f000 f915 	bl	800b48c <__retarget_lock_acquire_recursive>
 800b262:	4628      	mov	r0, r5
 800b264:	4621      	mov	r1, r4
 800b266:	f7ff ff59 	bl	800b11c <__sflush_r>
 800b26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26c:	07da      	lsls	r2, r3, #31
 800b26e:	4605      	mov	r5, r0
 800b270:	d4e0      	bmi.n	800b234 <_fflush_r+0xc>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	059b      	lsls	r3, r3, #22
 800b276:	d4dd      	bmi.n	800b234 <_fflush_r+0xc>
 800b278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27a:	f000 f908 	bl	800b48e <__retarget_lock_release_recursive>
 800b27e:	e7d9      	b.n	800b234 <_fflush_r+0xc>
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <_fflush_r+0x70>)
 800b282:	429c      	cmp	r4, r3
 800b284:	d101      	bne.n	800b28a <_fflush_r+0x62>
 800b286:	68ac      	ldr	r4, [r5, #8]
 800b288:	e7df      	b.n	800b24a <_fflush_r+0x22>
 800b28a:	4b04      	ldr	r3, [pc, #16]	; (800b29c <_fflush_r+0x74>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	bf08      	it	eq
 800b290:	68ec      	ldreq	r4, [r5, #12]
 800b292:	e7da      	b.n	800b24a <_fflush_r+0x22>
 800b294:	0800bc24 	.word	0x0800bc24
 800b298:	0800bc44 	.word	0x0800bc44
 800b29c:	0800bc04 	.word	0x0800bc04

0800b2a0 <std>:
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2ae:	6083      	str	r3, [r0, #8]
 800b2b0:	8181      	strh	r1, [r0, #12]
 800b2b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2b4:	81c2      	strh	r2, [r0, #14]
 800b2b6:	6183      	str	r3, [r0, #24]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2208      	movs	r2, #8
 800b2bc:	305c      	adds	r0, #92	; 0x5c
 800b2be:	f7fb fe17 	bl	8006ef0 <memset>
 800b2c2:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <std+0x38>)
 800b2c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <std+0x3c>)
 800b2c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <std+0x40>)
 800b2cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <std+0x44>)
 800b2d0:	6224      	str	r4, [r4, #32]
 800b2d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0800b5f1 	.word	0x0800b5f1
 800b2dc:	0800b613 	.word	0x0800b613
 800b2e0:	0800b64b 	.word	0x0800b64b
 800b2e4:	0800b66f 	.word	0x0800b66f

0800b2e8 <_cleanup_r>:
 800b2e8:	4901      	ldr	r1, [pc, #4]	; (800b2f0 <_cleanup_r+0x8>)
 800b2ea:	f000 b8af 	b.w	800b44c <_fwalk_reent>
 800b2ee:	bf00      	nop
 800b2f0:	0800b229 	.word	0x0800b229

0800b2f4 <__sfmoreglue>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	1e4a      	subs	r2, r1, #1
 800b2f8:	2568      	movs	r5, #104	; 0x68
 800b2fa:	4355      	muls	r5, r2
 800b2fc:	460e      	mov	r6, r1
 800b2fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b302:	f7ff fa7f 	bl	800a804 <_malloc_r>
 800b306:	4604      	mov	r4, r0
 800b308:	b140      	cbz	r0, 800b31c <__sfmoreglue+0x28>
 800b30a:	2100      	movs	r1, #0
 800b30c:	e9c0 1600 	strd	r1, r6, [r0]
 800b310:	300c      	adds	r0, #12
 800b312:	60a0      	str	r0, [r4, #8]
 800b314:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b318:	f7fb fdea 	bl	8006ef0 <memset>
 800b31c:	4620      	mov	r0, r4
 800b31e:	bd70      	pop	{r4, r5, r6, pc}

0800b320 <__sfp_lock_acquire>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__sfp_lock_acquire+0x8>)
 800b322:	f000 b8b3 	b.w	800b48c <__retarget_lock_acquire_recursive>
 800b326:	bf00      	nop
 800b328:	200004c0 	.word	0x200004c0

0800b32c <__sfp_lock_release>:
 800b32c:	4801      	ldr	r0, [pc, #4]	; (800b334 <__sfp_lock_release+0x8>)
 800b32e:	f000 b8ae 	b.w	800b48e <__retarget_lock_release_recursive>
 800b332:	bf00      	nop
 800b334:	200004c0 	.word	0x200004c0

0800b338 <__sinit_lock_acquire>:
 800b338:	4801      	ldr	r0, [pc, #4]	; (800b340 <__sinit_lock_acquire+0x8>)
 800b33a:	f000 b8a7 	b.w	800b48c <__retarget_lock_acquire_recursive>
 800b33e:	bf00      	nop
 800b340:	200004bb 	.word	0x200004bb

0800b344 <__sinit_lock_release>:
 800b344:	4801      	ldr	r0, [pc, #4]	; (800b34c <__sinit_lock_release+0x8>)
 800b346:	f000 b8a2 	b.w	800b48e <__retarget_lock_release_recursive>
 800b34a:	bf00      	nop
 800b34c:	200004bb 	.word	0x200004bb

0800b350 <__sinit>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	f7ff fff0 	bl	800b338 <__sinit_lock_acquire>
 800b358:	69a3      	ldr	r3, [r4, #24]
 800b35a:	b11b      	cbz	r3, 800b364 <__sinit+0x14>
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	f7ff bff0 	b.w	800b344 <__sinit_lock_release>
 800b364:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b368:	6523      	str	r3, [r4, #80]	; 0x50
 800b36a:	4b13      	ldr	r3, [pc, #76]	; (800b3b8 <__sinit+0x68>)
 800b36c:	4a13      	ldr	r2, [pc, #76]	; (800b3bc <__sinit+0x6c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	62a2      	str	r2, [r4, #40]	; 0x28
 800b372:	42a3      	cmp	r3, r4
 800b374:	bf04      	itt	eq
 800b376:	2301      	moveq	r3, #1
 800b378:	61a3      	streq	r3, [r4, #24]
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f820 	bl	800b3c0 <__sfp>
 800b380:	6060      	str	r0, [r4, #4]
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f81c 	bl	800b3c0 <__sfp>
 800b388:	60a0      	str	r0, [r4, #8]
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f818 	bl	800b3c0 <__sfp>
 800b390:	2200      	movs	r2, #0
 800b392:	60e0      	str	r0, [r4, #12]
 800b394:	2104      	movs	r1, #4
 800b396:	6860      	ldr	r0, [r4, #4]
 800b398:	f7ff ff82 	bl	800b2a0 <std>
 800b39c:	68a0      	ldr	r0, [r4, #8]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	2109      	movs	r1, #9
 800b3a2:	f7ff ff7d 	bl	800b2a0 <std>
 800b3a6:	68e0      	ldr	r0, [r4, #12]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	2112      	movs	r1, #18
 800b3ac:	f7ff ff78 	bl	800b2a0 <std>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	61a3      	str	r3, [r4, #24]
 800b3b4:	e7d2      	b.n	800b35c <__sinit+0xc>
 800b3b6:	bf00      	nop
 800b3b8:	0800b7b0 	.word	0x0800b7b0
 800b3bc:	0800b2e9 	.word	0x0800b2e9

0800b3c0 <__sfp>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	f7ff ffac 	bl	800b320 <__sfp_lock_acquire>
 800b3c8:	4b1e      	ldr	r3, [pc, #120]	; (800b444 <__sfp+0x84>)
 800b3ca:	681e      	ldr	r6, [r3, #0]
 800b3cc:	69b3      	ldr	r3, [r6, #24]
 800b3ce:	b913      	cbnz	r3, 800b3d6 <__sfp+0x16>
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f7ff ffbd 	bl	800b350 <__sinit>
 800b3d6:	3648      	adds	r6, #72	; 0x48
 800b3d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	d503      	bpl.n	800b3e8 <__sfp+0x28>
 800b3e0:	6833      	ldr	r3, [r6, #0]
 800b3e2:	b30b      	cbz	r3, 800b428 <__sfp+0x68>
 800b3e4:	6836      	ldr	r6, [r6, #0]
 800b3e6:	e7f7      	b.n	800b3d8 <__sfp+0x18>
 800b3e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3ec:	b9d5      	cbnz	r5, 800b424 <__sfp+0x64>
 800b3ee:	4b16      	ldr	r3, [pc, #88]	; (800b448 <__sfp+0x88>)
 800b3f0:	60e3      	str	r3, [r4, #12]
 800b3f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b3f8:	f000 f847 	bl	800b48a <__retarget_lock_init_recursive>
 800b3fc:	f7ff ff96 	bl	800b32c <__sfp_lock_release>
 800b400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b408:	6025      	str	r5, [r4, #0]
 800b40a:	61a5      	str	r5, [r4, #24]
 800b40c:	2208      	movs	r2, #8
 800b40e:	4629      	mov	r1, r5
 800b410:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b414:	f7fb fd6c 	bl	8006ef0 <memset>
 800b418:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b41c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b420:	4620      	mov	r0, r4
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b424:	3468      	adds	r4, #104	; 0x68
 800b426:	e7d9      	b.n	800b3dc <__sfp+0x1c>
 800b428:	2104      	movs	r1, #4
 800b42a:	4638      	mov	r0, r7
 800b42c:	f7ff ff62 	bl	800b2f4 <__sfmoreglue>
 800b430:	4604      	mov	r4, r0
 800b432:	6030      	str	r0, [r6, #0]
 800b434:	2800      	cmp	r0, #0
 800b436:	d1d5      	bne.n	800b3e4 <__sfp+0x24>
 800b438:	f7ff ff78 	bl	800b32c <__sfp_lock_release>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	e7ee      	b.n	800b420 <__sfp+0x60>
 800b442:	bf00      	nop
 800b444:	0800b7b0 	.word	0x0800b7b0
 800b448:	ffff0001 	.word	0xffff0001

0800b44c <_fwalk_reent>:
 800b44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b450:	4606      	mov	r6, r0
 800b452:	4688      	mov	r8, r1
 800b454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b458:	2700      	movs	r7, #0
 800b45a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b45e:	f1b9 0901 	subs.w	r9, r9, #1
 800b462:	d505      	bpl.n	800b470 <_fwalk_reent+0x24>
 800b464:	6824      	ldr	r4, [r4, #0]
 800b466:	2c00      	cmp	r4, #0
 800b468:	d1f7      	bne.n	800b45a <_fwalk_reent+0xe>
 800b46a:	4638      	mov	r0, r7
 800b46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b470:	89ab      	ldrh	r3, [r5, #12]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d907      	bls.n	800b486 <_fwalk_reent+0x3a>
 800b476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b47a:	3301      	adds	r3, #1
 800b47c:	d003      	beq.n	800b486 <_fwalk_reent+0x3a>
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	47c0      	blx	r8
 800b484:	4307      	orrs	r7, r0
 800b486:	3568      	adds	r5, #104	; 0x68
 800b488:	e7e9      	b.n	800b45e <_fwalk_reent+0x12>

0800b48a <__retarget_lock_init_recursive>:
 800b48a:	4770      	bx	lr

0800b48c <__retarget_lock_acquire_recursive>:
 800b48c:	4770      	bx	lr

0800b48e <__retarget_lock_release_recursive>:
 800b48e:	4770      	bx	lr

0800b490 <__swhatbuf_r>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	460e      	mov	r6, r1
 800b494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b498:	2900      	cmp	r1, #0
 800b49a:	b096      	sub	sp, #88	; 0x58
 800b49c:	4614      	mov	r4, r2
 800b49e:	461d      	mov	r5, r3
 800b4a0:	da07      	bge.n	800b4b2 <__swhatbuf_r+0x22>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	602b      	str	r3, [r5, #0]
 800b4a6:	89b3      	ldrh	r3, [r6, #12]
 800b4a8:	061a      	lsls	r2, r3, #24
 800b4aa:	d410      	bmi.n	800b4ce <__swhatbuf_r+0x3e>
 800b4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b0:	e00e      	b.n	800b4d0 <__swhatbuf_r+0x40>
 800b4b2:	466a      	mov	r2, sp
 800b4b4:	f000 f902 	bl	800b6bc <_fstat_r>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	dbf2      	blt.n	800b4a2 <__swhatbuf_r+0x12>
 800b4bc:	9a01      	ldr	r2, [sp, #4]
 800b4be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4c6:	425a      	negs	r2, r3
 800b4c8:	415a      	adcs	r2, r3
 800b4ca:	602a      	str	r2, [r5, #0]
 800b4cc:	e7ee      	b.n	800b4ac <__swhatbuf_r+0x1c>
 800b4ce:	2340      	movs	r3, #64	; 0x40
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	b016      	add	sp, #88	; 0x58
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}

0800b4d8 <__smakebuf_r>:
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4dc:	079d      	lsls	r5, r3, #30
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	d507      	bpl.n	800b4f4 <__smakebuf_r+0x1c>
 800b4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	b002      	add	sp, #8
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	ab01      	add	r3, sp, #4
 800b4f6:	466a      	mov	r2, sp
 800b4f8:	f7ff ffca 	bl	800b490 <__swhatbuf_r>
 800b4fc:	9900      	ldr	r1, [sp, #0]
 800b4fe:	4605      	mov	r5, r0
 800b500:	4630      	mov	r0, r6
 800b502:	f7ff f97f 	bl	800a804 <_malloc_r>
 800b506:	b948      	cbnz	r0, 800b51c <__smakebuf_r+0x44>
 800b508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50c:	059a      	lsls	r2, r3, #22
 800b50e:	d4ef      	bmi.n	800b4f0 <__smakebuf_r+0x18>
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7e3      	b.n	800b4e4 <__smakebuf_r+0xc>
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <__smakebuf_r+0x7c>)
 800b51e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	6020      	str	r0, [r4, #0]
 800b524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	9b00      	ldr	r3, [sp, #0]
 800b52c:	6163      	str	r3, [r4, #20]
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	6120      	str	r0, [r4, #16]
 800b532:	b15b      	cbz	r3, 800b54c <__smakebuf_r+0x74>
 800b534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 f8d1 	bl	800b6e0 <_isatty_r>
 800b53e:	b128      	cbz	r0, 800b54c <__smakebuf_r+0x74>
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	89a0      	ldrh	r0, [r4, #12]
 800b54e:	4305      	orrs	r5, r0
 800b550:	81a5      	strh	r5, [r4, #12]
 800b552:	e7cd      	b.n	800b4f0 <__smakebuf_r+0x18>
 800b554:	0800b2e9 	.word	0x0800b2e9

0800b558 <_malloc_usable_size_r>:
 800b558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b55c:	1f18      	subs	r0, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfbc      	itt	lt
 800b562:	580b      	ldrlt	r3, [r1, r0]
 800b564:	18c0      	addlt	r0, r0, r3
 800b566:	4770      	bx	lr

0800b568 <_raise_r>:
 800b568:	291f      	cmp	r1, #31
 800b56a:	b538      	push	{r3, r4, r5, lr}
 800b56c:	4604      	mov	r4, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	d904      	bls.n	800b57c <_raise_r+0x14>
 800b572:	2316      	movs	r3, #22
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	f04f 30ff 	mov.w	r0, #4294967295
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b57e:	b112      	cbz	r2, 800b586 <_raise_r+0x1e>
 800b580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b584:	b94b      	cbnz	r3, 800b59a <_raise_r+0x32>
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f830 	bl	800b5ec <_getpid_r>
 800b58c:	462a      	mov	r2, r5
 800b58e:	4601      	mov	r1, r0
 800b590:	4620      	mov	r0, r4
 800b592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b596:	f000 b817 	b.w	800b5c8 <_kill_r>
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d00a      	beq.n	800b5b4 <_raise_r+0x4c>
 800b59e:	1c59      	adds	r1, r3, #1
 800b5a0:	d103      	bne.n	800b5aa <_raise_r+0x42>
 800b5a2:	2316      	movs	r3, #22
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	e7e7      	b.n	800b57a <_raise_r+0x12>
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	4798      	blx	r3
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e7e0      	b.n	800b57a <_raise_r+0x12>

0800b5b8 <raise>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <raise+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f7ff bfd3 	b.w	800b568 <_raise_r>
 800b5c2:	bf00      	nop
 800b5c4:	2000000c 	.word	0x2000000c

0800b5c8 <_kill_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	; (800b5e8 <_kill_r+0x20>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	f7f6 fa23 	bl	8001a20 <_kill>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d102      	bne.n	800b5e4 <_kill_r+0x1c>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	b103      	cbz	r3, 800b5e4 <_kill_r+0x1c>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200004b4 	.word	0x200004b4

0800b5ec <_getpid_r>:
 800b5ec:	f7f6 ba10 	b.w	8001a10 <_getpid>

0800b5f0 <__sread>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f8:	f000 f894 	bl	800b724 <_read_r>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	bfab      	itete	ge
 800b600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b602:	89a3      	ldrhlt	r3, [r4, #12]
 800b604:	181b      	addge	r3, r3, r0
 800b606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b60a:	bfac      	ite	ge
 800b60c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b60e:	81a3      	strhlt	r3, [r4, #12]
 800b610:	bd10      	pop	{r4, pc}

0800b612 <__swrite>:
 800b612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	461f      	mov	r7, r3
 800b618:	898b      	ldrh	r3, [r1, #12]
 800b61a:	05db      	lsls	r3, r3, #23
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	4616      	mov	r6, r2
 800b622:	d505      	bpl.n	800b630 <__swrite+0x1e>
 800b624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b628:	2302      	movs	r3, #2
 800b62a:	2200      	movs	r2, #0
 800b62c:	f000 f868 	bl	800b700 <_lseek_r>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b63a:	81a3      	strh	r3, [r4, #12]
 800b63c:	4632      	mov	r2, r6
 800b63e:	463b      	mov	r3, r7
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	f000 b817 	b.w	800b678 <_write_r>

0800b64a <__sseek>:
 800b64a:	b510      	push	{r4, lr}
 800b64c:	460c      	mov	r4, r1
 800b64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b652:	f000 f855 	bl	800b700 <_lseek_r>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	bf15      	itete	ne
 800b65c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b65e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b666:	81a3      	strheq	r3, [r4, #12]
 800b668:	bf18      	it	ne
 800b66a:	81a3      	strhne	r3, [r4, #12]
 800b66c:	bd10      	pop	{r4, pc}

0800b66e <__sclose>:
 800b66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b672:	f000 b813 	b.w	800b69c <_close_r>
	...

0800b678 <_write_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_write_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f6 fa01 	bl	8001a8e <_write>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_write_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_write_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	200004b4 	.word	0x200004b4

0800b69c <_close_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d06      	ldr	r5, [pc, #24]	; (800b6b8 <_close_r+0x1c>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7f6 fa0d 	bl	8001ac6 <_close>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_close_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_close_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	200004b4 	.word	0x200004b4

0800b6bc <_fstat_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d07      	ldr	r5, [pc, #28]	; (800b6dc <_fstat_r+0x20>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	f7f6 fa08 	bl	8001ade <_fstat>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d102      	bne.n	800b6d8 <_fstat_r+0x1c>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	b103      	cbz	r3, 800b6d8 <_fstat_r+0x1c>
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	bf00      	nop
 800b6dc:	200004b4 	.word	0x200004b4

0800b6e0 <_isatty_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d06      	ldr	r5, [pc, #24]	; (800b6fc <_isatty_r+0x1c>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	f7f6 fa07 	bl	8001afe <_isatty>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d102      	bne.n	800b6fa <_isatty_r+0x1a>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	b103      	cbz	r3, 800b6fa <_isatty_r+0x1a>
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	200004b4 	.word	0x200004b4

0800b700 <_lseek_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	; (800b720 <_lseek_r+0x20>)
 800b704:	4604      	mov	r4, r0
 800b706:	4608      	mov	r0, r1
 800b708:	4611      	mov	r1, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	602a      	str	r2, [r5, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	f7f6 fa00 	bl	8001b14 <_lseek>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_lseek_r+0x1e>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_lseek_r+0x1e>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	200004b4 	.word	0x200004b4

0800b724 <_read_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d07      	ldr	r5, [pc, #28]	; (800b744 <_read_r+0x20>)
 800b728:	4604      	mov	r4, r0
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	2200      	movs	r2, #0
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	f7f6 f98e 	bl	8001a54 <_read>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_read_r+0x1e>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_read_r+0x1e>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	200004b4 	.word	0x200004b4

0800b748 <_init>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr

0800b754 <_fini>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr
